#!/usr/bin/env node

'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _core = require('puck-lang/dist/lib/stdlib/core');

var _js = require('puck-lang/dist/lib/stdlib/js');

var _fs = require('fs');

var fs = _interopRequireWildcard(_fs);

var _helpers = require('./../lib/helpers');

var _test = require('./../lib/test');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var argv = _js.process.argv;
var _arguments = _core.Iterable['$List'].skip.call(_core.Iterable['$List'].skipUntil.call(argv, function (arg) {
  return _core.String.contains.call(arg, "test");
}), 1);
var command = _arguments[0];
if (command == _js._undefined) {
  (function () {
    (0, _test.buildTestCompiler)();
    var failPattern = (0, _js.RegExp)("\\.error\\.puck$", "i");
    var caseFiles = (0, _helpers.walkSync)("test/cases");
    var failCases = caseFiles.filter(function (f) {
      return failPattern.test(f);
    });
    (0, _helpers.cmd)(".tmp/old/bin/puckc --out-dir .tmp/cases test/cases/**/!(*.error).puck");
    var buildString = (0, _js.require)("puck-lang/.tmp/old/lib/compiler").buildString;
    failCases.forEach(function (file) {
      return fs.readFileSync(file, { encoding: "utf-8" }).split("/////").forEach(function (test, i) {
        var firstNewline = test.indexOf("\n");
        var error = test.substr(0, firstNewline);
        var code = test.substr(firstNewline);
        if (!error && !code) {
          return false;
        };
        if (!error || !code || error.substr(0, 1) != " ") {
          (0, _core.print)("Test " + file + "::" + i + " is invalid, missing error or code");
          _js.process.exit(1);
        };
        var result = buildString(code, file);
        var __PUCK__value__1 = result;
        var __PUCK__value__2 = __PUCK__value__1;
        if (__PUCK__value__2.kind == "Ok") {
          var _PUCK__value__2$valu = _slicedToArray(__PUCK__value__2.value, 1),
              __PUCK__value__3 = _PUCK__value__2$valu[0];

          (0, _core.print)("error case did not error for " + file + "::" + i + "\nexpected error:" + error + "");
          return _js.process.exit(1);
        } else {
          var __PUCK__value__4 = __PUCK__value__1;
          if (__PUCK__value__4.kind == "Err") {
            var _PUCK__value__4$valu = _slicedToArray(__PUCK__value__4.value, 1),
                message = _PUCK__value__4$valu[0].message;

            if (!_core.String.contains.call(message, error.trim())) {
              (0, _core.print)("expected error for " + file + "::" + i + " to include " + error + "\n  but got\n" + message + "");
              return _js.process.exit(1);
            };
          };
        };
      });
    });
    (0, _helpers.cmd)("diff -Nr test/baselines .tmp/cases");
    (0, _core.print)("done");
  })();
} else {
  if (command == "update-baselines") {
    (0, _test.buildTestCompiler)();
    (0, _helpers.cmd)(".tmp/old/bin/puckc --out-dir test/baselines test/cases/**/!(*.error).puck");
    (0, _core.print)("done");
  } else {
    _js.console.error("Unknown command", command);
    _js.process.exit(1);
  };
}
