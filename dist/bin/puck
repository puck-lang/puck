#!/usr/bin/env node
'use strict';

const $unwrapTraitObject = obj => obj && (obj.$isTraitObject ? obj.value : obj);
const $puck_1 = require("puck-lang/dist/lib/stdlib/core");
const $puck_2 = require("puck-lang/dist/lib/stdlib/js");
const fs = require("fs");
const $puck_3 = require("./../lib/test/jest");
const path = require("path");
const $puck_4 = require("./../lib/ast/span");
const $puck_5 = require("./../lib/entities");
const $puck_6 = require("./../lib/compiler");
const $puck_7 = require("./../lib/helpers");
const argv = $unwrapTraitObject($puck_2.process.argv);
let $puck_9 = $puck_1.Iterable["$impl_lib/stdlib/core.puck:Iterable$List"].skipUntil.call({type: '$impl_lib/stdlib/core.puck:Iterable$List', value: argv, $isTraitObject: true}, function (arg) {
  return $puck_1.String.contains.call(arg, "puck");
})
;
let $puck_8 = $puck_1.Iterable[$puck_9.type].skip.call($puck_9, 1)
;
const _arguments = $puck_1.Iterable[$puck_8.type].toList.call($puck_8);
const command = $puck_1.Index["$impl_Index$List"].index.call({type: '$impl_Index$List', value: _arguments, $isTraitObject: true}, 0);
let $puck_10;
if ($puck_7.flag(_arguments, "--babel") !== "") {
  $puck_10 = true;
}
else {
  $puck_10 = false;
};
const useBabel = $puck_10;
const puckPattern = $puck_1.RegExp._new("\\.puck$", "i");
function normalizeBinName(file) {
  const dirname = path.dirname(file);
  const fileName = path.basename(file, ".puck").replace($puck_1.RegExp._new("^_"), "");
  return $unwrapTraitObject(path.join("dist", dirname, fileName));
};
if (command === "build") {
  let $puck_12 = $puck_1.Iterable["$impl_lib/stdlib/core.puck:Iterable$List"].filter.call({type: '$impl_lib/stdlib/core.puck:Iterable$List', value: $puck_7.walkSync("bin"), $isTraitObject: true}, function (f) {
    return $puck_1.RegExp.test.call(puckPattern, f);
  })
;
  let $puck_11 = $puck_1.Iterable[$puck_12.type].map.call($puck_12, function (file) {
    return {
      isBin: true,
      file: file,
      outFile: normalizeBinName(file),
    };
  })
;
  const binFiles = $puck_1.Iterable[$puck_11.type].toList.call($puck_11);
  let $puck_14 = $puck_1.Iterable["$impl_lib/stdlib/core.puck:Iterable$List"].filter.call({type: '$impl_lib/stdlib/core.puck:Iterable$List', value: $puck_7.walkSync("lib"), $isTraitObject: true}, function (f) {
    return $puck_1.RegExp.test.call(puckPattern, f);
  })
;
  let $puck_13 = $puck_1.Iterable[$puck_14.type].map.call($puck_14, function (file) {
    return {
      isBin: false,
      file: file,
      outFile: path.join("dist", file.replace($puck_1.RegExp._new("\\.puck$"), ".js")),
    };
  })
;
  const libFiles = $puck_1.Iterable[$puck_13.type].toList.call($puck_13);
  const projectPath = $unwrapTraitObject(fs.realpathSync("."));
  function reportError(file, token, error) {
    const self = this;
    let {line: line, column: column} = $puck_4.ToSpan[token.type].span.call(token).start;
    return $puck_1.panic($puck_2.Error($puck_5.CompilationError.message.call(error) + "\n  in " + file.absolutePath + " (" + line + ":" + column + ")"));
  };
  let context = $puck_6.CompilerContext._new(projectPath, reportError);
  $puck_6.build(libFiles, context, {
    dump: "",
    useBabel: useBabel,
  });
  $puck_6.build(binFiles, context, {
    dump: "",
    useBabel: useBabel,
  });
  $puck_1.print("done");
}
else {
  if ((command === "test")) {
    const watch = (!$puck_2.process.env.CI);
    const rootDir = $unwrapTraitObject(path.resolve("lib"));
    $puck_3.jest(watch, rootDir);
  }
  else {
    $puck_2.console.error("Unknown command", command);
    $puck_2.process.exit(1);
  };
}
