#!/usr/bin/env node

'use strict';

var cmd = require("../lib/helpers").cmd;
var _arguments = process.argv.takeFrom(function (arg) {
  return arg.indexOf("puck") > 0;
}).slice(1);
var command = _arguments[0];
function buildAll() {
  var outFolder = arguments.length <= 0 || arguments[0] === undefined ? "dist" : arguments[0];
  var compiler = arguments.length <= 1 || arguments[1] === undefined ? "dist" : arguments[1];

  return cmd("shopt -s globstar && " + compiler + "/bin/puckc --out-dir " + outFolder + " --skip-extension true bin/**/*.puck && " + compiler + "/bin/puckc --out-dir " + outFolder + " lib/**/*.puck");
};
function buildTestCompiler() {
  return cmd("rm -rf .tmp && mkdir -p .tmp/{old,new}/{bin,lib}/compiler")["then"](function () {
    return buildAll(".tmp/old");
  })["then"](function () {
    return cmd("cp dist/lib/compiler/{ast,parser,emitter}.js .tmp/old/lib/compiler &&       cp dist/lib/js.js .tmp/old/lib &&       cp dist/lib/compiler/{ast,parser,emitter}.js .tmp/new/lib/compiler/ &&       cp dist/lib/js.js .tmp/new/lib    ");
  });
};
if (command == "build") {
  var outDir = _arguments[1];
  buildAll(outDir)["then"](function () {
    return console.log("done");
  }).catch(function () {
    return process.exit(1);
  });
} else {
  if (command == "test") {
    buildTestCompiler()["then"](function () {
      return cmd("shopt -s globstar && " + ".tmp/old/bin/puckc --out-dir .tmp/cases test/cases/**/*.puck");
    })["then"](function () {
      return cmd("diff -Nr test/baselines .tmp/cases");
    })["then"](function () {
      return console.log("done");
    }).catch(function () {
      return process.exit(1);
    });
  } else {
    if (command == "update-baselines") {
      buildTestCompiler()["then"](function () {
        return cmd("shopt -s globstar && " + ".tmp/old/bin/puckc --out-dir test/baselines test/cases/**/*.puck");
      })["then"](function () {
        return console.log("done");
      }).catch(function () {
        return process.exit(1);
      });
    } else {
      if (command == "self-test") {
        buildTestCompiler()["then"](function () {
          return buildAll(".tmp/new", ".tmp/old");
        })["then"](function () {
          return cmd("diff -Nr .tmp/old .tmp/new");
        })["then"](function () {
          return console.log("done");
        }).catch(function () {
          return process.exit(1);
        });
      } else {
        console.error("Unknown command", command);
        process.exit(1);
      }
    }
  }
}
