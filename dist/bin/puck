#!/usr/bin/env node

'use strict';

var _core = require('puck-lang/dist/lib/stdlib/core');

var _js = require('puck-lang/dist/lib/stdlib/js');

var _fs = require('fs');

var fs = _interopRequireWildcard(_fs);

var _path = require('path');

var path = _interopRequireWildcard(_path);

var _compiler = require('./../lib/compiler.js');

var _helpers = require('./../lib/helpers.js');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var argv = _js.process.argv;
var _arguments = _core.Iterable['$List'].skip.call(_core.Iterable['$List'].skipUntil.call(argv, function (arg) {
  return _core.String.contains.call(arg, "puck");
}), 1);
var command = _arguments[0];
var puckPattern = (0, _js.RegExp)("\\.puck$", "i");
function normalizeBinName(file) {
  var dirname = path.dirname(file);
  var fileName = path.basename(file, ".puck").replace((0, _js.RegExp)("^_"), "");
  return path.join("dist", dirname, fileName);
};
if (command == "build") {
  var outDir = _arguments[1];
  var binFiles = (0, _helpers.walkSync)("bin").filter(function (f) {
    return puckPattern.test(f);
  }).map(function (file) {
    return {
      file: file,
      outFile: normalizeBinName(file)
    };
  });
  var libFiles = (0, _helpers.walkSync)("lib").filter(function (f) {
    return puckPattern.test(f);
  }).map(function (file) {
    return {
      file: file,
      outFile: path.join("dist", file.replace((0, _js.RegExp)("\\.puck$"), ".js"))
    };
  });
  (0, _compiler.build)(binFiles);
  (0, _compiler.build)(libFiles);
  (0, _core.print)("done");
} else {
  _js.console.error("Unknown command", command);
  _js.process.exit(1);
}
