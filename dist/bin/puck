#!/usr/bin/env node

'use strict';

var _helpers = require('./../lib/helpers.js');

var _js = require('./../lib/stdlib/js.js');

var _arguments = _js.process.argv.takeFrom(function (arg) {
  return arg.indexOf("puck") > 0;
}).slice(1);
var command = _arguments[0];
function buildAll() {
  var outFolder = arguments.length <= 0 || arguments[0] === undefined ? "dist" : arguments[0];
  var compiler = arguments.length <= 1 || arguments[1] === undefined ? "dist" : arguments[1];

  return (0, _helpers.cmd)("" + compiler + "/bin/puckc --out-dir " + outFolder + " --skip-extension true bin/**/*.puck && " + "" + compiler + "/bin/puckc --out-dir " + outFolder + " lib/**/*.puck");
};
function buildTestCompiler() {
  (0, _helpers.cmd)("rm -rf .tmp && mkdir -p .tmp/{old,new}/bin .tmp/{old,new}/lib/compiler .tmp/{old,new}/lib/stdlib/js");
  buildAll(".tmp/old");
  return (0, _helpers.cmd)("cp dist/lib/compiler/{ast,emitter}.js .tmp/old/lib/compiler &&     cp dist/lib/stdlib/js/js.js .tmp/old/lib/stdlib/js/ &&     cp dist/lib/compiler/{ast,emitter}.js .tmp/new/lib/compiler/ &&     cp dist/lib/stdlib/js/js.js .tmp/new/lib/stdlib/js/  ");
};
if (command == "build") {
  var outDir = _arguments[1];
  buildAll(outDir);
  _js.console.log("done");
} else {
  if (command == "test") {
    (function () {
      buildTestCompiler();
      var failPattern = (0, _js.RegExp)("\\.error\\.puck$", "i");
      var caseFiles = (0, _helpers.walkSync)("test/cases");
      var failCases = caseFiles.filter(function (f) {
        return failPattern.test(f);
      });
      (0, _helpers.cmd)(".tmp/old/bin/puckc --out-dir .tmp/cases test/cases/**/!(*.error).puck");
      failCases.forEach(function (f) {
        return (0, _helpers.cmd)("! (.tmp/old/bin/puckc --out-dir .tmp/cases " + f + " 2> /dev/null && " + "echo \"error case did not error for " + f + "\")");
      });
      (0, _helpers.cmd)("diff -Nr test/baselines .tmp/cases");
      _js.console.log("done");
    })();
  } else {
    if (command == "update-baselines") {
      buildTestCompiler();
      (0, _helpers.cmd)(".tmp/old/bin/puckc --out-dir test/baselines test/cases/**/!(*.error).puck");
      _js.console.log("done");
    } else {
      if (command == "self-test") {
        buildTestCompiler();
        buildAll(".tmp/new", ".tmp/old");
        (0, _helpers.cmd)("diff -Nr .tmp/old .tmp/new");
        _js.console.log("done");
      } else {
        _js.console.error("Unknown command", command);
        _js.process.exit(1);
      };
    };
  };
}
