#!/usr/bin/env node

'use strict';

var _core = require('puck-lang/dist/lib/stdlib/core');

var _js = require('puck-lang/dist/lib/stdlib/js');

var _fs = require('fs');

var fs = _interopRequireWildcard(_fs);

var _jest = require('./../lib/test/jest');

var _path = require('path');

var path = _interopRequireWildcard(_path);

var _compiler = require('./../lib/compiler');

var _helpers = require('./../lib/helpers');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var $unwrapTraitObject = function $unwrapTraitObject(obj) {
  return obj && (obj.$isTraitObject ? obj.value : obj);
};

var argv = $unwrapTraitObject(_js.process).argv;
var __PUCK__value__1 = _core.Iterable['$List<E>'].skipUntil.call({ type: '$List<E>', value: argv, $isTraitObject: true }, function (arg) {
  return _core.String.contains.call(arg, "puck");
});
var _arguments = _core.Iterable[__PUCK__value__1.type].skip.call(__PUCK__value__1, 1);
var command = _arguments.value[0];
var puckPattern = (0, _js.RegExp)("\\.puck$", "i");
function normalizeBinName(file) {
  var dirname = $unwrapTraitObject(path).dirname(file);
  var fileName = $unwrapTraitObject($unwrapTraitObject(path).basename(file, ".puck")).replace((0, _js.RegExp)("^_"), "");
  return $unwrapTraitObject(path).join("dist", dirname, fileName);
};
if (command == "build") {
  var outDir = _arguments.value[1];
  var __PUCK__value__3 = _core.Iterable['$List<E>'].filter.call({ type: '$List<E>', value: (0, _helpers.walkSync)("bin"), $isTraitObject: true }, function (f) {
    return $unwrapTraitObject(puckPattern).test(f);
  });
  var __PUCK__value__2 = _core.Iterable[__PUCK__value__3.type].map.call(__PUCK__value__3, function (file) {
    return {
      isBin: true,
      file: file,
      outFile: normalizeBinName(file)
    };
  });
  var binFiles = _core.Iterable[__PUCK__value__2.type].toList.call(__PUCK__value__2);
  var __PUCK__value__5 = _core.Iterable['$List<E>'].filter.call({ type: '$List<E>', value: (0, _helpers.walkSync)("lib"), $isTraitObject: true }, function (f) {
    return $unwrapTraitObject(puckPattern).test(f);
  });
  var __PUCK__value__4 = _core.Iterable[__PUCK__value__5.type].map.call(__PUCK__value__5, function (file) {
    return {
      file: file,
      outFile: $unwrapTraitObject(path).join("dist", file.replace((0, _js.RegExp)("\\.puck$"), ".js"))
    };
  });
  var libFiles = _core.Iterable[__PUCK__value__4.type].toList.call(__PUCK__value__4);
  (0, _compiler.build)(binFiles);
  (0, _compiler.build)(libFiles);
  (0, _core.print)("done");
} else {
  if (command == "test") {
    var watch = !$unwrapTraitObject($unwrapTraitObject(_js.process).env).CI;
    var rootDir = $unwrapTraitObject(path).resolve("lib");
    (0, _jest.jest)(watch, rootDir);
  } else {
    $unwrapTraitObject(_js.console).error("Unknown command", command);
    $unwrapTraitObject(_js.process).exit(1);
  };
}
