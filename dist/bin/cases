#!/usr/bin/env node
'use strict';

const $unwrapTraitObject = obj => obj && (obj.$isTraitObject ? obj.value : obj);
const $puck_1 = require("puck-lang/dist/lib/stdlib/core");
const $puck_2 = require("puck-lang/dist/lib/stdlib/js");
const fs = require("fs");
const $puck_3 = require("./../lib/helpers");
const $puck_4 = require("./../lib/test");
const argv = $unwrapTraitObject($puck_2.process.argv);
let $puck_6 = $puck_1.Iterable["$impl_lib/stdlib/core.puck:Iterable$List"].skipUntil.call({type: '$impl_lib/stdlib/core.puck:Iterable$List', value: argv, $isTraitObject: true}, function (arg) {
  return $puck_1.String.contains.call(arg, "cases");
})
;
let $puck_5 = $puck_1.Iterable[$puck_6.type].skip.call($puck_6, 1)
;
const _arguments = $puck_1.Iterable[$puck_5.type].toList.call($puck_5);
const command = $puck_1.List.get.call(_arguments, 0);
function checkErrorsInFile(projectPath, buildString, file) {
  const contents = $unwrapTraitObject(fs.readFileSync(file, {encoding: "utf-8"}));
  let $puck_7 = $puck_1.Iterable["$impl_lib/stdlib/core.puck:Iterable$List"].enumerate.call({type: '$impl_lib/stdlib/core.puck:Iterable$List', value: $puck_1.String.split.call(contents, "/////"), $isTraitObject: true})
;
  return $puck_1.Iterable[$puck_7.type].forEach.call($puck_7, function ([i, test]) {
    let $puck_8 = $puck_1.String.find.call(test, "\n");
    let $puck_9;
    if ($puck_8 !== undefined) {
      let index = $puck_8;
      $puck_9 = index;
    }
    else {
      let $puck_10;
      if (true) {
        const None = $puck_8;
        return undefined;
      };
      $puck_9 = $puck_10;
    };
    const firstNewline = $puck_9;
    const error = $puck_1.String.sub.call(test, $puck_1.Range._new(0, firstNewline));
    const code = $puck_1.String.sub.call(test, $puck_1.Range._new(firstNewline, $puck_1.String.size.call(test)));
    if ((!error || !code || !$puck_1.String.startsWith.call(error, " "))) {
      $puck_1.print("Test " + file + "::" + i + " is invalid, missing error or code");
      $puck_2.process.exit(1);
    };
    let $puck_11 = buildString(code, file, projectPath);
    if ($puck_11.kind === "Ok") {
      $puck_11;
      $puck_1.print("error case did not error for " + file + "::" + i + "\nexpected error:" + error + "");
      $puck_2.process.exit(1);
      return undefined;
    }
    else {
      if ($puck_11.kind === "Err") {
        let {value: {message: message}} = $puck_11;
        if ((!$puck_1.String.contains.call(message, $puck_1.String.trim.call(error)))) {
          $puck_1.print("expected error for " + file + "::" + i + " to include " + error + "\n  but got\n" + message + "");
          return $puck_2.process.exit(1);
        };
      };
    };
  });
};
let $puck_12 = command;
if ($puck_12 === undefined) {
  $puck_12;
  $puck_4.buildTestCompiler();
  const failPattern = $puck_1.RegExp._new("\\.error\\.puck$", "i");
  const caseFiles = $puck_3.walkSync("test/cases");
  const failCases = $puck_1.Iterable["$impl_lib/stdlib/core.puck:Iterable$List"].filter.call({type: '$impl_lib/stdlib/core.puck:Iterable$List', value: caseFiles, $isTraitObject: true}, function (f) {
    return $puck_1.RegExp.test.call(failPattern, f);
  });
  $puck_3.cmd(".tmp/old/bin/puckc --out-dir .tmp/cases test/cases/**/!(*.error).puck");
  const buildString = $unwrapTraitObject(require("puck-lang/.tmp/old/lib/compiler").buildString);
  const projectPath = $unwrapTraitObject(fs.realpathSync("."));
  $puck_1.Iterable[failCases.type].forEach.call(failCases, function (file) {
    return checkErrorsInFile(projectPath, buildString, file);
  });
  $puck_3.cmd("diff -Nr test/baselines .tmp/cases");
  $puck_1.print("done");
}
else {
  if ($puck_12 !== undefined) {
    let command = $puck_12;
    if (command === "file") {
      const file = $puck_1.Index["$impl_Index$List"].index.call({type: '$impl_Index$List', value: _arguments, $isTraitObject: true}, 1);
      const built = file.replace($puck_1.RegExp._new("\\.puck$"), ".js");
      $puck_4.buildTestCompiler();
      if ($puck_1.String.endsWith.call(file, ".error.puck")) {
        const projectPath = $unwrapTraitObject(fs.realpathSync("."));
        const buildString = $unwrapTraitObject(require("puck-lang/.tmp/old/lib/compiler").buildString);
        checkErrorsInFile(projectPath, buildString, file);
      }
      else {
        $puck_3.cmd(".tmp/old/bin/puckc --out-dir .tmp/cases " + file + "");
        $puck_3.cmd("diff -Nr test/baselines/" + built + " .tmp/cases/" + built + "");
      };
      $puck_1.print("done");
    }
    else {
      if (command === "update-baselines") {
        $puck_4.buildTestCompiler();
        $puck_3.cmd(".tmp/old/bin/puckc --out-dir test/baselines test/cases/**/!(*.error).puck");
        $puck_1.print("done");
      }
      else {
        $puck_2.console.error("Unknown command", command);
        $puck_2.process.exit(1);
      };
    };
  };
}
