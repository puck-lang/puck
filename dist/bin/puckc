#!/usr/bin/env node

'use strict';

var _core = require('puck-lang/dist/lib/stdlib/core');

var _js = require('puck-lang/dist/lib/stdlib/js');

var _path = require('path');

var _helpers = require('./../lib/helpers.js');

var _compiler = require('./../lib/compiler.js');

var _js2 = require('./../lib/stdlib/js.js');

var E = _js.Error;
E.stackTraceLimit = 100;
var argv = _js2.process.argv;
var _arguments = _core.Iterable['$List'].skip.call(_core.Iterable['$List'].skipUntil.call(argv, function (arg) {
  return _core.String.contains.call(arg, "puckc");
}), 1);
var outDir = (0, _helpers.flag)(_arguments, "--out-dir", "dist");
var outFile = (0, _helpers.flag)(_arguments, "--out-file");
var dump = (0, _helpers.flag)(_arguments, "--dump");
var __PUCK__value__1 = void 0;
if ((0, _helpers.flag)(_arguments, "--skip-extension")) {
  __PUCK__value__1 = "";
} else {
  __PUCK__value__1 = ".js";
};
var extension = __PUCK__value__1;
var ignoreErrors = (0, _helpers.flag)(_arguments, "--ignore-errors");
var isBinary = (0, _helpers.flag)(_arguments, "--is-binary");
if (_arguments.length > 1 && outFile) {
  _js2.console.error("Can't specify --out-file with more than one input file");
  _js2.process.exit(1);
};
if (_arguments.length == 0) {
  (0, _core.print)("Usage:\n  puckc [--out-file $file] [--out-dir $dir=dist] [--dump ast|typed-ast|js] [--skip-extension true] [--ignore-errors true] ...files\n");
  _js2.process.exit(1);
} else {
  var files = _core.Iterable['$List'].map.call(_arguments, function (file) {
    return {
      isBin: isBinary,
      file: file,
      outFile: outFile || (0, _path.join)(outDir, file.replace((0, _js2.RegExp)("\\.puck$"), extension))
    };
  });
  (0, _compiler.build)(files, {
    dump: dump,
    ignoreErrors: ignoreErrors
  });
}
