import 'puck:js' as {Error, console, process}
import 'node:fs' as fs
import '../lib/test/jest.puck' as {jest}
import 'node:path' as path
import '../lib/ast/span.puck' as {ToSpan}
import '../lib/entities.puck' as {CompilationError, File}
import '../lib/compiler.puck' as {CompilerContext, build}
import '../lib/helpers.puck' as {flag, walkSync}

let argv: List<String> = process->argv.transmute()
let arguments = argv.skipUntil(|arg| arg.contains('puck')).skip(1).toList()
let command = arguments[0]
let useBabel = if flag(arguments, '--babel') != '' then true else false

let puckPattern = RegExp.new('\\.puck$', 'i')

fn normalizeBinName(file) -> String {
  let dirname = path->dirname(file)
  let fileName = path->basename(file, '.puck')->replace(RegExp.new('^_'), '')
  path->join('dist', dirname, fileName).transmute()
}

if command == 'build' {
  let binFiles = walkSync('bin')
    .filter(|f| puckPattern.test(f))
    .map(|file| {{
      isBin: true
      file
      outFile: normalizeBinName(file)
    }})
    .toList()
  let libFiles = walkSync('lib')
    .filter(|f| puckPattern.test(f))
    .map(|file| {{
      isBin: false
      file
      outFile: path->join('dist', file->replace(RegExp.new('\\.puck$'), '.js')).transmute()
    }})
    .toList()

  let projectPath: String = fs->realpathSync('.').transmute()
  fn reportError(self, file: File, token: ToSpan, error: CompilationError) {
    let {line, column} = token.span().start
    throw Error(error.message() + '\n  in ' + file.absolutePath + ' ($line:$column)')
  }
  let mut context = CompilerContext.new(projectPath, reportError)
  build(libFiles, context, {dump: '', useBabel})
  build(binFiles, context, {dump: '', useBabel})

  print('done')
}
else if command == 'test' {

  // Watch unless on CI
  let watch = not process->env->CI
  let rootDir: String = path->resolve('lib').transmute()

  jest(watch, rootDir)
}
else {
  console->error('Unknown command', command)
  process->exit(1)
}
