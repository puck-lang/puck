let cmd = require('../lib/helpers').cmd
let walkSync = require('../lib/helpers').walkSync

let arguments = process.argv.takeFrom(fn (arg) {arg.indexOf('puck') > 0}).slice(1)
let command = arguments[0]

fn buildAll(outFolder = 'dist', compiler = 'dist') {
  cmd(
    '$compiler/bin/puckc --out-dir $outFolder --skip-extension true bin/**/*.puck && ' +
    '$compiler/bin/puckc --out-dir $outFolder lib/**/*.puck'
  )
}

fn buildTestCompiler() {
  cmd('rm -rf .tmp && mkdir -p .tmp/{old,new}/bin .tmp/{old,new}/lib/compiler .tmp/{old,new}/lib/stdlib/js')
  buildAll('.tmp/old')
  cmd('cp dist/lib/compiler/{ast,emitter}.js .tmp/old/lib/compiler && \
    cp dist/lib/js.js .tmp/old/lib && \
    cp dist/lib/stdlib/js/js.js .tmp/old/lib/stdlib/js/ && \
    cp dist/lib/compiler/{ast,emitter}.js .tmp/new/lib/compiler/ && \
    cp dist/lib/js.js .tmp/new/lib && \
    cp dist/lib/stdlib/js/js.js .tmp/new/lib/stdlib/js/\
  ')
}

if command == 'build' {
  let outDir = arguments[1]

  buildAll(outDir)
  console.log('done')
}
else if command == 'test' {
  buildTestCompiler()

  let failPattern = RegExp('\\.error\\.puck$', 'i')
  let caseFiles = walkSync('test/cases')
  let failCases = caseFiles.filter(|f| failPattern.test(f))

  cmd('.tmp/old/bin/puckc --out-dir .tmp/cases test/cases/**/!(*.error).puck')
  failCases.forEach(|f| cmd(
    '! (.tmp/old/bin/puckc --out-dir .tmp/cases $f 2> /dev/null && ' +
    'echo "error case did not error for $f")'
  ))

  cmd('diff -Nr test/baselines .tmp/cases')
  console.log('done')
}
else if command == 'update-baselines' {
  buildTestCompiler()
  cmd('.tmp/old/bin/puckc --out-dir test/baselines test/cases/**/!(*.error).puck')
  console.log('done')
}
else if command == 'self-test' {
  buildTestCompiler()
  buildAll('.tmp/new', '.tmp/old')
  cmd('diff -Nr .tmp/old .tmp/new')
  console.log('done')
}
else {
  console.error('Unknown command', command)
  process.exit(1)
}
