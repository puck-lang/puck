let cmd = require('../lib/helpers').cmd

let arguments = process.argv.takeFrom(fn (arg) {arg.indexOf('puck') > 0}).slice(1)
let command = arguments[0]

fn buildAll(outFolder = 'dist', compiler = 'dist') {
  cmd(
    '$compiler/bin/puckc --out-dir $outFolder --skip-extension true bin/**/*.puck && ' +
    '$compiler/bin/puckc --out-dir $outFolder lib/**/*.puck'
  )
}

fn buildTestCompiler() {
  cmd('rm -rf .tmp && mkdir -p .tmp/{old,new}/{bin,lib}/compiler')
    ['then'](fn () {buildAll('.tmp/old')})
    ['then'](fn () {cmd('cp dist/lib/compiler/{ast,emitter}.js .tmp/old/lib/compiler && \
      cp dist/lib/js.js .tmp/old/lib && \
      cp dist/lib/compiler/{ast,emitter}.js .tmp/new/lib/compiler/ && \
      cp dist/lib/js.js .tmp/new/lib\
    ')})
}

if command == 'build' {
  let outDir = arguments[1]

  buildAll(outDir)
    ['then'](fn () {console.log('done')})
    .catch(fn () {process.exit(1)})
}
else if command == 'test' {
  buildTestCompiler()
    ['then'](fn () {cmd(
      '.tmp/old/bin/puckc --out-dir .tmp/cases test/cases/**/!(*.error).puck && ' +
      '! (.tmp/old/bin/puckc --out-dir .tmp/cases test/cases/**/*.error.puck 2> /dev/null && echo "error case did not error")'
    )})
    ['then'](fn () {cmd('diff -Nr test/baselines .tmp/cases')})
    ['then'](fn () {console.log('done')})
    .catch(fn () {process.exit(1)})
}
else if command == 'update-baselines' {
  buildTestCompiler()
    ['then'](fn () {cmd(
      '.tmp/old/bin/puckc --out-dir test/baselines test/cases/**/!(*.error).puck'
    )})
    ['then'](fn () {console.log('done')})
    .catch(fn () {process.exit(1)})
}
else if command == 'self-test' {
  buildTestCompiler()
    ['then'](fn () {buildAll('.tmp/new', '.tmp/old')})
    ['then'](fn () {cmd('diff -Nr .tmp/old .tmp/new')})
    ['then'](fn () {console.log('done')})
    .catch(fn () {process.exit(1)})
}
else {
  console.error('Unknown command', command)
  process.exit(1)
}
