import 'puck:js' as {RegExp, console, process, require}
import 'node:fs' as fs
import '../lib/test/jest.puck' as {jest}
import 'node:path' as path
import '../lib/compiler.puck' as {build, createContext}
import '../lib/helpers.puck' as {walkSync}

let argv: List<String> = process.argv
let arguments = argv.skipUntil(|arg| arg.contains('puck')).skip(1).toList()
let command = arguments[0]

let puckPattern = RegExp('\\.puck$', 'i')

fn normalizeBinName(file) {
  let dirname = path.dirname(file)
  let fileName = path.basename(file, '.puck').replace(RegExp('^_'), '')
  path.join('dist', dirname, fileName)
}

if command == 'build' {
  let binFiles = walkSync('bin')
    .filter(|f| puckPattern.test(f))
    .map(|file| {{
      isBin: true
      file
      outFile: normalizeBinName(file)
    }})
    .toList()
  let libFiles = walkSync('lib')
    .filter(|f| puckPattern.test(f))
    .map(|file| {{
      isBin: false
      file
      outFile: path.join('dist', file.replace(RegExp('\\.puck$'), '.js'))
    }})
    .toList()

  let projectPath = fs.realpathSync('.')
  let mut context = createContext(projectPath)
  build(libFiles, context)
  build(binFiles, context)

  print('done')
}
else if command == 'test' {

  // Watch unless on CI
  let watch = not process.env.CI
  let rootDir = path.resolve('lib')

  jest(watch, rootDir)
}
else {
  console.error('Unknown command', command)
  process.exit(1)
}
