import 'puck:js' as {Error}
import 'node:fs' as {realpathSync}
import 'node:path' as {join}
import '../lib/helpers.puck' as {cmd, flag}
import '../lib/compiler.puck' as {createContext, build}
import '../lib/stdlib/js.puck' as {Array, RegExp, console, process}

let mut E = Error
E.stackTraceLimit = 100;

let argv: List<String> = process.argv
let arguments = argv.skipUntil(|arg| arg.contains('puckc')).skip(1)

let outDir = flag(arguments, '--out-dir', 'dist')
let outFile = flag(arguments, '--out-file')
let dump = flag(arguments, '--dump')
let extension = if flag(arguments, '--skip-extension') then '' else '.js'
let ignoreErrors = flag(arguments, '--ignore-errors')
let isBinary = flag(arguments, '--is-binary')

if arguments.length > 1 and outFile {
  console.error("Can't specify --out-file with more than one input file")
  process.exit(1)
}

if arguments.length == 0 {
  print('Usage:
  puckc [--out-file \$file] [--out-dir \$dir=dist] [--dump ast|typed-ast|js] [--skip-extension true] [--ignore-errors true] ...files
')
  process.exit(1)
} else {
  let projectPath = realpathSync('.')
  let mut context = createContext(projectPath, ignoreErrors)
  let files = arguments
    .map(|file| {{
      isBin: isBinary
      file
      outFile: outFile or join(outDir, file.replace(RegExp('\\.puck$'), extension))
    }})
    .toList()
  build(files, context, {dump})
}
