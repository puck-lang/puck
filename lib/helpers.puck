import 'puck:js' as {Array, asResult, console, process}
import 'node:child_process' as {execSync}
import 'node:fs' as fs
import 'node:path' as path
import 'compiler/ast.ts' as {SyntaxKind}

export fn cmd(cmd) {
  let result: Result<String, {}> = asResult(fn () {
    execSync(
      cmd
      {
        cwd: process->cwd()
        shell: '/bin/bash'
        env: {
          BASHOPTS: 'globstar:extglob'
          PATH: process->env->PATH
        }
      }
    )
  })

  match result {
    Result::Ok(output) => {
      if output->toString()
        then print(output->toString()->trim().transmute())
    }
    Result::Err(error) => {
      let stdout: String = error->stdout->toString().transmute()
      let stderr: String = error->stderr->toString().transmute()
      if stdout then print(stdout.trim())
      if stderr then console->error(stderr.trim())
      if error->stack then console->error(error->stack)
      process->exit(1)
      ()
    }
  }
}

/// Recursively and synchronously list all files in [directory]
export fn walkSync(directory, mut filelist = []) -> List<String> {
  if not fs->existsSync(directory) or not fs->statSync(directory)->isDirectory()
    then return []
  let mut files: List<String> = fs->readdirSync(directory).transmute()

  files.forEach(|fileName| {
    let file = path->join(directory, fileName)
    if fs->statSync(file)->isDirectory()
      then walkSync(file, filelist)
      else filelist.push(file)
    ()
  })

  filelist
}

export fn flag(arguments: List<String>, name, defaultValue = '') {
  if let Some(index) = arguments.iter().position(|a| a == name) {
    let value = arguments[index + 1]
    arguments->splice(index, 2)
    value
  }
  else defaultValue
}
