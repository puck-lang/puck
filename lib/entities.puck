import 'puck:js' as {Array, typeof}
import 'ast/ast.puck' as {
  Token
  Identifier
  Module
}

export type File {
  fileName: String
  projectPath: String
  absolutePath: String
  outDir: String
  outFile: String

  puck: String
  ast: Module
  js: String
}

export type Type {
  kind: String
  name: String
}

/// A data type (the ones declared with the `type` keywords), like String or Num
export type Struct { // + Type
  implementations: List<Implementation>
}

export type Trait {
  functions: ObjectMap<FunctionType>
}

export type Implementation {
  type_: Struct
  trait_: Trait
}

/// Represents a generic type like List<T>
export type TypeClass { // + Type
  parameterRange: Range
  typeParameters: List<TypeParameter>
  instances: List<TypeInstance>
}

/// Represents an instance of a generic type like List<String> or List<Num>
export type TypeInstance { // + Type
  class: TypeClass
  typeParameters: List<Type>
}
export type TypeParameter { // + Type
  defaultValue: Type
}

export type EnumType { // + Struct
  members: ObjectMap<Type>
}

/// Represents a function type (Num, Num) => Bool
export type FunctionType { // + Type
  selfBinding: Binding //?
  arguments: List<Binding>
  argumentRange: Range
  returnType: Type
  isAbstract: Bool
}

export type ObjectType { // + Struct
  properties: ObjectMap<Type>
}

export type TupleType { // + Struct
  properties: List<Type>
}

export type UnitType { // + Struct
  isUnit: Bool
}

export type GenericFunction {}  // FunctionType + TypeClass
export type GenericFunctionInstace {}  // FunctionType + TypeInstance

export type Binding {
  name: String
  token: Token
  mutable: Bool
  type_: Type //?
  redefined: Bool
  previous: Binding //?
}

export type TypeBinding {
  name: String
  type_: Type //?
}

export type Scope {
  getLocalBinding: (String) => Binding
  // getBinding: (String, allowRedeclare = true) => Binding
  getBinding: (String) => Binding
  getTypeBinding: (String) => Binding
  define: (Binding, Bool) => Binding
  defineType: (String, Binding) => Binding
}

export type ScopeAware {
  scope: Scope
}

export fn isEnumType(type_) {
  type_.members
}

export fn isFunctionType(type_) {
  type_.arguments
}

export fn isObjectType(type_) {
  typeof(type_.properties) == 'object' and not isTupleType(type_)
}

export fn isTupleType(type_) {
  Array.isArray(type_.properties)
}

export fn isStruct(type_) {
  type_.implementations
}

export fn isTrait(type_) {
  type_.functions
}

export fn isTypeClass(type_: Type) {
  type_.parameterRange
}

export fn isTypeInstance(type_: Type) {
  type_.class
}

export fn isTypeParameter(type_: Type) {
  type_.isTypeParameter
}
