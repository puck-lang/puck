import 'puck:js' as {Array, Error, Object, typeof}
import 'ast/ast.puck' as {
  Module
  Identifier
  TypePath
  TypeParameter: AstTypeParameter
}
import 'ast/span.puck' as {Span, ToSpan}
import 'typeck/src/range.puck' as {getRange}
import 'typeck/src/scope.puck' as {Binding}

export type BuildFile {
  isBin: Bool
  file: String
  outFile: String
}

export type File {
  isBin: Bool
  fileName: String
  absolutePath: String
  outFile: Option<String>

  puck: String
  ast: Option<Module>
  js: Option<String>
}

export enum CompilationError {
  UndefinedVariable(String)
  TraitNotInScope {functionName?: String, traitName: String, id: String}
  Other(String)
}

impl CompilationError {
  fn message(self) -> String {
    match self {
      CompilationError::UndefinedVariable(name) => 'Use of undefined variable $name'
      CompilationError::TraitNotInScope {functionName, traitName} => {
        if let Some(functionName) = functionName
          then 'The function $functionName is defined in trait $traitName but it is not in scope'
          else 'The trait $traitName it is not in scope'
      }
      CompilationError::Other(name) => name
    }
  }
}

let startWithNumber = RegExp.new('^[0-9]')

fn getFunctionTypeName(function: Function) {
  let mut parameters = function.parameters
    .map(|b| {
      let typeName = b.type_.displayName()
      let typed =
        if startWithNumber.test(b.name)
          then typeName
          else b.name ++ ': $typeName'
      if b.mutable
        then 'mut $typed'
        else typed
    })
    .toList()
  if let Some(selfBinding) = function.selfBinding {
    if selfBinding.mutable
      then parameters.lpush('mut self')
      else parameters.lpush('self')
  }
  let parameters = parameters->join(', ')
  let returnType = function.returnType.displayName()

  '($parameters) -> $returnType'
}

fn getTupleTypeName(properties: Iterable<Type>) {
  '(' ++ properties.map(|type_| type_.displayName())->join(', ').transmute::<String>() ++ ')'
}

fn getRecordTypeName(properties: ObjectMap<RecordMember>) {
  '{' ++
    properties
      .toList()
      .map(|(key, {type_, optional})| {
        let questionMark = if optional then '?' else ''
        '$key$questionMark: ' ++ type_.displayName()
      })
      ->join(', ')
      .transmute::<String>() ++
  '}'
}

fn getGenericName(name: String, type_: Type, showClassParameters = false) {
  let parameters =
    if let Option::Some(instance) = type_.instance {
      '<' ++ instance.typeParameters.map(|p| p.displayName())->join(', ').transmute::<String>() ++ '>'
    }
    else if showClassParameters
      then if let Option::Some(class) = type_.class {
        '<' ++ class.typeParameters.map(|p| p.displayName())->join(', ').transmute::<String>() ++ '>'
      }
      else ''
    else ''

  if type_.isFunction()
    then parameters ++ name
    else name ++ parameters
}

export type Definition {
  file: File
  token: ToSpan
}

export type Type {
  definition: Definition
  id: Option<String>
  displayName: Option<String>
  name: Option<String>
  kind: TypeKind
  class: Option<TypeClass>
  instance: Option<TypeInstance>
  /// A type definition will have a type like (String) -> String as it can be used as
  /// a function and doesn't contain any properties directly.
  /// providesType will then point to the type defined by the definition (like String)
  providesType: Option<Type>
  /// If this type is a member of an enum, enumMember will contain the
  /// member name and a pointer to the enum type
  enumMember: Option<(String, Type)>
}

impl Type {
  fn empty(definition: Definition) -> Type {{
    definition
    id: None
    displayName: Some('()')
    name: None
    kind: TypeKind::Struct({
      implementations: []
      kind: StructKind::Tuple({properties: []})
    })
    class: None
    instance: None
    providesType: None
    enumMember: None
  }}

  fn provides(mut type_: Type) -> Type {{
    definition: type_.definition
    id: None
    displayName: type_.displayName
    name: type_.name
    kind: TypeKind::Struct({
      implementations: []
      kind: StructKind::Tuple({properties: []})
    })
    class: type_.class
    instance: type_.instance
    providesType: Some(type_)
    enumMember: None
  }}

  fn unused(definition: Definition) -> Type {{
    definition
    id: None
    displayName: Some('_')
    name: None
    kind: TypeKind::Parameter({
      defaultValue: None
    })
    class: None
    instance: None
    providesType: None
    enumMember: None
  }}

  fn never(definition: Definition) -> Type {{
    definition
    id: None
    displayName: Some('Never')
    name: None
    kind: TypeKind::Enum({
      implementations: []
      members: ObjectMap.new()
    })
    class: None
    instance: None
    providesType: None
    enumMember: None
  }}

  fn displayName(self) -> String {
    if not self then return '??'
    if let Option::Some(name) = self.displayName {
      return name
    }
    match self.kind {
      TypeKind::Enum(enum_) => getGenericName(self.name.unwrap(), self)
      TypeKind::Function(function) => self.name.unwrapOrElse(|| getFunctionTypeName(function))
      TypeKind::Intersection(intersection) => {
        intersection.baseType.displayName() ++ ' + ' ++ intersection.intersectedTrait.displayName()
      }
      TypeKind::Parameter(_) => self.name.unwrap()
      TypeKind::Struct(struct) => {
        self.name
          .mapOrElse(
            || match struct.kind {
              StructKind::Record({properties}) => getRecordTypeName(properties)
              StructKind::Tuple({properties}) => getTupleTypeName(properties)
              StructKind::Unit => self.name.unwrap()
            }
            |name| getGenericName(name, self))
      }
      TypeKind::Trait(_) => getGenericName(self.name.unwrap(), self, true)
    }
  }

  fn verboseName(self) -> String {
    if not self then return '??'
    match self.kind {
      TypeKind::Enum(enum_) => getGenericName(self.name.unwrap(), self, true)
      TypeKind::Function(function) => getGenericName(getFunctionTypeName(function), self, true)
      TypeKind::Intersection(intersection) => {
        intersection.baseType.verboseName() ++ ' + ' ++ intersection.intersectedTrait.verboseName()
      }
      TypeKind::Parameter(_) => self.name.unwrap()
      TypeKind::Struct(struct) => {
        match struct.kind {
          StructKind::Record({properties}) => getRecordTypeName(properties)
          StructKind::Tuple({properties}) => getTupleTypeName(properties)
          StructKind::Unit => self.name.unwrap()
        }
      }
      TypeKind::Trait(_) => getGenericName(self.name.unwrap(), self, true)
    }
  }

  fn debugName(self) -> String {
    if not self then return '??'

    self.id.unwrapOr('no-id') ++ ': ' ++
      self.providesType.map(|t| 'provides[' ++ t.debugName() ++ ']').unwrapOr('') ++
      match self.kind {
        TypeKind::Trait(trait_) => {
          'trait: ' ++ getGenericName(self.name.unwrap(), self, true) ++
          ' [' ++ trait_.requiredTraits.map(|t| t.debugName())->join(', ').transmute::<String>() ++ ']'
        }
        _ => self.verboseName()
      }
  }

  fn getEnum(self: Type) -> Enum {
    match self.kind {
      TypeKind::Enum(enum_) => enum_
      _ => {
        let name = self.displayName()
        panic(Error('Type $name is not an enum'))
      }
    }
  }

  fn getFunction(self: Type) -> Function {
    match self.kind {
      TypeKind::Function(function) => function
      _ => {
        let name = self.displayName()
        panic(Error('Type $name is not a function'))
      }
    }
  }

  fn getTrait(self: Type) -> Trait {
    match self.kind {
      TypeKind::Trait(trait_) => trait_
      _ => match self.providesType {
        Some(type_) => type_.getTrait()
        Option::None => {
          let name = self.displayName()
          panic(Error('Type $name is not a trait'))
        }
      }
    }
  }

  fn isEmpty(self) -> Bool {
    match self.kind {
      TypeKind::Struct(struct) => match struct.kind {
        StructKind::Tuple(tuple) => tuple.properties.isEmpty()
        _ => false
      }
      _ => false
    }
  }

  fn isNever(self) -> Bool {
    match self.kind {
      TypeKind::Enum(enum_) => enum_.members.isEmpty()
      _ => false
    }
  }

  fn isEnum(self) -> Bool {
    match self.kind {
      TypeKind::Enum(_) => true
      _ => false
    }
  }

  fn isFunction(self) -> Bool {
    match self.kind {
      TypeKind::Function(_) => true
      _ => false
    }
  }

  fn isParameter(self) -> Bool {
    match self.kind {
      TypeKind::Parameter(_) => true
      _ => false
    }
  }

  fn isTrait(self) -> Bool {
    match self.kind {
      TypeKind::Trait(_) => true
      _ => false
    }
  }

  fn typeParameters(self) -> Option<List<Type>> {
    self.instance
      .map(|i| i.typeParameters)
      .orValue(self.class.map(|i| i.typeParameters))
  }
}

export enum TypeKind {
  Enum(Enum)
  Function(Function)
  Intersection(Intersection)
  Parameter(TypeParameter)
  Struct(Struct)
  Trait(Trait)
}

export type Enum {
  implementations: List<Implementation>
  members: ObjectMap<Type>
}

/// Represents a function type (Num, Num) -> Bool
export type Function {
  selfBinding: Option<Binding>
  parameters: List<Binding>
  parameterRange: Range
  returnType: Type
  isAbstract: Bool
}

/// Represents an intersection of two types Add + Sub
export type Intersection {
  baseType: Type
  intersectedTrait: Type
}

/// A data type (the ones declared with the `type` keywords), like String or Num
export type Struct {
  implementations: List<Implementation>
  kind: StructKind
}

export type Trait {
  isShorthand: Bool
  requiredTraits: List<Type>
  functions: ObjectMap<Type>
}

export enum StructKind {
  Record(Record)
  Tuple(Tuple)
  Unit
}

export type Record {
  properties: ObjectMap<RecordMember>
}

export type RecordMember {
  type_: Type
  optional: Bool
}

export type Tuple {
  properties: List<Type>
}

export type Implementation {
  type_: Type
  trait_: Type
  typeParameters: List<Type>
  typeParameterBounds: Option<Map<Type, Type>>
  functions: ObjectMap<Type>
}

/// Represents a generic type like List<T>
export type TypeClass {
  parameterRange: Range
  typeParameters: List<Type>
  instances: List<Type>
}
impl TypeClass {
  fn fromAstNode(astNode: {typeParameters: List<AstTypeParameter>}, reportError: (ToSpan, String) -> ()) -> Option<TypeClass> {
    if astNode.typeParameters and astNode.typeParameters.size() {
      let parameterRange = getRange(
        astNode.typeParameters
        |p| p.defaultValue.isSome()
        reportError
        'type parameter'
      )

      Some({
        parameterRange
        typeParameters: []
        typeParameterBindings: astNode.typeParameters
        instances: []
      })
    }
    else None
  }
}

/// Represents an instance of a generic type like List<String> or List<Num>
export type TypeInstance {
  class: Type
  typeParameters: List<Type>
  parameterMap: ObjectMap<Type>
}
export type TypeParameter {
  defaultValue: Option<Type>
}
