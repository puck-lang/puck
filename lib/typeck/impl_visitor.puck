import '../ast/ast.puck' as {
  Module
  TopLevelStatement
  Expression

  ImplDeclaration
  ImplShorthandDeclaration
  TraitDeclaration
  TypeDeclaration
  FunctionDeclaration

  ImportDirective
  ImportSpecifier
  ObjectDestructure
  ExportDirective
  ExportedStatement

  Pattern
  TypeBound
  FunctionTypeBound
  IntersectionTypeBound
  NamedTypeBound
  RecordTypeBound
  TupleTypeBound
  TypeParameter
  TypePath
}
import '../ast/span.puck' as {ToSpan}
import '../compiler.puck' as {CompilerContext}
import '../ast/visit.puck' as {Visit}
import '../ast/visit.puck' as visit
import '../compiler/ast.ts' as {SyntaxKind}
import 'src/functions.puck' as {checkFunctionAssignability, createFunctionType}
import 'src/range.puck' as {checkRange}
import 'src/scope.puck' as {Binding, Scope}
import 'src/type_bound_visitor.puck' as {TypeBoundVisitor, visitMethodDeclaration}
import 'src/types.puck' as {
  isAssignable
  isSameType
  resolveTypeParameters
}
import '../entities.puck' as {
  Implementation
  File
  Trait
  Type
  TypeInstance
  TypeKind
  CompilationError
}

fn asMut<T>(i: T) {i}

export fn checkDefferedImpls(mut deferredImpl: Map<Type, List<(List<Type>, () -> ())>>) {
  for (type_, mut awaiters) of deferredImpl.entries() {
    let implementations = match type_.kind {
      TypeKind::Enum(enum_) => enum_.implementations
      TypeKind::Struct(struct) => struct.implementations
      _ => panic('Type ' ++ type_.displayName() ++ 'is not implementable')
    }

    if implementations.isNotEmpty() {
      let mut finished = Set.new()
      awaiters.iter().enumerate().forEach(|(i, (requiredTraits, callback))| {
        if requiredTraits.all(|trait_| isAssignable(trait_, type_)) {
          finished.add(requiredTraits)
          callback()
        }
      })
      awaiters.removeWhere(|(requiredTraits, _)| finished.has(requiredTraits))
    }
    if awaiters.isEmpty() {
      deferredImpl.delete(type_)
    }
  }
}

fn implementTrait(traitType: Type, trait_: Trait, type_: Type, mut implementable: {implementations: List<Implementation>}, mut i: ImplDeclaration, reportError: (ToSpan, String) -> (), id: String) {
  let traitName = traitType.displayName()

  if implementable.implementations.any(|imp| isSameType(imp.trait_, traitType))
    then reportError(i, '$traitName has already been implemented for ' ++ type_.displayName())

  trait_.requiredTraits.forEach(|requiredTrait| {
    if not isAssignable(requiredTrait, type_)
      then reportError(i, 'The trait ' ++ requiredTrait.displayName() ++
        ' is not implemented for the type ' ++ type_.displayName())
  })

  let functions = ObjectMap.fromIter(
    i.members.map(|functionDeclaration| {
      (functionDeclaration.type_.name.unwrap(), functionDeclaration.type_)
    })
  )

  let traitFunctions = trait_.functions

  traitFunctions.forEach(|(name, traitFunctionType)| {
    let traitFunction = traitFunctionType.getFunction()
    if traitFunction.isAbstract and not functions.has(name)
      then reportError(i, 'Function $traitName::$name is not implemented for ' ++ type_.displayName())
  })

  i.members.forEach(|functionDeclaration| {
    let functionName = functionDeclaration.type_.displayName()
    let function = functionDeclaration.type_.getFunction()
    if let Some(traitFunctionType) = traitFunctions.get(functionDeclaration.type_.name.unwrap()) {
      let traitFunctionName = traitFunctionType.displayName()
      let traitFunction = traitFunctionType.getFunction()

      match (function.selfBinding, traitFunction.selfBinding) {
        (Some(implSelf), Some(traitSelf)) => {
          if implSelf.mutable and not traitSelf.mutable
            then reportError(functionDeclaration, 'Function $traitName::$traitFunctionName requires an immutable self parameter')
        }
        (Option::None, Some(_)) => {
          reportError(functionDeclaration, 'Function $traitName::$traitFunctionName requires a self parameter')
        }
        (_, Option::None) => {
          reportError(functionDeclaration, 'Static trait functions can not be implemented')
        }
      }
    }
    else reportError(functionDeclaration, 'Function $functionName is not defined by $traitName')
  })

  let implementation = Implementation({
    id
    type_: type_
    trait_: traitType
    typeParameters: i.typeParameters.map(|p| p->type_.transmute()).toList()
    typeParameterBounds: i.whereClause.map(|w| Map.fromIter(w.bounds.map(|b| {
      (b.subType.getType(), b.superType.getType())
    })))
    functions
  })

  i->implementation = implementation
  implementable.implementations.push(implementation)

  let resolve =
    if let Some(traitInstance) = traitType.instance
      then resolveTypeParameters(traitInstance.parameterMap)
      else |t| t

  i.members.forEach(|mut functionDeclaration| {
    let functionName = functionDeclaration.type_.displayName()
    if let Some(mut traitFunctionType) = traitFunctions.get(functionDeclaration.type_.name.unwrap()) {
      let traitFunction = resolve(traitFunctionType).getFunction()
      let function = functionDeclaration.type_.getFunction()
      functionDeclaration->traitFunctionType = traitFunctionType

      if let Result::Err(error) = checkFunctionAssignability(functionName, traitFunction, function)
        then reportError(functionDeclaration, error)
    }
  })
}

fn implementShorthand(type_: Type, mut implementable: {implementations: List<Implementation>}, i: ImplShorthandDeclaration, reportError: (ToSpan, String) -> ()) {
  let typeName = type_.displayName()

  if implementable.implementations.any(|imp| imp.trait_.getTrait().isShorthand)
    then reportError(i, '$typeName has already been implemented')

  let functions = ObjectMap.fromIter(
    i.members.map(|functionDeclaration|
      (functionDeclaration.type_.name.unwrap(), functionDeclaration.type_)
    )
  )

  implementable.implementations.push({
    type_: type_
    trait_: {
      definition: type_.definition
      id: type_.id
      displayName: type_.displayName
      name: type_.name
      kind: TypeKind::Trait({
        isShorthand: true
        requiredTraits: []
        functions
      })
      class: None
      instance: None
      providesType: None
      enumMember: None
    }
    typeParameters: i.typeParameters.map(|p| p->type_.transmute()).toList()
    typeParameterBounds: None
    functions
  })
}

export type ImplVisitor {
  file: File
  context: CompilerContext
  scope: Scope
  typeBoundVisitor: TypeBoundVisitor
}

impl ImplVisitor {
  fn new(mut context: CompilerContext, file: File) -> ImplVisitor {
    let mut implVisitor = {
      context
      file
      scope: Scope.new(context)
      typeBoundVisitor: {
        getScope: || implVisitor.scope
        setScope: |scope| implVisitor.scope = scope
        file
        reportError: |token: ToSpan, error: CompilationError| {
          context.reportError(file, token, error)
        }
        visitorName: 'ImplVisitor'
      }
    }

    implVisitor
  }

  fn getImplId(mut self, type_: Type, trait_: Type) -> String {
    let mut id = '\$impl_' ++ type_.id.unwrap() ++ '\$' ++ trait_.id.unwrap()
    if let Some(count) = self.context.impls.get(id) {
      self.context.impls.set(id, count + 1)
      id = '$id\$$count'
    }
    else {
      self.context.impls.set(id, 1)
    }
    id
  }

  fn reportError(self, token: ToSpan, error: CompilationError) -> () {
    self.context.reportError(self.file, token, error)
  }
}


impl Visit for ImplVisitor {
  fn visitModule(mut self, m: Module) -> () {
    self.scope = m->scope.transmute()
    m.statements
      .filter(|e| match e {
        TopLevelStatement::ImplDeclaration(_) => true
        TopLevelStatement::ImplShorthandDeclaration(_) => true
        _ => false
      })
      .forEach(|s| self.visitTopLevelStatement(s))
  }

  fn visitImplDeclaration(mut self, i: ImplDeclaration) -> () {
    let parentScope = self.scope
    let mut scope = parentScope.createChild()
    self.scope = scope
    i.typeParameters.forEach(|mut p| self.visitTypeParameter(p))
    self.visitNamedTypeBound(asMut(i).trait_)
    self.visitNamedTypeBound(asMut(i).type_)

    let traitType = i.trait_.getType()
    let mut structType = i.type_.getType()
    scope.setSelfType(structType)
    if let Option::Some(whereClause) = i.whereClause
      then self.visitWhereClause(whereClause)
    i.members.forEach(|mut m| visitMethodDeclaration(self.typeBoundVisitor, m, structType))
    let id = self.getImplId(traitType, structType)

    if let TypeKind::Trait(trait_) = traitType.kind {
      fn implement() {
        match structType.kind {
          TypeKind::Enum(mut enum_) => {
            implementTrait(traitType, trait_, structType, enum_, asMut(i), |token, message| self.reportError(token, CompilationError::Other(message)), id)
          }
          TypeKind::Struct(mut struct) => {
            implementTrait(traitType, trait_, structType, struct, asMut(i), |token, message| self.reportError(token, CompilationError::Other(message)), id)
          }
          _ => self.reportError(i.type_,
            CompilationError::Other(structType.displayName() ++ ' is not a struct or an enum')
          )
        }

        i->extendedTraits = ObjectMap.fromIter(
          traitType.getTrait().requiredTraits.iter().filterMap(|trait_| {
            if let Some(binding) = scope.getBindingByTypeId(trait_.id.unwrap(), 'ImplVisitor') {
              Some((trait_.id.unwrap(), {name: binding.name, binding}))
            }
            else {
              let typeName = trait_.name.unwrap()
              self.reportError(
                i
                CompilationError::TraitNotInScope({
                  traitName: typeName
                  id: trait_.id.unwrap()
                })
              )
              None
            }
          }).collect()
        )
      }

      if trait_.requiredTraits.isNotEmpty()
        then self.context.deferAfterImpl(structType, trait_.requiredTraits, implement)
        else implement()
    }
    else self.reportError(i.trait_,
      CompilationError::Other(traitType.displayName() ++ ' is not a trait')
    )

    self.scope = parentScope
  }

  fn visitImplShorthandDeclaration(mut self, i: ImplShorthandDeclaration) -> () {
    let parentScope = self.scope
    let mut scope = parentScope.createChild()
    self.scope = scope
    i.typeParameters.forEach(|mut p| self.visitTypeParameter(p))
    self.visitNamedTypeBound(asMut(i).type_)

    let mut structType = i.type_.getType()
    scope.setSelfType(structType)
    i.members.forEach(|mut m| visitMethodDeclaration(self.typeBoundVisitor, m, structType))

    match structType.kind {
      TypeKind::Enum(mut enum_) => {
        implementShorthand(
          structType, enum_, asMut(i),
          |token, message| self.reportError(token, CompilationError::Other(message))
        )
      }
      TypeKind::Struct(mut struct) => {
        implementShorthand(
          structType, struct, asMut(i),
          |token, message| self.reportError(token, CompilationError::Other(message))
        )
      }
      _ => self.reportError(i.type_,
        CompilationError::Other(structType.displayName() ++ ' is not a struct or an enum')
      )
    }

    self.scope = parentScope
  }

  fn visitFunctionTypeBound(mut self, t: FunctionTypeBound) -> () {
    self.typeBoundVisitor.visitFunctionTypeBound(t)
  }
  fn visitIntersectionTypeBound(mut self, t: IntersectionTypeBound) -> () {
    self.typeBoundVisitor.visitIntersectionTypeBound(t)
  }
  fn visitNamedTypeBound(mut self, t: NamedTypeBound) -> () {
    self.typeBoundVisitor.visitNamedTypeBound(t)
  }
  fn visitRecordTypeBound(mut self, t: RecordTypeBound) -> () {
    self.typeBoundVisitor.visitRecordTypeBound(t)
  }
  fn visitTupleTypeBound(mut self, t: TupleTypeBound) -> () {
    self.typeBoundVisitor.visitTupleTypeBound(t)
  }
  fn visitTypeParameter(mut self, t: TypeParameter) -> () {
    self.typeBoundVisitor.visitTypeParameter(t)
  }
  fn visitTypePath(mut self, t: TypePath) -> () {
    self.typeBoundVisitor.visitTypePath(t)
  }
}
