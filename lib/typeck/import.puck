import 'puck:js' as {Object, RegExp, asResult, require}
import 'node:fs' as {statSync}
import 'node:path' as path
import '../ast/ast.puck' as {
  Module
  ImportDirective
}
import '../ast/visit.puck' as visit
import '../entities.puck' as {File}
import '../compiler/ast.ts' as {SyntaxKind}

let domains = ['node', 'puck']
let puckFile = RegExp('\\.puck$', 'i')
let puckModules = ['core', 'js']

export fn ImportVisitor(context, file: File) {
  let reportError = context.reportError.bind(context, file)
  let mut moduleScope

  fn importModule(i: ImportDirective, importedFile: File) {
    let module = context.importFile(importedFile).ast
    if not module then return context.defer(importedFile, || importModule(i, importedFile))

    i.module = module
    if i.specifier.kind == SyntaxKind.ObjectDestructure {
      i.specifier.members.forEach(|m| {
        if not (module.exports[m.property.name])
          then reportError(m, importedFile.fileName + ' has no export named ' + m.property.name)
      })
    }
    else if i.specifier.kind == SyntaxKind.AsteriskToken {
      i.specifier = {
        kind: SyntaxKind.ObjectDestructure
        members: Object.keys(module.exports)
          .filter(|e| not moduleScope.getBinding(e))
          .map(|e| {
            let property = module.exports[e].identifier
            {
              kind: SyntaxKind.ObjectDestructureMember
              property
              local: property
            }
          })
      }
    }
  }

  Object.assign({}, visit.Visitor, {

    visitModule: |self, m: Module| {
      moduleScope = m.scope
      m.lines.forEach(|e| {
        if e.kind == SyntaxKind.ImportDirective {
          self.visitImportDirective(e)
        }
      })
    }

    visitImportDirective: |self, i: ImportDirective| {
      if i.domain == 'puck' {
        if puckModules.indexOf(i.path) == -1
          then reportError(i, 'Invalid puck module ' + i.path)
        let importedFile = context.resolvePath(
          path.join(
            path.dirname(require.resolve('puck-lang/dist/bin/puck'))
            '../../lib/stdlib/' + i.path + '.puck'
          )
          file
        )
        importModule(i, importedFile)
      }
      else if not i.domain {
        let importedFile = context.resolvePath(i.path, file)
        let path = importedFile.absolutePath
        let result = asResult(|| statSync(path))
        if result.error
          then reportError(i, 'Imported file $path not found')
        else if not result.result.isFile()
          then reportError(i, 'Imported file $path is not a file')

        if puckFile.test(path) then importModule(i, importedFile)
      }
      else if domains.indexOf(i.domain)
        then reportError(i, 'Invalid import domain ' + i.domain)
    }
  })
}
