import 'node:fs' as {statSync}
import '../ast/visit.puck' as visit
import '../compiler/ast.ts' as {SyntaxKind}
import '../stdlib/js.puck' as {Object, RegExp, asResult}

let puckFile = RegExp('\\.puck$', 'i')

export fn ImportVisitor(context, file) {
  let reportError = context.reportError.bind(context, file)

  Object.assign({}, visit.Visitor, {

    visitModule: |self, m: Module| {
      m.lines.forEach(|e| {
        if e.kind == SyntaxKind.ImportDirective {
          self.visitImportDirective(e)
        }
      })
    }

    visitImportDirective: |self, i: ImportDirective| {
      if not i.domain {
        let importedFile = context.resolvePath(i.path, file)
        let path = importedFile.absolutePath
        let result = asResult(|| statSync(path))
        if result.error
          then reportError(i, 'Imported file $path not found')
        else if not result.result.isFile()
          then reportError(i, 'Imported file $path is not a file')

        if puckFile.test(path) {
          let module = context.importFile(importedFile).ast
          if i.specifier.kind == SyntaxKind.ObjectDestructure {
            i.specifier.members.forEach(|m| {
              if not (module.exports[m.property.name])
                then reportError(m, importedFile.fileName + ' has no export named ' + m.property.name)
            })
          }
        }
      }
    }
  })
}
