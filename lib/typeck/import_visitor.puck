import 'puck:js' as {Object, asResult, require, undefined}
import 'node:fs' as {statSync}
import 'node:path' as path
import 'node:require-relative' as requireRelative
import '../ast/ast.puck' as {
  Module
  TopLevelStatement
  ImportDirective
  ImportSpecifier
}
import '../ast/span.puck' as {ToSpan}
import '../compiler.puck' as {CompilerContext}
import '../ast/visit.puck' as visit
import '../entities.puck' as {File, CompilationError}
import '../compiler/ast.ts' as {SyntaxKind}

let domains = ['node', 'puck', 'package']
export let puckFile = RegExp.new('\\.puck$', 'i')
export let puckModules = ['core', 'js', 'test']

export fn ImportVisitor(mut context: CompilerContext, file: File) {
  let mut declarations: ObjectMap<ToSpan>

  fn importModule(mut i: ImportDirective, mut importedFile: File) -> () {
    match asResult(|| context.importFile(importedFile)) {
      Ok(contextFile) => {
        let module = match contextFile.ast {
          Some(module) => module
          Option::None => return context.defer(importedFile, || importModule(i, importedFile))
        }

        match i.specifier {
          ImportSpecifier::ObjectDestructure(o) => {
            o.members.forEach(|m| {
              if not module.exports.has(m.property.name)
                then context.reportError(file, m,
                  CompilationError::Other(importedFile.fileName + ' has no export named ' + m.property.name)
                )
            })
          }
          ImportSpecifier::Asterisk(token) => {
            i.specifier = ImportSpecifier::ObjectDestructure({
              openBrace: token
              closeBrace: token
              members: module.exports.keys()
                .filter(|e| not declarations.has(e))
                .map(|e| {
                  let property = module.exports[e].identifier
                  {
                    property
                    local: property
                    file: Some(module.file)
                  }
                })
                .toList()
            })
          }
          ImportSpecifier::Identifier(_) => {}
        }
        i->file = contextFile
        i.module = Some(module)
      }
      Err(err) => {
        if err.transmute::<String>() == 'Syntax Error' {
          context.reportError(file, i, CompilationError::Other(err.transmute::<String>()))
        }
        else throw err
      }
    }
  }

  Object->assign({}, visit.emptyVisitor, {

    visitModule: |self, mut m: Module| {
      declarations = m->declarations.transmute()
      m.statements.forEach(|s| {
        if let TopLevelStatement::ImportDirective(e) = s {
          self.visitImportDirective(e)
        }
      })
      // No need to keep this around after this step
      m->declarations = undefined
    }

    visitImportDirective: |self, mut i: ImportDirective| {
      match i.domain {
        Some(domain) => {
          if domain == 'puck' {
            if not puckModules.contains(i.path)
              then return context.reportError(file, i, CompilationError::Other('Invalid puck module ' + i.path))
            let mut importedFile = context.resolvePath(
              path->join(
                path->dirname(require->resolve('puck-lang/package.json'))
                'lib'
                'stdlib'
                i.path + '.puck'
              ).transmute::<String>()
              file
            )
            importModule(i, importedFile)
          }
          else if domain == 'package' {
            let slash = i.path.iter().position(|c: String| c == '/').unwrapOr(i.path.size())
            let packageName = i.path.sub(Range.new(0, slash))
            let packagePath = i.path.sub(Range.new(slash, i.path.size()))
            let result = asResult(|| context.resolvePath(
                path->join(
                  path->dirname(requireRelative->resolve('puck-$packageName/package.json', file.absolutePath))
                  'lib'
                  packagePath
                ).transmute::<String>()
                file
              )
            )
            match result {
              Ok(mut importedFile) => {
                if puckFile.test(importedFile.absolutePath)
                  then importModule(i, importedFile)
              }
              Err(error) => return context.reportError(file, i,
                CompilationError::Other('Imported file package:' + i.path + ' not found')
              )
            }
          }
          else if not domains.contains(domain) {
            context.reportError(file, i, CompilationError::Other('Invalid import domain $domain'))
          }
        }
        None => {
          let result = asResult(|| context.resolvePath(i.path, file))
          match result {
            Ok(mut importedFile) => {
              if puckFile.test(importedFile.absolutePath)
                then importModule(i, importedFile)
            }
            Err(error) => return context.reportError(file, i,
              CompilationError::Other('Imported file ' + i.path + ' not found')
            )
          }
        }
      }
      ()
    }
  })
}
