import 'puck:js' as {Object, RegExp, asResult, require}
import 'node:fs' as {statSync}
import 'node:path' as path
import '../ast/ast.puck' as {
  Module
  TopLevelStatement
  ImportDirective
  ImportSpecifier
}
import '../ast/span.puck' as {ToSpan}
import '../ast/visit.puck' as visit
import '../entities.puck' as {UnparsedFile}
import '../compiler/ast.ts' as {SyntaxKind}

let domains = ['node', 'puck']
let puckFile = RegExp('\\.puck$', 'i')
let puckModules = ['core', 'js', 'test']

export fn ImportVisitor(context, file: UnparsedFile) {
  let reportError: (ToSpan, String) -> {} = context.reportError.bind(context, file)
  let mut moduleScope

  fn importModule(mut i: ImportDirective, importedFile: UnparsedFile) {
    let contextFile = context.importFile(importedFile)
    let module: Module = contextFile.ast
    if not module then return context.defer(importedFile, || importModule(i, importedFile))

    match i.specifier {
      ImportSpecifier::ObjectDestructure(o) => {
        o.members.forEach(|m| {
          if not (module.exports[m.property.name])
            then reportError(m, importedFile.fileName + ' has no export named ' + m.property.name)
        })
      }
      ImportSpecifier::Asterisk(token) => {
        i.specifier = ImportSpecifier::ObjectDestructure({
          openBrace: token
          closeBrace: token
          members: module.exports.keys()
            .filter(|e| not moduleScope.getBinding(e))
            .map(|e| {
              let property = module.exports[e].identifier
              {
                property
                local: property
              }
            })
            .toList()
        })
      }
      ImportSpecifier::Identifier(_) => {}
    }
    i.file = contextFile
    i.module = module
  }

  Object.assign({}, visit.emptyVisitor, {

    visitModule: |self, m: Module| {
      moduleScope = m.scope
      m.statements.forEach(|s| {
        if let TopLevelStatement::ImportDirective(e) = s {
          self.visitImportDirective(e)
        }
      })
    }

    visitImportDirective: |self, mut i: ImportDirective| {
      if i.domain.isNone() {
        let importedFile = context.resolvePath(i.path, file)
        let path = importedFile.absolutePath
        let result: Result<{}, {}> = asResult(|| statSync(path))
        match result {
          Result::Ok(stat) => {
            if not stat.isFile()
              then return reportError(i, 'Imported file $path is not a file')
          }
          Result::Err(error) => return reportError(i, 'Imported file $path not found')
        }

        if puckFile.test(path) then importModule(i, importedFile)
      }
      else if i.domain.value[0] == 'puck' {
        if puckModules.indexOf(i.path) == -1
          then return reportError(i, 'Invalid puck module ' + i.path)
        let importedFile = context.resolvePath(
          path.join(
            path.dirname(require.resolve('puck-lang/dist/bin/puck'))
            '../../lib/stdlib/' + i.path + '.puck'
          )
          file
        )
        importModule(i, importedFile)
      }
      else if domains.indexOf(i.domain.value[0]) == -1
        then reportError(i, 'Invalid import domain ' + i.domain.value[0])
      ()
    }
  })
}
