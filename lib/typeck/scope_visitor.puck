import 'puck:core' as core
import 'puck:js' as {Object, global, undefined}
import 'node:util' as {inspect}
import '../ast/ast.puck' as {
  Module
  TopLevelStatement
  BlockLevelStatement
  Expression

  EnumDeclaration
  EnumMember
  ImplDeclaration
  ImplShorthandDeclaration
  TraitDeclaration
  TypeDeclaration

  ExportDirective
  ExportedStatement
  ImportDirective
  ObjectDestructure

  Block
  BreakStatement
  ReturnStatement
  WhileLoop

  Identifier
  FunctionDeclaration
  VariableDeclaration

  AssignmentExpression
  BinaryExpression
  CallExpression
  IfExpression
  IfLetExpression
  MatchExpression
  MatchArm
  TypePathExpression
  TypePath
  UnaryExpression

  IndexAccess
  MemberAccess

  BooleanLiteral
  ListLiteral
  NumberLiteral
  RecordLiteral
  StringLiteral
  TupleLiteral

  Pattern
  RecordPattern
  TuplePattern

  TypeBound
  FunctionTypeBound
  NamedTypeBound
  RecordTypeBound
  RecordTypeBoundMember
  TupleTypeBound
  TypeParameter
}
import '../ast/visit.puck' as visit
import '../compiler/ast.ts' as {SyntaxKind}
import 'src/enums.puck' as {checkExhaustive}
import 'src/functions.puck' as {resolveFunctionTypeParameters}
import 'src/impls.puck' as {getImplementation}
import 'src/range.puck' as {checkRange}
import 'src/scope.puck' as {createScope}
import 'src/structure_visitor.puck' as {
  PatternError
  declarePatternVariables
  notAssignableError
  structureVisitor
}
import 'src/types.puck' as {
  createTypeInstance
  findCommonType
  isAssignable
  isSameType
  resolveTypeParameters
}
import '../entities.puck' as {
  Binding
  Function
  Implementation
  Scope
  Struct
  StructKind
  Type
  TypeInstance
  TypeKind
}

fn asType(a) -> Type {a}
fn asIterable<E>(a: List<E>) -> Iterable<E> {a}

export fn ScopeVisitor(context, file) {
  let mut importDirective: ImportDirective
  let mut matchExpression: Option<MatchExpression> = None
  let reportError = context.reportError.bind(context, file)

  fn getBinding(e: Expression) -> Option<Binding> {
    match e {
      Expression::Identifier(i) => {
        let binding = i.scope.getBinding(i.name)
        if binding
          then Some(binding)
          else None
      }
      Expression::IndexAccess(i) => getBinding(i.object)
      Expression::MemberAccess(i) => getBinding(i.object)
      _ => None
    }
  }

  fn checkFunctionCall(functionType: Type, c: CallExpression) {
    if not functionType then return undefined
    let namei: Option<String> =
      match c.func {
        Expression::Identifier(i) => Some(i.name)
        _ => None
      }
    // let iName: Option<String> = if not name.kind
    //   then Some(name)
    //   else name
    let name = namei.unwrapOrElse(|| functionType.displayName())

    let function = match functionType.kind {
      TypeKind::Function(func) => func
      _ => reportError(c, '$name is not callable')
    }

    if let Option::Some(selfBinding) = function.selfBinding {
      if selfBinding.mutable {
        if not getBinding(c.func).mapOr(true, |binding| binding.mutable)
          then reportError(c, '$name can only be called on a mutable binding')
      }
    }

    if let Result::Err(error) = checkRange(c.argumentList, function.parameterRange, 'arguments', name)
      then reportError(c, error)

    let function: Function =
      if let Option::Some(class) = functionType.class {
        let mut parameterMap = ObjectMap.new()

        function.parameters.enumerate().forEach(|(parameter, i): (Binding, Num)| {
          let argument: Expression =
            if i < c.argumentList.length
              then c.argumentList[i]
              else parameter

          if parameter.type_ and argument.getType() {
            if let TypeKind::Parameter = parameter.type_.kind {
              if parameterMap[parameter.type_.name.unwrap()] {
                let existingMapping = parameterMap[parameter.type_.name.unwrap()]
                if not isAssignable(existingMapping, argument.getType()) {
                  if isAssignable(argument.getType(), existingMapping) {
                    parameterMap[parameter.type_.name.unwrap()] = argument.getType()
                  }
                  else reportError(argument, notAssignableError(existingMapping, argument.getType()))
                }
              }
              else {
                parameterMap[parameter.type_.name.unwrap()] = argument.getType()
                ()
              }
            }
          }
        })
        let resolvedFunction: Type = resolveTypeParameters(parameterMap)(functionType)

        // match resolvedFunction.kind {
        //   TypeKind::Function(func) => func
        //   _ => throw 'resolved function is not a function'
        // }
        resolvedFunction.getFunction()
      }
      else function

    c.argumentList.enumerate().forEach(|(argument, i): (Expression, Num)| {
      let parameter = function.parameters[i]
      let parameterName =
        if parameter.pattern
          then if let Pattern::Identifier({name}) = parameter.pattern
            then name
            else '$i'
          else '$i'
      let pType: Type = parameter.type_

      if not isAssignable(parameter.type_, argument.getType())
        then reportError(argument
          notAssignableError(parameter.type_, argument.getType()) +
          ' in parameter $parameterName of function $name'
        )

      if parameter.mutable {
        if let Option::Some(argumentBinding) = getBinding(argument) {
          let argumentName = argumentBinding.name

          if not argumentBinding.mutable {
            reportError(argument
              'Parameter $parameterName of function $name requires a mutable binding ' +
              'but $argumentName is declared as immutable.'
            )
          }
        }
      }
    })

    function
  }

  Object.assign({}, visit.walkingVisitor, structureVisitor, {
    reportError

    visitModule: |mut self, mut m: Module| {
      self.scope = m.scope

      // Hoist function declarations
      m.statements.forEach(|s| match s {
        TopLevelStatement::ExportDirective(
          {statement: ExportedStatement::FunctionDeclaration(f)}
        ) => {
          self.visitFunctionDeclaration(f, true)
        }
        TopLevelStatement::BlockLevelStatement(
          BlockLevelStatement::Expression(Expression::FunctionDeclaration(f))
        ) => {
          self.visitFunctionDeclaration(f, true)
        }
        _ => {}
      })

      m.statements.forEach(|s| {
        self.isUsed = false
        self.visitTopLevelStatement(s)
      })
      // visit.walkModule(self, m)
    }
    visitExpression: |mut self, e: Expression| {
      self.isUsed = true
      visit.walkingVisitor.visitExpression.call(self, e)
    }

    visitImplDeclaration: |self, mut i: ImplDeclaration| {
      i.members.forEach(|f| self.visitFunctionDeclaration(f))
    }
    visitImplShorthandDeclaration: |self, mut i: ImplShorthandDeclaration| {
      i.members.forEach(|f| self.visitFunctionDeclaration(f))
    }
    visitTraitDeclaration: |mut self, mut t: TraitDeclaration| {
      self.scope = t.scope
      visit.walkTraitDeclaration(self, t)
      self.scope = self.scope.parent
    }
    visitTypeDeclaration: |self, mut t: TypeDeclaration| {}

    visitExportDirective: |self, mut e: ExportDirective| {
      visit.walkExportDirective(self, e)
    }
    visitImportDirective: |self, mut i: ImportDirective| {}
    visitObjectDestructure: |self, mut i: ObjectDestructure| {}

    visitBlock: |mut self, mut b: Block, isUsed = true| {
      b.scope = self.scope

      // Hoist function declarations
      b.statements.forEach(|s| match s {
        BlockLevelStatement::Expression(Expression::FunctionDeclaration(f)) => {
          self.visitFunctionDeclaration(f, true)
        }
        _ => {}
      })

      let lastIndex = b.statements.size() - 1
      b.statements.enumerate().forEach(|(s, index)| {
        self.isUsed = isUsed and index == lastIndex
        self.visitBlockLevelStatement(s)
      })

      b.type_ =
        if let Option::Some(last) = b.statements.last()
          then last.getType()
          else Type.empty()
    }
    visitBreak: |self, mut b: BreakStatement| {
      b.scope = self.scope
    }
    visitReturn: |self, mut r: ReturnStatement| {
      r.scope = self.scope
      visit.walkReturn(self, r)
    }
    visitWhileLoop: |mut self, mut e: WhileLoop| {
      self.scope = createScope(context, file, self.scope)
      e.scope = self.scope
      self.visitExpression(e.condition)
      self.visitBlock(e.body, false)
      e.type_ = Type.empty()
      self.scope = self.scope.parent
    }

    visitIdentifier: |self, mut i: Identifier| {
      i.scope = self.scope
      let binding = i.scope.getBinding(i.name)
      if not binding
        then reportError(i, 'Use of undefined variable ' + i.name)
        else i.type_ = binding.type_
      visit.walkIdentifier(self, i)
    }
    visitFunctionDeclaration: |mut self, mut f: FunctionDeclaration, isHoisting = false| {
      structureVisitor.visitFunctionDeclaration.call(self, f)

      if not isHoisting {
        let selfScope = self.scope
        self.scope = f.scope

        f.parameterList.forEach(|p| self.visitVariableDeclaration(p))
        if let Option::Some(body) = f.body {
          self.visitBlock(body)

          if let TypeKind::Function(func) = f.type_.kind {
            if func.returnType {
              if not isAssignable(func.returnType, body.type_)
                then reportError(f, notAssignableError(func.returnType, body.type_) + ' as returnType')
            }
            else {
              Object.assign(func, {
                returnType: body.type_
              })
            }
          }
        }

        self.scope = selfScope
      }
    }
    visitVariableDeclaration: |mut self, mut d: VariableDeclaration, visitInitializer, type_, allowNotExhaustive = false| {
      structureVisitor.visitVariableDeclaration.call(
        self
        d
        if visitInitializer
          then visitInitializer
          else |e| {
            let parentAssignedTo = self.assignedTo
            self.assignedTo = d
            self.isUsed = true
            self.visitExpression(e)
            self.assignedTo = parentAssignedTo
          }
        type_
        allowNotExhaustive
      )
    }

    visitAssignmentExpression: |self, mut e: AssignmentExpression| {
      e.scope = self.scope
      visit.walkAssignmentExpression(self, e)
      if let Option::Some(binding) = getBinding(e.lhs) {
        if not binding.mutable
          then reportError(e, "Can't assign to immutable variable " + binding.name)

        if not isAssignable(e.lhs.getType(), e.rhs.getType())
          then reportError(e, notAssignableError(e.lhs.getType(), e.rhs.getType()))
      }

      e.type_ = e.lhs.getType() or e.rhs.getType()
    }
    visitBinaryExpression: |self, mut e: BinaryExpression| {
      e.scope = self.scope
      visit.walkBinaryExpression(self, e)
    }
    visitCallExpression: |mut self, mut e: CallExpression| {
      e.scope = self.scope
      self.visitExpression(e.func)

      let mut functionType = e.func.getType()

      if let Expression::MemberAccess(access) = e.func {
        if access.object.getType() {
          let name = access.member.name
          let objectType: Type = access.object.getType()

          if let TypeKind::Trait(trait_) = objectType.kind {
            functionType = trait_.functions[name]

            // if not functionType
            //   then reportError(e, objectType.displayName() + ' has no function named $name')

            if functionType {
              let function = functionType.getFunction()

              if function.selfBinding.isSome() {
                e.traitName = objectType.name.unwrap()
                e.isTraitObject =  true
              }
            }
          }
          else if let Option::Some(implementation) = getImplementation(name, objectType, e, reportError) {
            let trait_: Type =
              if let Option::Some(instance) = implementation.trait_.instance
                then instance.class
                else implementation.trait_
            let traitName = trait_.name.unwrap()
            if not e.scope.getTypeBinding(traitName)
              then reportError(e, 'The function $name is defined in trait $traitName but it is not in scope')

            e.traitName = traitName
            e.isShorthand =  trait_.getTrait().isShorthand
            e.implementationType = implementation.type_

            functionType = asType(implementation.trait_).getTrait().functions[name]
          }

          if let Option::Some(instance) = objectType.instance {
            functionType = resolveTypeParameters(instance.parameterMap)(functionType)
          }
        }
      }

      if functionType and functionType.isFunction() {
        let callTypeParameters = functionType.class.map(|class| class.typeParameters).unwrapOr([])
        let mut callParameterMap = ObjectMap.new()
        let parentAssignedTo = self.assignedTo
        e.argumentList.enumerate().forEach(|(a, i): (Expression, Num)| {
          self.assignedTo = functionType.getFunction().parameters[i]
          self.visitExpression(a)
          if callTypeParameters.isNotEmpty() and functionType.getFunction().parameters[i].type_ and a.getType() {
            resolveFunctionTypeParameters(
              callParameterMap
              callTypeParameters
              functionType.getFunction().parameters[i].type_
              a.getType()
            )
          }
        })
        if callTypeParameters.isNotEmpty() {
          functionType = resolveTypeParameters(callParameterMap)(functionType)
        }
        self.assignedTo = parentAssignedTo
      } else {
        e.argumentList.forEach(|a| self.visitExpression(a))
      }
      if functionType {
        e.functionType = functionType
        let function = checkFunctionCall(functionType, e)
        e.type_ = function.returnType
      }
    }
    visitIfExpression: |mut self, mut e: IfExpression| {
      self.scope = createScope(context, file, self.scope)
      e.scope = self.scope
      let isUsed = self.isUsed
      self.visitExpression(e.condition)
      self.visitBlock(e.then_, isUsed)
      if let Option::Some(else_) = e.else_ then self.visitBlock(else_, isUsed)
      if isUsed {
        e.type_ =
          if let Option::Some(else_) = e.else_ {
            let result: Result<Type, ()> = findCommonType([e.then_.type_, else_.type_])
            match result {
              Result::Ok(type_) => type_
              Result::Err(_) => reportError(e
                'Type ' + e.then_.type_.displayName() + ' and ' + asType(else_.type_).displayName() + ' is not compatible'
              )
            }
          }
          else {{
            displayName: None
            name: None
            kind: TypeKind::Struct({
              implementations: []
              kind: StructKind::Tuple({properties: []})
            })
            class: None
            instance: None
          }}
      }
      self.scope = self.scope.parent
    }
    visitIfLetExpression: |mut self, mut e: IfLetExpression| {
      self.scope = createScope(context, file, self.scope)
      e.scope = self.scope
      let isUsed = self.isUsed
      self.visitPattern(e.pattern)
      self.visitExpression(e.expression)
      let result: Result<(), ()> = declarePatternVariables(e.scope, self, e.pattern, false, e.expression.getType(), true)
      match result {
        Result::Ok(patternTy) => {
          if not isAssignable(e.expression.getType(), patternTy)
            then self.reportError(e.expression, notAssignableError(patternTy, e.expression.getType()))
        }
        Result::Err(PatternError::PatternMismatch(pattern, to, subject)) => {
          self.reportError(e.expression, notAssignableError(to, subject))
        }
        _ => {}
      }
      self.visitBlock(e.then_, isUsed)
      if let Option::Some(else_) = e.else_ then self.visitBlock(else_, isUsed)
      if isUsed {
        e.type_ =
          if let Option::Some(else_) = e.else_ {
            let result: Result<Type, ()> = findCommonType([e.then_.type_, else_.type_])
            match result {
              Result::Ok(type_) => type_
              Result::Err(_) => reportError(e
                'Type ' + e.then_.type_.displayName() + ' and ' + asType(else_.type_).displayName() + ' is not compatible'
              )
            }
          }
          else {{
            displayName: None
            name: None
            kind: TypeKind::Struct({
              implementations: []
              kind: StructKind::Tuple({properties: []})
            })
            class: None
            instance: None
          }}
      }
      self.scope = self.scope.parent
    }
    visitMatchExpression: |mut self, mut e: MatchExpression| {
      e.scope = self.scope
      let oldMatchExpression = matchExpression
      matchExpression = Some(e)

      let isUsed = self.isUsed

      self.visitExpression(e.expression)

      e.patterns.forEach(|a| self.visitMatchArm(a, isUsed))

      if let Result::Err(error) = checkExhaustive(e) {
        self.reportError(e, error)
      }
      if isUsed {
        e.type_ =
          if e.patterns.isNotEmpty() {
            let result: Result<Type, ()> = findCommonType(e.patterns.map(|arm| arm.type_).toList())
            match result {
              Result::Ok(type_) => type_
              Result::Err(_) => reportError(e, 'Match arms return mixed types ' + e.patterns.map(|arm| asType(arm.type_).displayName()).join(', '))
            }
          }
          else {{
            displayName: None
            name: None
            kind: TypeKind::Struct({
              implementations: []
              kind: StructKind::Tuple({properties: []})
            })
            class: None
            instance: None
          }}
      }

      matchExpression = oldMatchExpression
    }
    visitMatchArm: |mut self, mut a: MatchArm, isUsed| {
      self.scope = createScope(context, file, self.scope)
      a.scope = self.scope

      let m = matchExpression.unwrap()

      let result: Result<(), ()> = declarePatternVariables(a.scope, self, a.pattern, false, m.expression.getType(), true)
      match result {
        Result::Ok(patternTy) => {
          if not isAssignable(m.expression.getType(), patternTy)
            then self.reportError(a, notAssignableError(m.expression.getType(), patternTy))
        }
        Result::Err(PatternError::PatternMismatch(pattern, to, subject)) => {
          self.reportError(a, notAssignableError(to, subject))
        }
        _ => {}
      }

      self.visitBlock(a.block, isUsed)
      a.type_ = a.block.type_

      self.scope = self.scope.parent
    }
    visitTypePathExpression: |self, mut e: TypePathExpression| {
      e.scope = self.scope
      let typePath = e.typePath
      if typePath.kind == '_Object' {
        let binding = e.scope.getTypeBinding(typePath.value[0].name)
        if not binding
          then self.reportError(e, 'Use of undeclared type ' + typePath.value[0].name)
        let type_: Type = binding.type_

        if typePath.value[1].kind != 'Member'
          then self.reportError(e, 'Nested type paths are not supported')

        if let TypeKind::Enum(enum_) = type_.kind {
          let memberIdentifier = typePath.value[1].value[0]
          let member: Type = enum_.members[memberIdentifier.name]
          if not member {
            reportError(memberIdentifier, type_.displayName() + ' has no member named ' + memberIdentifier.name)
          }
          else match member.kind {
            TypeKind::Struct(struct) => match struct.kind {
              StructKind::Record(record) => {
                e.type_ = {
                  displayName: type_.name.map(|name| name + '::' + memberIdentifier.name)
                  name: type_.name
                  kind: TypeKind::Function({
                    selfBinding: None
                    parameters: [{
                      name: memberIdentifier.name
                      token: memberIdentifier
                      mutable: false
                      type_: member
                      redefined: false
                    }]
                    parameterRange: {start: 1, end: 2}
                    returnType:
                      if let Option::Some(class) = type_.class
                        then createTypeInstance(type_, asIterable(class.typeParameters))
                        else type_
                    isAbstract: false
                  })
                  class: type_.class.map(|class| Object.assign({}, class, {instances: []}))
                  instance: type_.instance
                }
              }

              StructKind::Tuple(tuple) => {
                e.type_ = {
                  displayName: type_.name.map(|name| name + '::' + memberIdentifier.name)
                  name: type_.name
                  kind: TypeKind::Function({
                    selfBinding: None
                    parameters: tuple.properties.enumerate().map(|(p, i)| {{
                      name: i.toString()
                      token: memberIdentifier
                      mutable: false
                      type_: p
                      redefined: false
                    }}).toList()
                    parameterRange: {start: tuple.properties.length, end: tuple.properties.length + 1}
                    returnType:
                      if let Option::Some(class) = type_.class
                        then createTypeInstance(type_, asIterable(class.typeParameters))
                        else type_
                    isAbstract: false
                  })
                  class: type_.class.map(|class| Object.assign({}, class, {instances: []}))
                  instance: type_.instance
                }
              }

              StructKind::Unit => {
                e.type_ = {
                  displayName: type_.name.map(|name| name + '::' + memberIdentifier.name)
                  name: type_.name
                  kind: type_.kind
                  class: type_.class
                  instance: type_.instance
                }
              }
            }
            _ => {
              throw 'enum arm is not a struct'
            }
          }
        }
      }
    }
    visitUnaryExpression: |self, mut e: UnaryExpression| {
      e.scope = self.scope
      visit.walkUnaryExpression(self, e)

      e.type_ =
        if e.operator.kind == SyntaxKind.NotKeyword
          then e.scope.getTypeBinding('Bool').type_
        else if e.operator.kind == SyntaxKind.MinusToken
             or e.operator.kind == SyntaxKind.PlusToken
          then e.scope.getTypeBinding('Num').type_
    }

    visitIndexAccess: |self, mut a: IndexAccess| {
      a.scope = self.scope
      visit.walkIndexAccess(self, a)
    }
    visitMemberAccess: |self, mut a: MemberAccess| {
      a.scope = self.scope
      visit.walkExpression(self, a.object)
      if a.object.getType() {
        if let TypeKind::Struct({kind: StructKind::Record(record)}) = a.object.getType().kind {
          a.type_ = record.properties[a.member.name]
        } else {
          // TODO: Enable this check when possible
          // reportError(a, 'can not read a property on an enum type')
        }
      }
    }

    visitBooleanLiteral: |self, mut l: BooleanLiteral| {
      l.scope = self.scope
      l.type_ = self.scope.getTypeBinding('Bool').type_
      visit.walkBooleanLiteral(self, l)
    }
    visitListLiteral: |self, mut l: ListLiteral| {
      l.scope = self.scope
      visit.walkListLiteral(self, l)
      if l.members.length >= 1 {
        let types = l.members.map(|m| m.getType()).toList()
        let result: Result<Type, ()> = findCommonType(types)
        match result {
          Result::Ok(type_) => {
            if not type_ {
              l.type_ = self.scope.getTypeBinding('List').type_
            } else {
              l.type_ = createTypeInstance(self.scope.getTypeBinding('List').type_, asIterable([type_]))
            }
          }
          Result::Err(_) => reportError(l, 'List contains mixed types')
        }
      }
      else {
        l.type_ = self.scope.getTypeBinding('List').type_
      }
    }
    visitNumberLiteral: |self, mut l: NumberLiteral| {
      l.scope = self.scope
      l.type_ = self.scope.getTypeBinding('Num').type_
      visit.walkNumberLiteral(self, l)
    }
    visitRecordLiteral: |self, mut l: RecordLiteral| {
      l.scope = self.scope
      l.members.forEach(|m| {
        self.visitExpression(m.value)
      })
      l.type_ = {
        displayName: None
        name: None
        kind: TypeKind::Struct({
          implementations: []
          kind: StructKind::Record({
            properties: ObjectMap.fromIter(l.members.map(|m| {
              (m.name.name, m.value.getType())
            }))
          })
        })
        class: None
        instance: None
      }
    }
    visitStringLiteral: |self, mut l: StringLiteral| {
      l.scope = self.scope
      l.type_ = self.scope.getTypeBinding('String').type_
      visit.walkStringLiteral(self, l)
    }
    visitTupleLiteral: |self, mut l: TupleLiteral| {
      l.scope = self.scope
      visit.walkTupleLiteral(self, l)
      l.type_ = {
        displayName: None
        name: None
        kind: TypeKind::Struct({
          implementations: []
          kind: StructKind::Tuple({
            properties: l.expressions.map(|e| e.getType()).toList()
          })
        })
        class: None
        instance: None
      }
    }

    visitPattern: |self, mut p: Pattern| {
      p.scope = self.scope
      visit.walkPattern(self, p)
      p.type_ =
        match p {
          Pattern::CatchAll => undefined
          Pattern::Identifier(identifier) => undefined
          Pattern::Record(record) => record.type_
          Pattern::RecordType(typePath, record) => typePath.type_
          Pattern::Tuple(tuple) => tuple.type_
          Pattern::TupleType(typePath, tuple) => typePath.type_
          Pattern::UnitType => Type.empty()
        }
    }

    visitRecordPattern: |self, mut p: RecordPattern| {
      p.scope = self.scope
      visit.walkRecordPattern(self, p)
      p.type_ = {
        displayName: None
        name: None
        kind: TypeKind::Struct({
          implementations: []
          kind: StructKind::Record({properties: ObjectMap.fromIter(
            p.properties.map(|p| (p.property, p.local and p.local.type_))
          )})
        })
        instance: None
        class: None
      }
    }
    visitTuplePattern: |self, mut p: TuplePattern| {
      p.scope = self.scope
      visit.walkTuplePattern(self, p)
      p.type_ = {
        displayName: None
        name: None
        kind: TypeKind::Struct({
          implementations: []
          kind: StructKind::Tuple({properties: p.properties.map(|p| p.type_).toList()})
        })
        instance: None
        class: None
      }
    }
  })
}
