import 'puck:js' as {undefined}
import '../../ast/ast.puck' as {Pattern, TypePath}
import '../../ast/span.puck' as {ToSpan}
import '../../entities.puck' as {Definition, RecordMember, StructKind, Type, TypeKind}
import '../scope_visitor.puck' as {ScopeVisitor}
import 'scope.puck' as {Scope}
import 'types.puck' as {isAssignable}
import 'core_type_helpers.puck' as {getRecordPropType, wrapInOption}

export enum PatternError {
  ScopeError(ToSpan, String)
  PatternMismatch(Pattern, Type, Type)
  NotExhaustive
}

fn getValueType(typePath: TypePath, type_: Type) -> Result<Type, (Type, Type)> {
  let typePathType: Type = typePath->type_.transmute()
  let typePathProvidesType: Type = typePathType.providesType.unwrapOr(typePathType)
  let structType: Type =
    if type_ {
      if let Option::Some((member, typePathEnum)) = typePathType.enumMember {
        match type_.kind {
          TypeKind::Enum(_) => {}
          TypeKind::Parameter => {}
          _ => return Err((typePathEnum, type_))
        }
      }
      type_
    }
    else typePathProvidesType

  match structType.kind {
    TypeKind::Enum(enum_) => {
      if let Option::Some((member, typePathEnum)) = typePathType.enumMember {
        if isAssignable(typePathEnum, type_)
          then Ok(enum_.members.get(member).unwrap())
          else return Err((typePathEnum, type_))
      }
      else return Err((typePathProvidesType, type_))
    }
    _ => Ok(structType)
  }
}

fn isNonExhaustive(typePath: TypePath) -> Bool {
  let typePathType: Type = typePath->type_.transmute()
  let typePathType: Type = typePathType.enumMember
    .map(|(_, enum_)| enum_)
    .orElse(|| typePathType.providesType)
    .unwrapOr(typePathType)

  if let TypeKind::Enum(enum_) = typePathType.kind {
    if enum_.members.size() > 1
      then return true
  }
  false
}

export fn declarePatternVariables(mut scope: Scope, visitor: ScopeVisitor, mut p: Pattern, type_: Type, allowNotExhaustive: Bool, useParentScope = false, mut definitions: ObjectMap<Bool> = ObjectMap.new()) ->
    Result<(), PatternError> {
  match p {
    Pattern::CatchAll => Ok(())
    Pattern::Identifier {identifier, mutable} => {
      if definitions.has(identifier.name) {
        return Err(PatternError::ScopeError(
          identifier
          '"' ++ identifier.name ++ '" is already defined in this pattern'
        ))
      }
      else {
        definitions[identifier.name] = true
      }
      match scope.define({
        definition: Definition({file: visitor.file, token: p})
        name: identifier.name
        mutable
        allowRedeclare: true
        type_
        completeType: None
        previous: None
      }, useParentScope) {
        Result::Ok(binding) => {
          p->binding = binding
          Ok(())
        }
        Result::Err(err) => Err(PatternError::ScopeError(identifier, err))
      }
    }
    Pattern::Record(record) => {
      let props =
        if type_
          then match type_.kind {
            TypeKind::Struct(struct) => match struct.kind {
              StructKind::Record(record) => record.properties
              _ => return Err(PatternError::PatternMismatch(p, p->type_.transmute(), type_))
            }
            TypeKind::Parameter => {{}}
            _ => return Err(PatternError::PatternMismatch(p, p->type_.transmute(), type_))
          }
          else ObjectMap.new()

      let mut b = record.properties
        .iter()
        .map(|mut p| {
          let type_ =
            match props.get(p.property.name).mapOr(Ok(undefined), getRecordPropType(scope)) {
              Ok(type_) => type_
              Err(err) => return (p.property.name, Err(PatternError::ScopeError(p.pattern, err)))
            }

          (
            p.property.name
            declarePatternVariables(
              scope
              visitor
              p.pattern
              type_
              allowNotExhaustive
              useParentScope
              definitions
            )
          )
        })
      b
        .fold(Ok(()), |acc: Result<(), PatternError>, (name, type_)| acc.andThen(|_| type_))
    }
    Pattern::RecordType(typePath, record) => {
      let recordType =
        match getValueType(typePath, type_) {
          Result::Ok(type_) => type_
          Result::Err((to, subject)) => return Err(PatternError::PatternMismatch(p, to, subject))
        }

      let props =
        match recordType.kind {
          TypeKind::Struct(struct) => match struct.kind {
            StructKind::Record(record) => record.properties
            _ => return Err(PatternError::PatternMismatch(p, p->type_.transmute(), recordType))
          }
          TypeKind::Parameter => {{}}
          _ => return Err(PatternError::PatternMismatch(p, p->type_.transmute(), recordType))
        }

      if not allowNotExhaustive and isNonExhaustive(typePath)
        then return Err(PatternError::NotExhaustive)

      let mut a = record.properties
        .toList()
        .iter()
        .map(|mut p| {
          let type_ =
            match props.get(p.property.name).mapOr(Ok(undefined), getRecordPropType(scope)) {
              Ok(type_) => type_
              Err(err) => return (p.property.name, Err(PatternError::ScopeError(p.pattern, err)))
            }

          (
            p.property.name
            declarePatternVariables(
              scope
              visitor
              p.pattern
              type_
              allowNotExhaustive
              useParentScope
              definitions
            )
          )
        })

      a.fold(Ok(()), |acc: Result<(), PatternError>, (name, type_)| acc.andThen(|_| type_))
    }
    Pattern::Tuple(tuple) => {
      let props =
        if type_
          then match type_.kind {
            TypeKind::Struct(struct) => match struct.kind {
              StructKind::Tuple(tuple) => tuple.properties
              _ => return Err(PatternError::PatternMismatch(p, p->type_.transmute(), type_))
            }
            TypeKind::Parameter => []
            _ => return Err(PatternError::PatternMismatch(p, p->type_.transmute(), type_))
          }
          else []

      tuple.properties
        .iter()
        .enumerate()
        .map(|(i, mut p)| declarePatternVariables(
          scope
          visitor
          p
          props.get(i).unwrapOr(undefined)
          allowNotExhaustive
          useParentScope
          definitions
        ))
        .fold(Ok(()), |acc, cur| acc.andThen(|_| cur))
    }
    Pattern::TupleType(typePath, tuple) => {
      let tupleType =
        match getValueType(typePath, type_) {
          Result::Ok(type_) => type_
          Result::Err((to, subject)) => return Err(PatternError::PatternMismatch(p, to, subject))
        }

      let props =
        match tupleType.kind {
          TypeKind::Struct(struct) => match struct.kind {
            StructKind::Tuple(tuple) => tuple.properties
            _ => return Err(PatternError::PatternMismatch(p, p->type_.transmute(), tupleType))
          }
          TypeKind::Parameter => []
          _ => return Err(PatternError::PatternMismatch(p, p->type_.transmute(), tupleType))
        }

      if not allowNotExhaustive and isNonExhaustive(typePath)
        then return Err(PatternError::NotExhaustive)

      tuple.properties
        .iter()
        .enumerate()
        .map(|(i, mut p)| declarePatternVariables(
          scope
          visitor
          p
          props.get(i).unwrapOr(undefined)
          allowNotExhaustive
          useParentScope
          definitions
        ))
        .fold(Ok(()), |acc, cur| acc.andThen(|_| cur))
    }
    Pattern::UnitType(typePath) => {
      if not allowNotExhaustive and isNonExhaustive(typePath)
        then return Err(PatternError::NotExhaustive)

      Ok(())
    }
  }
}
