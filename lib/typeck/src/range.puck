export fn getRange<T>(parameters: List<T>, isOptional: (T) -> Bool, reportError, name: String) -> Range {
  let mut firstOptional = parameters.size()
  let mut hasOptional = false

  parameters.enumerate().forEach(|(i, parameter)|
    if isOptional(parameter) and not hasOptional {
      hasOptional = true
      firstOptional = i
      ()
    }
    else if not isOptional(parameter) and hasOptional {
      reportError(parameter
        "An optional $name can't be followed by a required $name"
      )
    }
  )

  {
    start: firstOptional
    end: parameters.size() + 1
  }
}

export fn checkRange<T>(arguments: List<T>, range: Range, argumentName: String, subjectName: String) -> Result<(), String> {
  let argumentCount = arguments.size()
  let max = range.end - 1
  let min = range.start
  let error =
    if argumentCount < min
      then Err('few')
    else if argumentCount > max
      then Err('many')
    else Ok(())

  error.mapErr(|error| {
    let required =
      if min == max
        then '$min'
        else '$min to $max'

    'Too $error $argumentName given to $subjectName, $required required, $argumentCount given'
  })
}
