import 'puck:js' as {Error}
import '../../ast/ast.puck' as {
  Expression
  TypePath
  Pattern
  MatchExpression
}
import '../../entities.puck' as {Enum, Type, TypeKind}
import 'scope.puck' as {Scope}

fn isIndividuallyExhaustive(p: Pattern) {
  match p {
    Pattern::CatchAll => true
    Pattern::Identifier => true
    Pattern::Record(record) => record.properties.all(|p| isIndividuallyExhaustive(p.pattern))
    Pattern::RecordType(_, record) => record.properties.all(|p| isIndividuallyExhaustive(p.pattern))
    Pattern::Tuple(tuple) => tuple.properties.all(isIndividuallyExhaustive)
    Pattern::TupleType(_, tuple) => tuple.properties.all(isIndividuallyExhaustive)
    Pattern::UnitType(_) => true
  }
}

export fn getEnumType(typePath: TypePath, scope: Scope) -> Option<Type> {
  match typePath {
    TypePath::Member(_) => None
    TypePath::Object({name}, _) => {
      scope
        .getBinding(name)
        .andThen(|binding| binding.type_.providesType)
        .andThen(|type_| {
          if type_.isEnum()
            then Some(type_)
            else None
        })
    }
  }
}

export fn getEnumMember(typePath: TypePath) {
  let typePathType: Type = typePath->type_.transmute()

  if typePathType {
    let (member, _) = typePathType.enumMember.unwrap()

    Some(member)
  }
  else None
}

fn isEnumPattern(p: Pattern) {
  match p {
    Pattern::CatchAll => false
    Pattern::Identifier => false
    Pattern::Record(record) => false
    Pattern::RecordType(_, record) => true
    Pattern::Tuple(tuple) => false
    Pattern::TupleType(_, tuple) => true
    Pattern::UnitType(_) => true
  }
}

fn isEnumArm(p: Pattern) {
  match p {
    Pattern::CatchAll => false
    Pattern::Identifier => false
    Pattern::Record(record) => false
    Pattern::RecordType(_, record) => record.properties.any(|p| isEnumPattern(p.pattern))
    Pattern::Tuple(tuple) => false
    Pattern::TupleType(_, tuple) => tuple.properties.any(isEnumPattern)
    Pattern::UnitType(_) => false
  }
}

export fn checkExhaustive(e: MatchExpression) -> Result<(), String> {
  if let TypeKind::Enum(enum_) = e.expression.getType().kind {
    checkExhaustiveEnum(e.patterns.map(|a| a.pattern), e.expression.getType(), enum_, e->scope.transmute())
  }
  else Ok(())
}

fn getSubPatterns(pattern: Pattern) -> List<Pattern> {
  match pattern {
    Pattern::RecordType(_, record) => record.properties.map(|p| p.pattern).toList()
    Pattern::TupleType(_, tuple) => tuple.properties
    _ => []
  }
}

fn checkExhaustiveEnum(patterns: Iterable<Pattern>, type_: Type, enum_: Enum, scope: Scope) -> Result<(), String> {
  let typeName = type_.displayName()
  let mut exhaustiveMap: ObjectMap<Bool> = ObjectMap.new()
  let mut enumArmsMap: ObjectMap<List<Pattern>> = ObjectMap.new()

  if let Option::Some(_) = patterns.find(|pattern| {
    let member = match pattern {
      Pattern::CatchAll => return true
      Pattern::Identifier => return true
      Pattern::Record(_) => throw 'Invalid pattern'
      Pattern::RecordType(typePath, _) => getEnumMember(typePath)
      Pattern::Tuple(_) => throw 'Invalid pattern'
      Pattern::TupleType(typePath, _) => getEnumMember(typePath)
      Pattern::UnitType(typePath) => getEnumMember(typePath)
    }

    if let Some(member) = member {
      if not exhaustiveMap.get(member).unwrapOr(false) {
        let individuallyExhaustive = isIndividuallyExhaustive(pattern)
        let isEnum = isEnumArm(pattern)

        exhaustiveMap[member] = individuallyExhaustive and not isEnum

        if isEnum {
          if not enumArmsMap.has(member) {
            enumArmsMap[member] = []
          }
          enumArmsMap[member].push(pattern)
        }
      }
    }

    false
  })
    then return Ok(())

  let mut innerErrors = []
  enumArmsMap.forEach(|(member, patterns)| {
    let enumPatterns = getSubPatterns(patterns[0])
      .enumerate()
      .filter(|(_, pattern)| isEnumPattern(pattern))
      .map(|(index, pattern)| {
        let type_ = match pattern {
          Pattern::RecordType(typePath, _) => getEnumType(typePath, scope)
          Pattern::TupleType(typePath, _) => getEnumType(typePath, scope)
          Pattern::UnitType(typePath) => getEnumType(typePath, scope)
          _ => throw 'Invalid pattern'
        }
        let enum_ =
          if let Option::Some(type_) = type_
            then type_.getEnum()
            else throw 'no type'

        let subPatterns = patterns
          .map(getSubPatterns)
          .map(|subPatterns| subPatterns[index])
          .toList()

        (type_.unwrap(), enum_, subPatterns)
      })

    let errors = enumPatterns
      .map(|(type_, enum_, subPatterns)| checkExhaustiveEnum(subPatterns, type_, enum_, scope))
      .filter(|result| result.isErr())
      .toList()

    innerErrors = innerErrors->concat(errors).transmute()

    exhaustiveMap[member] = errors.size() == 0
  })

  if (innerErrors.size() > 0) {
    return innerErrors[0]
  }

  let mapSize = exhaustiveMap.size()
  let memberCount = enum_.members.size()

  if mapSize == memberCount - 1 {
    let (mut missing, _) = enum_.members.find(|(member, _)| not exhaustiveMap.get(member).unwrapOr(false)).unwrap()
    Err('Match is not exhaustive. It is missing a case for $typeName::$missing')
  }
  else if mapSize < memberCount
    then Err('Match is not exhaustive.')
  else if let Option::Some((member, a)) = exhaustiveMap.find(|(_, exhaustive)| not exhaustive)
    then Err('Match is not exhaustive. $typeName::$member is not exhaustive. $a')
  else Ok(())
}
