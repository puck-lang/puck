import 'puck:js' as {Error, Object, null, undefined}
import 'node:util' as {inspect}
import '../../ast/ast.puck' as {Module, Identifier, TypePath}
import '../../ast/span.puck' as {Span, ToSpan}
import '../../compiler.puck' as {CompilerContext}
import '../../compiler/ast.ts' as {SyntaxKind}
import '../../entities.puck' as {Definition, StructKind, Type, TypeKind}

export type Binding {
  definition: Definition
  name: String
  mutable: Bool
  allowRedeclare: Bool
  type_: Type
  previous: Option<Binding>
  completeType: Option<(String) -> Option<Type>>
}

export type Scope {
  context: CompilerContext
  parent: Option<Scope>
  bindings: ObjectMap<Binding>
  bindingsByTypeId: ObjectMap<Binding>
}

export enum ScopeError {
  UndefinedType(String)
  Other(String)
}

impl Scope {
  fn new(context) -> Scope {{
    context
    parent: None
    bindings: ObjectMap.new()
    bindingsByTypeId: ObjectMap.new()
  }}

  fn createChild(self) -> Scope {{
    context: self.context
    parent: Some(self)
    bindings: ObjectMap.new()
    bindingsByTypeId: ObjectMap.new()
  }}

  fn getBindings(self) -> ObjectMap<Binding> {
    if let Some(parent) = self.parent
      then Object->assign({}, parent.getBindings(), self.bindings).transmute()
      else self.bindings
  }

  fn getBinding(self, name: String, visitor = '') -> Option<Binding> {
    self.bindings
      .get(name)
      .orElse(|| self.parent.andThen(|p| p.getBinding(name, visitor)))
      .map(|mut binding| {
        if let Some(completeType) = binding.completeType {
          if let Some(type_) = completeType(visitor) {
            if not binding.type_ and type_ {
              if let Some({id: Some(id)}) = type_.providesType {
                self.bindingsByTypeId->[id] = binding
              }
            }
            binding.type_ = type_
          }
        }
        binding
      })
  }

  fn getBindingByTypeId(self, id: String) -> Option<Binding> {
    self.bindingsByTypeId
      .get(id)
      .orElse(|| self.parent.andThen(|p| p.getBindingByTypeId(id)))
      .map(|mut binding| {
        if let Some(completeType) = binding.completeType {
          if let Some(type_) = completeType('') {
            binding.type_ = type_
          }
        }
        binding
      })
  }

  fn define(mut self, binding: Binding, useParentScope = false) -> Result<Binding, String> {
    if binding.name == 'Self'
      then return Err('Self is a reserved name')

    let previous =
      match self.bindings.get(binding.name) {
        Option::Some(previous) => {
          if previous.allowRedeclare
            then Some(previous)
            else return Err(binding.name + ' is already defined')
        }
        Option::None => {
          if useParentScope {
            if let Some(previous) = self.parent.andThen(|p| p.bindings.get(binding.name)) {
              if previous.allowRedeclare
                then Some(previous)
                else return Err(binding.name + ' is already defined')
            }
            else None
          }
          else None
        }
      }

    let binding: Binding = {
      definition: binding.definition
      name: binding.name
      mutable: binding.mutable
      allowRedeclare: binding.allowRedeclare
      type_: binding.type_
      completeType: binding.completeType
      previous
    }

    self.bindings.set(binding.name, binding)
    if binding.type_ {
      if let Some({id: Some(id)}) = binding.type_.providesType {
        self.bindingsByTypeId.set(id, binding)
      }
    }
    Ok(binding)
  }

  fn setSelfType(mut self, mut selfType: Type) -> () {
    self.bindings.set('Self', {
      definition: selfType.definition
      name: 'Self'
      mutable: false
      allowRedeclare: false
      type_: Type.provides(selfType)
      previous: None
      completeType: None
    })
  }

  fn getTypePath(self, typePath: TypePath, visitor = '') -> Result<Binding, ScopeError> {
    match typePath {
      TypePath::Member(identifier) => {
        if let Some(binding) = self.getBinding(identifier.name, visitor) {
          identifier->binding = binding
          Ok(binding)
        }
        else Err(ScopeError::UndefinedType(identifier.name))
      }
      TypePath::Object(identifier, path) => {
        let mut token: ToSpan = identifier
        let mut name = identifier.name
        let mut path_ = path
        let binding =
          match self.getBinding(name, visitor) {
            Option::Some(binding) => binding
            Option::None => return Err(ScopeError::UndefinedType(name))
          }
        identifier->binding = binding
        let mut type_: Type = binding.type_

        while true {
          let mut displayPath = '$name'
          let providesType = type_.providesType.unwrapOr(type_)
          match path_ {
            TypePath::Member(identifier) => {
              token = identifier
              name = identifier.name
              type_ =
                match getTypeMember(providesType, displayPath, name) {
                  Ok(type_) => type_
                  Err(err) => return Err(ScopeError::Other(err))
                }
              break
            }
            TypePath::Object(identifier, path) => {
              token = identifier
              name = identifier.name
              path_ = path
              type_ =
                match getTypeMember(providesType, displayPath, name) {
                  Ok(type_) => type_
                  Err(err) => return Err(ScopeError::Other(err))
                }
              displayPath = '$displayPath::$name'
            }
          }
        }

        Ok(Binding({
          definition: type_.definition
          name
          mutable: binding.mutable
          allowRedeclare: binding.allowRedeclare
          type_
          previous: binding.previous
          completeType: binding.completeType
        }))
      }
    }
  }

  fn merge(mut self, other: Scope) -> () {
    Object->assign(self.bindings, other.bindings)
  }
}

fn getTypeMember(type_: Type, displayPath: String, member: String) -> Result<Type, String> {
  match type_.kind {
    TypeKind::Enum(enum_) => match enum_.members.get(member) {
      Option::Some(memberType) => Ok(memberType)
      Option::None => Err('Use of undeclared type $displayPath::$member')
    }
    TypeKind::Struct(struct) => match struct.kind {
      StructKind::Record(record) => match record.properties.get(member) {
        Option::Some(propertyType) => Ok(propertyType)
        Option::None => Err('Use of undeclared type $displayPath::$member')
      }
      StructKind::Tuple => Err('Can not access members on a tuple type')
      StructKind::Unit => Err('Can not access members on a unit type')
    }
    _ => Err('Type paths can only access enums or records')
  }
}
