import 'puck:js' as {Object}
import '../../ast/ast.puck' as {Identifier}
import '../../ast/span.puck' as {Span}
import '../../entities.puck' as {StructKind, Type, TypeKind}
import 'scope.puck' as {Binding}
import 'types.puck' as {createTypeInstance}

export fn enumMemberToFunction(mut type_: Type) -> Type {
  let displayName =
    if let Option::Some((member, enum_)) = type_.enumMember
      then enum_.name.map(|name| '$name::$member')
      else type_.displayName

  let mut providedType = type_.enumMember
    .map(|(_, enum_)| enum_)
    .orValue(type_.providesType)
    .unwrapOr(type_)
  let mut returnType: Type =
    if let Option::Some(class) = providedType.class
      then createTypeInstance(providedType, class.typeParameters)
      else providedType

  let kind =
    match type_.providesType.unwrapOr(type_).kind {
      TypeKind::Struct(struct) => match struct.kind {
        StructKind::Record(record) => {
          TypeKind::Function({
            selfBinding: None
            parameters: [{
              definition: type_.definition
              name: type_.name.unwrapOr('0')
              mutable: false
              allowRedeclare: false
              type_: type_.providesType.unwrapOr(type_)
              completeType: None
              previous: None
            }]
            parameterRange: {start: 1, end: 2}
            returnType
            isAbstract: false
          })
        }

        StructKind::Tuple(tuple) => {
          TypeKind::Function({
            selfBinding: None
            parameters: tuple.properties.enumerate().map(|(i, p)| Binding({
              definition: p.definition
              name: '$i'
              mutable: false
              allowRedeclare: false
              type_: p
              completeType: None
              previous: None
            })).toList()
            parameterRange: {start: tuple.properties.size(), end: tuple.properties.size() + 1}
            returnType
            isAbstract: false
          })
        }

        StructKind::Unit => return Type({
          definition: returnType.definition
          id: returnType.id
          displayName
          name: returnType.name
          kind: returnType.kind
          class: returnType.class
          instance: returnType.instance
          providesType: returnType.providesType
          enumMember: returnType.enumMember
        })
      }
      _ => {
        TypeKind::Struct({
          implementations: []
          kind: StructKind::Tuple({properties: []})
        })
      }
    }

  {
    definition: returnType.definition
    id: providedType.id
    displayName
    name: type_.name
    kind
    class: providedType.class.map(|class| Object->assign({}, class, {instances: []}).transmute())
    instance: providedType.instance
    providesType: type_.providesType.orValue(Some(type_))
    enumMember: type_.enumMember
  }
}
