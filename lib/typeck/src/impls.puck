import 'puck:js' as {global}
import 'node:util' as {inspect}
import '../../ast/ast.puck' as {
  Expression

  Block
  FunctionDeclaration
  Identifier
  ObjectDestructure
  TypeBound
  FunctionTypeBound
  NamedTypeBound
  TypeParameter
  TypePath
  VariableDeclaration

  CallExpression
}
import '../../ast/span.puck' as {ToSpan}
import '../../entities.puck' as {
  Implementation
  Trait
  Type
  TypeInstance
  TypeKind
}
import 'functions.puck' as {checkFunctionCall}
import 'scope.puck' as {Scope}
import 'types.puck' as {findCommonType, isAssignable, resolveTypeParameters}

fn getParameterMap(objectInstance: TypeInstance, implementation: Implementation) -> ObjectMap<Type> {
  let mut parameterMap: ObjectMap<Type> = ObjectMap.new()

  implementation.typeParameters.forEach(|implementationParameter| {
    let objectParameter =
      findTypeParameterName(objectInstance, implementationParameter, implementation)
        .andThen(|p| objectInstance.parameterMap.get(p))

    if let Some(objectParameter) = objectParameter {
      parameterMap.set(implementationParameter.name.unwrap(), objectParameter)
    }
  })

  parameterMap
}

fn findTypeParameterName(objectInstance: TypeInstance, parameter: Type, implementation: Implementation) -> Option<String> {
  implementation.type_.instance
    .andThen(|i| {
      i.typeParameters
        .enumerate()
        .find(|(_, p)| {
          p.name.mapOr(false, |name| name == parameter.name.unwrap())
        })
        .andThen(|(index, _)| objectInstance.class.class.unwrap().typeParameters.get(index))
        .andThen(|p| p.name)
    })
}

fn getImplementationsForInstance(type_: Type) -> List<Implementation> {
  let implementations = match type_.kind {
    TypeKind::Enum(enum_) => enum_.implementations
    TypeKind::Intersection(intersection) => getImplementationsForInstance(intersection.baseType)
    TypeKind::Struct(struct) => struct.implementations
    _ => []
  }

  if implementations.size() > 1
    then if let Option::Some(objectInstance) = type_.instance
      then implementations
        .filter(|i| {
          let implementationInstance = i.type_.instance.unwrap()

          List.zip(objectInstance.typeParameters, implementationInstance.typeParameters)
            .all(|(objectP, implP)| isAssignable(implP, objectP))
        })
        .filter(|i| {
          i.typeParameterBounds.mapOr(true, |bounds|
            bounds.entries().all(|(mut subType, mut superType)|{
              let resolve = resolveTypeParameters(getParameterMap(objectInstance, i))
              let implementationInstance = i.type_.instance.unwrap()
              isAssignable(resolve(superType), resolve(subType))
            })
          )
        })
        .toList()
      else implementations
    else implementations
}

fn getMostSpecificImplementations(type_: Type, implementations: List<Implementation>) -> List<Implementation> {
  if let Option::Some(objectInstance) = type_.instance {
    let mut maxSpecificity = 0

    implementations
      .map(|i| {
        let specificity = getTypeSpecificity(i.type_)
        maxSpecificity = global->Math->max(maxSpecificity, specificity).transmute::<Num>()
        (i, specificity)
      })
      .filter(|(_, specificity)| specificity == maxSpecificity)
      .map(|(i, _)| i)
      .toList()
  }
  else implementations
}

export fn getImplementationForTrait(type_: Type, trait_: Type) -> Result<Option<Implementation>, List<Implementation>> {
  let implementations = getImplementationsForInstance(type_)
    .filter(|i| not i.trait_.getTrait().isShorthand)
    .filter(|i| isAssignable(i.trait_, trait_))
    .toList()

  let implementations =
    if implementations.size() > 1
      then getMostSpecificImplementations(type_, implementations)
      else implementations

  if implementations.size() > 1
    then Err(implementations)
    else Ok(implementations.first())
}

fn getImplementationForTraitCall(functionName: String, type_: Type, trait_: Type, e: CallExpression, mut functionType_: Type) -> Result<Option<Implementation>, List<Implementation>> {
  let implementations = getImplementationsForInstance(type_)
    .filter(|i| not i.trait_.getTrait().isShorthand)
    .filter(|i| isAssignable(i.trait_, trait_))
    .toList()

  // Implementations that accept the correct argment types
  let implementations =
    if implementations.size() > 1 {
      let filteredImplementations = implementations
        .filter(|mut i| {
          if let Ok(type_) = resolveImplTypeParameters(i, type_) {
            let functionType = type_.getTrait().functions[functionName]
            let function = functionType.getFunction()

            let mut functionType: Type =
              if let Some(selfBinding) = function.selfBinding {
                {
                  definition: functionType.definition
                  id: functionType.id
                  displayName: functionType.displayName
                  name: functionType.name
                  kind: TypeKind::Function({
                    selfBinding: None
                    parameters: [selfBinding]->concat(function.parameters).transmute()
                    parameterRange: {start: function.parameterRange.start + 1, end: function.parameterRange.end + 1}
                    returnType: function.returnType
                    isAbstract: function.isAbstract
                  })
                  class: functionType.class
                  instance: functionType.instance
                  providesType: functionType.providesType
                  enumMember: functionType.enumMember
                }
              }
              else functionType

            checkFunctionCall(functionType, e).mapErr(|(_, e)| print('error', e)).isOk()
          }
          else false
        })
        .toList()

      if filteredImplementations.size() > 0
        then filteredImplementations
        else implementations
    }
    else implementations

  let implementations =
    if implementations.size() > 1
      then getMostSpecificImplementations(type_, implementations)
      else implementations

  if implementations.size() > 1
    then Err(implementations)
    else Ok(implementations.first())
}

export fn getImplementation(functionName: String, type_: Type, e: CallExpression) -> Result<Option<Implementation>, List<Implementation>> {
  // Implementations implemented for the correct type instance (generics)
  let implementations = getImplementationsForInstance(type_)

  // Implementations that implements the called function
  let implementations = implementations
    .filter(|i| i.trait_.getTrait().functions.has(functionName))
    .toList()

  let scope: Scope = e->scope.transmute()
  // Implementations that are in scope
  let implementations =
    if implementations.size() > 1
      then implementations
        .filter(|i| scope.getBinding(i.trait_.name.unwrap()).isSome())
        .toList()
      else implementations

  // Implementations that accept the correct number of arguments
  let implementations =
    if implementations.size() > 1
      then implementations
        .filter(|i| i.trait_.getTrait().functions[functionName].getFunction().parameterRange
          .contains(e.argumentList.size())
        )
        .toList()
      else implementations

  // Implementations that accept the correct argment types
  let implementations =
    if implementations.size() > 1 {
      let filteredImplementations = implementations
        .filter(|mut i| {
          if let Ok(type_) = resolveImplTypeParameters(i, type_) {
            checkFunctionCall(type_.getTrait().functions[functionName], e).isOk()
          }
          else false
        })
        .toList()

      if filteredImplementations.size() > 0
        then filteredImplementations
        else implementations
    }
    else implementations

  // Implementations that are more specific (only for generics)
  // For example an impl for List<String> is more specific than one for List<T>
  let implementations =
    if implementations.size() > 1 and type_.instance.isSome()
      then getMostSpecificImplementations(type_, implementations)
      else implementations

  if implementations.size() > 1
    then Err(implementations)
    else Ok(implementations.first())
}

fn getTypeSpecificity(type_: Type) -> Num {
  if let TypeKind::Parameter(_) = type_.kind
    then return 0

  match type_.instance {
    Option::Some(instance) => {
      instance.typeParameters.iter().fold(1, |sum, type_| sum + getTypeSpecificity(type_))
    }
    Option::None => 1
  }
}

export fn resolveImplTypeParameters(mut implementation: Implementation, objectType: Type) -> Result<Type, (Type, Type)> {
  let mut parameterMap: ObjectMap<Type> = ObjectMap.new()

  if let Some(instance) = implementation.type_.instance {
    instance.typeParameters.forEach(|p| {
      parameterMap.set(p.name.unwrap(), p)
    })

    let mut iter = List.zip(instance.typeParameters, objectType.typeParameters().unwrap()).iter()
    while true {
      if let Some((ip, op)) = iter.next() {
        if let Err(err) = collectTypeParameters(parameterMap, ip, op)
          then return Err(err)
      }
      else break
    }
  }

  Ok(resolveTypeParameters(parameterMap)(implementation.trait_))
}

fn collectTypeParameters(mut parameterMap: ObjectMap<Type>, ip: Type, op: Type) -> Result<(), (Type, Type)> {
  match ip.kind {
    TypeKind::Parameter => {
      let name = ip.name.unwrap()
      // TODO: Use findCommonType when it handles generics correctly
      // match findCommonType([parameterMap[name], op]) {
      //   Ok(type_) => parameterMap[name] = type_
      //   Err(_) => return Err((parameterMap[name], op))
      // }
      if isAssignable(parameterMap[name], op)
        then parameterMap[name] = op
        else return Err((parameterMap[name], op))
    }
    _ => {
      if let Some(instance) = ip.instance {
        let mut iter = List.zip(instance.typeParameters, op.instance.unwrap().typeParameters).iter()
        while true {
          if let Some((ip, op)) = iter.next() {
            if let Err(err) = collectTypeParameters(parameterMap, ip, op)
              then return Err(err)
          }
          else break
        }
      }
    }
  }
  Ok(())
}

type TraitObject {
    objectType: Type
    functionType: Type
  }
export enum TraitCall {
  TraitObject(TraitObject)
  TypeObject(Implementation)
  None
  Error(ToSpan, String)
}

impl TraitCall {
  fn orElse(self, op: () -> TraitCall) -> TraitCall {
    match self {
      TraitCall::None => op()
      _ => self
    }
  }
}

fn getTraitCallForTrait(objectType: Type, methodName: String) -> Option<Type> {
  match objectType.kind {
    TypeKind::Trait(trait_) => {
      match trait_.functions.get(methodName) {
        Some(functionType) => Some(functionType)
        None => {
          trait_.requiredTraits
            .filterMap(|type_| getTraitCallForTrait(type_, methodName))
            .first()
        }
      }
    }
    _ => None
  }
}

export fn getTraitObjectCall(functionName: String, objectType: Type, trait_: Type, e: CallExpression, mut functionType_: Type) -> TraitCall {
  match objectType.kind {
    TypeKind::Intersection(intersection) => {
      getTraitCall(intersection.baseType, functionName, e)
        .orElse(|| getTraitCall(intersection.intersectedTrait, functionName, e))
    }
    TypeKind::Trait(trait_) => {
      getTraitCallForTrait(objectType, functionName)
        .map(|functionType| TraitCall::TraitObject({objectType, functionType}))
        .unwrapOr(TraitCall::None)
    }
    _ => {
      match getImplementationForTraitCall(functionName, objectType, trait_, e, functionType_) {
        Ok(Some(implementation)) => TraitCall::TypeObject(implementation)
        Ok(None) => TraitCall::None
        Err => TraitCall::Error(e, 'Ambiguous trait call')
      }
    }
  }
}

export fn getTraitCall(objectType: Type, methodName: String, e: CallExpression) -> TraitCall {
  match objectType.kind {
    TypeKind::Intersection(intersection) => {
      getTraitCall(intersection.baseType, methodName, e)
        .orElse(|| getTraitCall(intersection.intersectedTrait, methodName, e))
    }
    TypeKind::Trait(trait_) => {
      getTraitCallForTrait(objectType, methodName)
        .map(|functionType| TraitCall::TraitObject({objectType, functionType}))
        .unwrapOr(TraitCall::None)
    }
    _ => {
      match getImplementation(methodName, objectType, e) {
        Ok(Some(implementation)) => TraitCall::TypeObject(implementation)
        Ok(None) => TraitCall::None
        Err => TraitCall::Error(e, 'Ambiguous trait call')
      }
    }
  }
}
