import '../../ast/ast.puck' as {FunctionDeclaration}
import '../../entities.puck' as {FunctionType, Scope, TypeInstance}
import 'range.puck' as {Range, checkRange, getRange}
import 'types.puck' as {getType, isAssignable}

export fn getFunctionTypeName(arguments: List<TypeInstance>, returnType: TypeInstance)
  then '(' + arguments.map(|a| (a and a.name) or '??').join(', ') + ') => ' +
        (returnType and returnType.name or '??')

export fn createFunctionType(scope: Scope, f: FunctionDeclaration, reportError) {
  let arguments = f.parameterList.map(|p| {{
    identifier: p.identifier
    mutable: p.mutable
    ty: p.ty
    token: p
  }})
  let returnType = getType(scope, f.returnType)
  let selfBinding =
    if arguments.length > 0 and arguments[0].identifier.name == 'self'
      then arguments[0]
  let arguments =
    if selfBinding
      then arguments.slice(1)
      else arguments

  {
    kind: 'Function'
    name: if f.name then f.name.name else getFunctionTypeName(arguments, returnType)
    selfBinding
    arguments
    argumentRange: if f.parameterList
      then getRange(arguments, |p| p.token.initializer, reportError, 'parameter')
      else {{start: 0, end: 0}}
    returnType
    isAbstract: not f.body
  }
}

export fn checkFunctionAssignability(to: FunctionType, subject: FunctionType, token) {
  if let error = checkRange(subject.arguments, to.argumentRange, 'arguments', subject.name)
    then return error

  let mut errors = []
  subject.arguments.forEach(|subjectArgument, i| {
    let toArgument = to.arguments[i]

    if not isAssignable(toArgument.ty, subjectArgument.ty)
      then return errors.push(
        'Types of parameter #$i does not match. ' + subjectArgument.ty.name +
        ' is not assignable to ' + toArgument.ty.name
      )

    if subjectArgument.mutable and not toArgument.mutable
      then return errors.push('Parameter #$i is required to be immutable')
  })
  if errors.length > 0
    then return errors[0]

  if not isAssignable(to.returnType, subject.returnType)
    then return
      'Return type ' + subject.returnType.name + ' is not assignable to ' + to.returnType.name
}
