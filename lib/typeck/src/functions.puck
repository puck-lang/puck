import 'puck:js' as {undefined}
import '../../ast/ast.puck' as {
  FunctionDeclaration
  Expression
  CallExpression
  VariableDeclaration
  Pattern
  TypeBound
  TypeParameter
}
import '../../ast/span.puck' as {ToSpan}
import '../scope_visitor.puck' as {getBinding}
import '../../entities.puck' as {Definition, File, Function, StructKind, Type, TypeKind}
import 'range.puck' as {checkRange, getRange}
import 'scope.puck' as {Binding, Scope}
import 'types.puck' as {isAssignable, isSameId}
import 'structure_visitor.puck' as {notAssignableError}

fn getPatternName(pattern: Pattern) -> Option<String> {
  match pattern {
    Pattern::Identifier {identifier} => Some(identifier.name)
    _ => None
  }
}

export fn isPatternMutable(pattern: Pattern) -> Bool {
  match pattern {
    Pattern::CatchAll => false
    Pattern::Identifier {identifier, mutable} => mutable
    Pattern::Record(record) => record.properties.any(|p| isPatternMutable(p.pattern))
    Pattern::Tuple(tuple) => tuple.properties.any(isPatternMutable)
    Pattern::RecordType(_, record) => record.properties.any(|p| isPatternMutable(p.pattern))
    Pattern::TupleType(_, tuple) => tuple.properties.any(isPatternMutable)
    Pattern::UnitType => false
  }
}

export fn createFunctionType(file: File, scope: Scope, f: FunctionDeclaration, reportError: (ToSpan, String) -> ()) -> Type {
  let class =
    if f.typeParameters.size() {
      Some({
        parameterRange: getRange(
          f.typeParameters
          |p| p.defaultValue.isSome()
          reportError
          'type parameter'
        )
        instances: []
        typeParameters: f.typeParameters.map(|p| p->type_.transmute()).toList()
      })
    }
    else None

  let parameters = f.parameterList
    .enumerate()
    .map(|(i, p)| Binding({
      definition: Definition({file, token: p})
      name: getPatternName(p.pattern).unwrapOr('p$i')
      mutable: isPatternMutable(p.pattern)
      allowRedeclare: true
      type_: p->type_.transmute()
      previous: None
      completeType: None
    }))
    .toList()
  let returnType: Type =
    if let Option::Some(returnType) = f.returnType {
      returnType.getType()
    }
    else undefined
  let selfBinding =
    parameters.first().andThen(|b| {
      if b.name == 'self'
        then Some(b)
        else None
    })
  let parameters =
    if selfBinding.isSome()
      then parameters.skip(1).toList()
      else parameters

  {
    definition: Definition({file, token: f})
    id: None
    displayName: None
    name: f.name.map(|identifier| identifier.name)
    kind: TypeKind::Function({
      selfBinding
      parameters
      parameterRange:
        if f.parameterList
          then getRange(
            parameters
            |p| {
              let vd: VariableDeclaration = p.definition->token.transmute()
              vd.initializer.isSome()
            }
            reportError
            'parameter'
          )
          else {{start: 0, end: 1}}
      returnType
      isAbstract: f.body.isNone()
    })
    class
    instance: None
    providesType: None
    enumMember: None
  }
}

export fn checkFunctionAssignability(functionName: String, to: Function, subject: Function) -> Result<(), String> {
  if let Result::Err(error) = checkRange(subject.parameters, to.parameterRange, 'arguments', functionName)
    then return Err(error)

  let mut errors = []
  subject.parameters.enumerate().forEach(|(i, subjectParameter)| {
    let toParameter = to.parameters[i]

    if not isAssignable(toParameter.type_, subjectParameter.type_)
      then errors.push(
        'Types of parameter #$i does not match. ' ++ subjectParameter.type_.displayName() ++
        ' is not assignable to ' ++ toParameter.type_.displayName()
      )
    else if subjectParameter.mutable and not toParameter.mutable
      then errors.push('Parameter #$i is required to be immutable')
  })
  if errors.size() > 0
    then return Err(errors[0])

  if not isAssignable(to.returnType, subject.returnType)
    then Err('Return type ' ++ subject.returnType.displayName() ++ ' is not assignable to ' ++ to.returnType.displayName())
    else Ok(())
}


export fn checkFunctionCall(mut functionType: Type, c: CallExpression) -> Result<Function, (ToSpan, String)> {
  if not functionType then return Ok(undefined)
  let name =
    match c.func {
      Expression::Identifier(i) => i.name
      _ => functionType.displayName()
    }

  let function = match functionType.kind {
    TypeKind::Function(func) => func
    _ => return Err((c, '$name is not callable'))
  }

  if let Option::Some(selfBinding) = function.selfBinding {
    if selfBinding.mutable {
      if not getBinding(c.func).mapOr(true, |binding| binding.mutable)
        then return Err((c, '$name can only be called on a mutable binding'))
    }
  }

  if let Result::Err(error) = checkRange(c.argumentList, function.parameterRange, 'arguments', name) {
    return Err((c, error))
  }
  if let Some(t) = c.typeArguments {
    if let Option::Some(class) = functionType.instance.andThen(|i| i.class.class).orValue(functionType.class) {
      if let Result::Err(error) =
        checkRange(t.typeArguments, class.parameterRange, 'type parameters', functionType.displayName()) {
        return Err((t, error))
      }
    }
    else return Err((t, 'Type ' ++ functionType.displayName() ++ ' is not generic'))
  }

  for (i, argument) of c.argumentList.enumerate().toList() {
    let parameter = function.parameters.get(i).unwrap()
    let parameterName = parameter.name

    if not isAssignable(parameter.type_, argument.getType())
      then return Err((argument
        notAssignableError(parameter.type_, argument.getType()) ++
        ' in parameter $parameterName of function $name'
      ))

    if parameter.mutable {
      if let Option::Some(argumentBinding) = getBinding(argument) {
        let argumentName = argumentBinding.name

        if not argumentBinding.mutable {
          return Err((argument
            'Parameter $parameterName of function $name requires a mutable binding ' ++
            'but $argumentName is declared as immutable.'
          ))
        }
      }
    }
  }

  Ok(function)
}

export fn resolveFunctionTypeParametersByReturnValue(mut parameterMap: ObjectMap<Type>, typeParameters: List<Type>, returnType: Type, assignedTo: Type) {
  if isSameId(returnType, assignedTo) and isAssignable(assignedTo, returnType) {
    match (returnType.typeParameters(), assignedTo.typeParameters()) {
      (Some(returnTypeTypeParameters), Some(assignedToTypeParameters)) => {
        returnTypeTypeParameters.enumerate().forEach(|(i, returnTypeTypeParameter)| {
          if let Some(assignedToTypeParameter) = assignedToTypeParameters.get(i) {
            if returnTypeTypeParameter.isParameter() and not assignedToTypeParameter.isParameter() {
              let name = returnTypeTypeParameter.name.unwrap()
              if not parameterMap.has(name) {
                parameterMap.set(name, assignedToTypeParameter)
              }
            }
          }
        })
      }
      _ => {}
    }
  }
}

export fn resolveFunctionTypeParameters(mut parameterMap: ObjectMap<Type>, typeParameters: List<Type>, parameterType: Type, argumentType: Type, allowedToFollowFunction = true) {
  if not parameterType or not argumentType or argumentType.isNever() then return ()
  match parameterType.kind {
    TypeKind::Parameter(_) => {
      let name = parameterType.name.unwrap()
      if typeParameters.any(|p| p.name.unwrap() == name) {
        if not parameterMap.has(name) {
          parameterMap[name] = argumentType
        }
      }
    }
    TypeKind::Struct(struct) => {
      if not parameterType.id.isSome() {
        match struct.kind {
          StructKind::Record(parameterRecord) => {
            if let TypeKind::Struct({kind: StructKind::Record(argumentRecord)}) = argumentType.kind {
              parameterRecord.properties.forEach(|(name, {type_: parameterType})| {
                if let Some({type_: argumentType}) = argumentRecord.properties.get(name) {
                  resolveFunctionTypeParameters(
                    parameterMap
                    typeParameters
                    parameterType
                    argumentType
                  )
                }
              })
            }
          }
          StructKind::Tuple(parameterTuple) => {
            if let TypeKind::Struct({kind: StructKind::Tuple(argumentTuple)}) = argumentType.kind {
              parameterTuple.properties.enumerate().forEach(|(i, parameterType)| {
                if let Some(argumentType) = argumentTuple.properties.get(i) {
                  resolveFunctionTypeParameters(
                    parameterMap
                    typeParameters
                    parameterType
                    argumentType
                  )
                }
              })
            }
          }
          _ => {}
        }
      }
    }
    TypeKind::Function(parameterFunction) => {
      if allowedToFollowFunction and parameterFunction.returnType {
        if let TypeKind::Function(argumentFunction) = argumentType.kind {
          if argumentFunction.returnType {
            resolveFunctionTypeParameters(
              parameterMap
              typeParameters
              parameterFunction.returnType
              argumentFunction.returnType
            )
          }
        }
      }
    }
    _ => {}
  }

  match (parameterType.typeParameters(), argumentType.typeParameters()) {
    (Some(parameterParameters), Some(argumentParameters)) => {
      parameterParameters.enumerate().forEach(|(i, parameterType)| {
        if let Some(argumentType) = argumentParameters.get(i) {
          resolveFunctionTypeParameters(
            parameterMap
            typeParameters
            parameterType
            argumentType
            false
          )
        }
      })
    }
    _ => {}
  }
}
