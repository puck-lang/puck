import 'puck:js' as {Error, Object, undefined}
import 'node:util' as {inspect}
import '../../ast/ast.puck' as {
  FunctionDeclaration
  Identifier
  TypeParameter
  TypePath
  VariableDeclaration

  Pattern

  TypeBound
  FunctionTypeBound
  NamedTypeBound
  ObjectTypeBound
  TupleTypeBound

  BooleanLiteral
  ListLiteral
  NumberLiteral
  ObjectLiteral
  StringLiteral
  TupleLiteral
}
import '../../ast/visit.puck' as visit
import '../../compiler/ast.ts' as {SyntaxKind}
import '../../entities.puck' as {
  Scope
  StructKind
  Type
  TypeClass
  TypeKind
}
import 'enums.puck' as {getEnumMember}
import 'functions.puck' as {createFunctionType}
import 'range.puck' as {checkRange}
import 'types.puck' as {createTypeInstance, getType, isAssignable}

export fn notAssignableError(to: Type, subject: Type) {
  subject.displayName() + ' is not assignable to type ' + to.displayName()
}

export let structureVisitor = {
  visitEnumMember: visit.walkingVisitor.visitEnumMember
  visitFunctionDeclaration: |mut self, mut f: FunctionDeclaration| {
    if not f.scope {
      self.scope = self.scope.createChild()
      f.scope = self.scope

      let assignedTo =
        if self.assignedTo and self.assignedTo.type_ then
          if let TypeKind::Function(func) = self.assignedTo.type_.kind
            then func

      f.typeParameters.forEach(self.visitTypeParameter.bind(self))
      f.parameterList.enumerate().forEach(|(p, i)| {
        let type_ =
          if assignedTo and assignedTo.arguments[i] then assignedTo.arguments[i].type_
        self.visitFunctionParameter(p, type_)
      })
      if let Option::Some(returnType) = f.returnType then self.visitTypeBound(returnType)

      f.type_ = createFunctionType(f.scope, f, self.reportError)
      if let Option::Some(name) = f.name then
        f.scope.parent.define({
          name: name.name
          token: f
          mutable: false
          type_: f.type_
        })

      self.scope = f.scope.parent
    }
  }
  visitMethodDeclaration: |mut self, mut f: FunctionDeclaration, selfType: Type| {
    if not f.scope {
      self.scope = self.scope.createChild()
      f.scope = self.scope

      f.typeParameters.forEach(self.visitTypeParameter.bind(self))

      if let Option::Some(first) = f.parameterList.first() {
        if let Pattern::Identifier({name}) = first.pattern {
          let type_: Option<TypeBound> = first.typeBound
          if name == 'self' {
            if type_.isNone() {
              f.parameterList[0].typeBound = Some({
                kind: SyntaxKind.NamedTypeBound
                path: TypePath::Member({name: 'Self'})
                typeParameters: []
              })
            }
            else {
              self.visitFunctionParameter(first)
              if not isAssignable(first.type_, selfType)
                then self.reportError(first, notAssignableError(first.type_, selfType))
            }
          }
        }
      }

      f.parameterList.forEach(|p| self.visitFunctionParameter(p))
      if let Option::Some(returnType) = f.returnType then self.visitTypeBound(returnType)

      f.type_ = createFunctionType(f.scope, f, self.reportError)

      self.scope = f.scope.parent
    }
  }
  visitFunctionParameter: |self, mut v: VariableDeclaration, type_| {
    self.visitVariableDeclaration(v, self.visitLiteral.bind(self), type_)
  }
  visitFunctionTypeBound: |mut self, mut t: FunctionTypeBound| {
    if not t.scope {
      self.scope = self.scope.createChild()
      t.scope = self.scope

      visit.walkFunctionTypeBound(self, t)
      t.type_ = getType(t.scope, t)

      self.scope = self.scope.parent
    }
  }
  visitNamedTypeBound: |self, mut t: NamedTypeBound| {
    if not t.scope {
      t.scope = self.scope

      self.visitTypePath(t.path)
      let type_: Type = t.path.type_

      let isSelf =
        if let TypePath::Member({name}) = t.path {
          if name == 'Self' {
            if t.typeParameters.length > 0
              then self.reportError(t, 'Self is not generic')

            if let Option::Some(class) = type_.class {
              t.typeParameters = class.typeParameterBindings.map(|{name}| {{
                kind: SyntaxKind.NamedTypeBound
                path: TypePath::Member(name)
                typeParameters: []
              }})
            }
            true
          }
          else false
        }
        else false

      if not isSelf {
        if let Option::Some(class) = type_.class {
          if let Result::Err(error) =
            checkRange(t.typeParameters, class.parameterRange, 'type parameters', type_.displayName()) {
            self.reportError(t, error)
          }
        }
        else if t.typeParameters.length > 0
          then self.reportError(t, 'Type ' + type_.displayName() + ' is not generic')
      }

      visit.walkNamedTypeBound(self, t)

      t.type_ =
        if type_.class.isSome()
          then createTypeInstance(type_, t.typeParameters.map(|p| p.type_))
          else type_
    }
  }
  visitObjectTypeBound: |self, mut t: ObjectTypeBound| {
    if not t.scope {
      t.scope = self.scope

      visit.walkObjectTypeBound(self, t)

      t.type_ = getType(t.scope, t)
    }
  }
  visitTupleTypeBound: |self, mut t: TupleTypeBound| {
    if not t.scope {
      t.scope = self.scope

      visit.walkTupleTypeBound(self, t)

      t.type_ = getType(t.scope, t)
    }
  }
  visitTypeParameter: |self, mut t: TypeParameter| {
    if not t.scope {
      t.scope = self.scope
      visit.walkTypeParameter(self, t)
      t.type_ = {
        displayName: None
        name: Some(t.name.name)
        kind: TypeKind::Parameter({
          defaultValue: t.defaultValue.map(|typeBound| getType(t.scope, typeBound))
        })
        class: TypeClass.fromAstNode(t, self.reportError)
        instance: None
      }
      self.scope.defineType(t.type_, t)
    }
  }
  visitTypePath: |self, mut t: TypePath| {
    if not t.scope {
      t.scope = self.scope
      let binding = t.scope.getTypeBinding(t.value[0].name)
      if not binding
        then self.reportError(t, 'Use of undeclared type ' + t.value[0].name)
      t.type_= binding.type_
    }
  }
  visitVariableDeclaration: |self, mut d: VariableDeclaration, visitInitializer, type_, allowNotExhaustive = false| {
    if d.scope then return undefined
    d.scope = self.scope
    d.type_ = d.typeBound.mapOr(type_, |bound| {
      self.visitTypeBound(bound)
      getType(d.scope, bound) or type_
    })

    let mut patternType = None

    match declarePatternVariables(d.scope, self, d.pattern, d.mutable, d.type_, allowNotExhaustive) {
      Result::Ok(patternTy) => {
        patternType = Some(patternTy)
        if not isAssignable(patternTy, d.type_)
          then self.reportError(d, notAssignableError(patternTy, d.type_))
      }
      Result::Err(PatternError::PatternMismatch(_, to, subject)) =>
        self.reportError(d, notAssignableError(to, subject))
      Result::Err(PatternError::NotExhaustive) =>
        self.reportError(d, 'non exhaustive pattern')
    }

    if let Option::Some(initializer) = d.initializer {
      visitInitializer(initializer)
      if not d.type_ and d.pattern.binding {
        d.pattern.binding.type_ = initializer.type_
        d.type_ = initializer.type_
      }
      else if not isAssignable(d.type_, initializer.type_)
        then self.reportError(d, notAssignableError(d.type_, initializer.type_))
      else if let Option::Some(patternTy) = patternType {
        let patternTy: Type = patternTy
        if not isAssignable(patternTy, initializer.type_)
          then self.reportError(d, notAssignableError(patternTy, initializer.type_))
      }
    }
  }

  visitLiteral: |self, mut l| {
    l.scope = self.scope
    if l.kind == SyntaxKind.BooleanLiteral
      then self.visitStrictBooleanLiteral(l)
    else if l.kind == SyntaxKind.ListLiteral
      then self.visitStrictListLiteral(l)
    else if l.kind == SyntaxKind.NumberLiteral
      then self.visitStrictNumberLiteral(l)
    else if l.kind == SyntaxKind.ObjectLiteral
      then self.visitStrictObjectLiteral(l)
    else if l.kind == SyntaxKind.StringLiteral
      then self.visitStrictStringLiteral(l)
    else self.reportError(l, 'not a literal' + inspect(l))
  }
  visitStrictBooleanLiteral: |self, mut l: BooleanLiteral| {
    l.type_ = self.scope.getTypeBinding('Bool').type_
  }
  visitStrictListLiteral: |self, mut l: ListLiteral| {
    l.members.forEach(self.visitLiteral.bind(self))
  }
  visitStrictNumberLiteral: |self, mut l: NumberLiteral| {
    l.type_ = self.scope.getTypeBinding('Num').type_
  }
  visitStrictObjectLiteral: |self, mut l: ObjectLiteral| {
    l.members.forEach(|m| {
      self.visitLiteral(m.value)
    })
  }
  visitStrictStringLiteral: |self, mut l: StringLiteral| {
    l.type_ = self.scope.getTypeBinding('String').type_
     if l.parts.some(|p| p.kind == SyntaxKind.Identifier)
      then self.reportError(l, 'not a literal')
  }
  visitStrictTupleLiteral: |self, mut l: TupleLiteral| {
    l.expressions.forEach(self.visitLiteral.bind(self))
  }
}

enum PatternError {
  PatternMismatch(Pattern, Type, Type)
  NotExhaustive
}

export fn declarePatternVariables(scope: Scope, visitor, mut p: Pattern, mutable: Bool, type_: Type, allowNotExhaustive: Bool) ->
    Result<Type, PatternError> {
  match p {
    Pattern::CatchAll => Ok(false)
    Pattern::Identifier => {
      p.binding = scope.define({
        name: p.value[0].name
        mutable
        token: p
        type_
      }, true)
      Ok(false)
    }
    Pattern::Record(record) => {
      let props =
        if type_
          then match type_.kind {
            TypeKind::Struct(struct) => match struct.kind {
              StructKind::Record(record) => record.properties
              _ => throw 'bad type'
            }
            TypeKind::Parameter => {{}}
            _ => {
              throw 'abd type'
            }
          }
          else ObjectMap.new()

      let properties: Result<ObjectMap<Type>, PatternError> = record.properties
        .map(|mut p| declarePatternVariables(scope, visitor, p.pattern, mutable, props[p.property.name], allowNotExhaustive))
        .reduce(|acc: Result<ObjectMap<Type>, PatternError>, cur: Result<Type, PatternError>| {
          acc.andThen(|props| cur.map(|prop| props.concat(prop)))
        }, Ok([]))

      properties.map(|_| false)
    }
    Pattern::RecordType(typePath, record) => {
      visitor.visitTypePath(typePath)

      let recordType: Type =
        if type_
          then type_
          else typePath.type_
      let recordType: Type = match recordType.kind {
        TypeKind::Enum(enum_) => {
          let member = getEnumMember(typePath)
          let enumArmType = enum_.members[member]
          enumArmType
        }
        _ => recordType
      }
      let props = match recordType.kind {
        TypeKind::Struct(struct) => match struct.kind {
          StructKind::Record(record) => record.properties
          _ => throw 'bad type'
        }
        TypeKind::Parameter => {{}}
        _ => {
          throw 'abd type'
        }
      }

      let properties: Result<ObjectMap<Type>, PatternError> = record.properties
        .map(|mut p| declarePatternVariables(scope, visitor, p.pattern, mutable, props[p.property.name], allowNotExhaustive))
        .reduce(|acc: Result<ObjectMap<Type>, PatternError>, cur: Result<Type, PatternError>| {
          acc.andThen(|props| cur.map(|prop| props.concat(prop)))
        }, Ok([]))

      properties.map(|_| p.value[0].type_)
    }
    Pattern::Tuple(tuple) => {
      let props =
        if type_
          then match type_.kind {
            TypeKind::Struct(struct) => {
              match struct.kind {
                StructKind::Tuple(tuple) => tuple.properties
                _ => throw 'bad type t'
              }
            }
            TypeKind::Parameter => []
            _ => {
              throw 'abd type t'
            }
          }
          else []

      let properties: Result<List<Type>, PatternError> = tuple.properties
        .enumerate()
        .map(|mut (p, i)| declarePatternVariables(scope, visitor, p, mutable, props[i], allowNotExhaustive))
        .reduce(|acc: Result<List<Type>, PatternError>, cur: Result<Type, PatternError>| {
          acc.andThen(|props| cur.map(|prop| props.concat(prop)))
        }, Ok([]))

      properties.map(|properties| {{
        displayName: None
        name: None
        kind: TypeKind::Struct({
          implementations: []
          kind: StructKind::Tuple({
            properties
          })
        })
        class: None
        instance: None
      }})
    }
    Pattern::TupleType(typePath, tuple) => {
      visitor.visitTypePath(typePath)

      let tupleType: Type =
        if type_
          then type_
          else typePath.type_

      let typePathType: Type =
        if isAssignable(typePath.type_, tupleType)
          then tupleType
          else typePath.type_

      let tupleType: Type = match typePathType.kind {
        TypeKind::Enum(enum_) => {
          let member = getEnumMember(typePath)
          let enumArmType = enum_.members[member]
          enumArmType
        }
        _ => tupleType
      }
      let props = match tupleType.kind {
        TypeKind::Struct(struct) => {
          match struct.kind {
            StructKind::Tuple(tuple) => tuple.properties
            _ => throw 'bad type t'
          }
        }
        TypeKind::Parameter => []
        _ => {
          throw 'abd type t'
        }
      }

      let properties: Result<List<Type>, PatternError> = tuple.properties
        .enumerate()
        .map(|mut (p, i)| declarePatternVariables(scope, visitor, p, mutable, props[i], allowNotExhaustive))
        .reduce(|acc: Result<List<Type>, PatternError>, cur: Result<Type, PatternError>| {
          acc.andThen(|props| cur.map(|prop| props.concat(prop)))
        }, Ok([]))

      properties.andThen(|properties| {
        let type_ = {
        displayName: None
        name: None
        kind: TypeKind::Struct({
          implementations: []
          kind: StructKind::Tuple({
            properties
          })
        })
        class: None
        instance: None
      }

        if let TypeKind::Enum(enumType) = typePath.type_.kind {
          if not allowNotExhaustive and enumType.members.size() > 1
            then Err(PatternError::NotExhaustive)
            else {
              let member = getEnumMember(typePath)
              let enumArmType = enumType.members[member]

              if isAssignable(enumArmType, type_)
                then Ok(typePath.type_)
                else Err(PatternError::PatternMismatch(p, enumArmType, type_))
            }
        } else {
          if isAssignable(typePath.type_, type_)
            then Ok(typePath.type_)
            else Err(PatternError::PatternMismatch(p, typePath.type_, type_))
        }
      })
    }
    Pattern::UnitType(typePath) => {
      visitor.visitTypePath(typePath)
      Ok(false)
    }
  }
}
