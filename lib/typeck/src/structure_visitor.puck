import 'puck:js' as {undefined}
import 'node:util' as {inspect}
import '../../ast/ast.puck' as {
  FunctionDeclaration
  Identifier
  TypeParameter
  VariableDeclaration

  Pattern

  FunctionTypeBound
  NamedTypeBound
  ObjectTypeBound
  TupleTypeBound

  BooleanLiteral
  ListLiteral
  NumberLiteral
  ObjectLiteral
  StringLiteral
  TupleLiteral
}
import '../../ast/visit.puck' as visit
import '../../compiler/ast.ts' as {SyntaxKind}
import '../../entities.puck' as {Scope, TypeInstance, isTypeClass}
import 'functions.puck' as {createFunctionType, getTupleTypeName}
import 'range.puck' as {checkRange}
import 'types.puck' as {getType, isAssignable}

export fn notAssignableError(to: TypeInstance, subject: TypeInstance)
  then subject.name + ' is not assignable to type ' + to.name

export let structureVisitor = {
  visitEnumMember: visit.walkingVisitor.visitEnumMember
  visitFunctionDeclaration: |mut self, mut f: FunctionDeclaration| {
    if not f.scope {
      self.scope = self.scope.createChild()
      f.scope = self.scope

      let assignedTo =
        if self.assignedTo then self.assignedTo.ty

      if f.typeParameters
        then f.typeParameters.forEach(self.visitTypeParameter.bind(self))
      f.parameterList.forEach(|p, i| {
        let ty =
          if assignedTo then assignedTo.arguments[i].ty
        self.visitFunctionParameter(p, ty)
      })
      if f.returnType.isJust() then self.visitTypeBound(f.returnType.value[0])

      f.ty = createFunctionType(f.scope, f, self.reportError)
      if f.name.isJust() then
        f.scope.parent.define({
          name: f.name.value[0].name
          token: f
          mutable: false
          ty: f.ty
        })

      self.scope = f.scope.parent
    }
  }
  visitFunctionParameter: |self, mut v: VariableDeclaration, ty| {
    self.visitVariableDeclaration(v, self.visitLiteral.bind(self), ty)
  }
  visitFunctionTypeBound: |mut self, mut t: FunctionTypeBound| {
    if not t.scope {
      self.scope = self.scope.createChild()
      t.scope = self.scope

      visit.walkFunctionTypeBound(self, t)
      t.ty = getType(t.scope, t)

      self.scope = self.scope.parent
    }
  }
  visitNamedTypeBound: |self, mut t: NamedTypeBound| {
    if not t.scope {
      t.scope = self.scope

      let binding = t.scope.getTypeBinding(t.name.name)
      if not binding
        then self.reportError(t, 'Use of undeclared type ' + t.name.name)
      else if isTypeClass(binding.ty) {
        if let error = checkRange(t.typeParameters, binding.ty.parameterRange, 'type parameters', binding.name)
        then self.reportError(t, error)
      }
      else if t.typeParameters.length > 0
        then self.reportError(t, 'Type ' + binding.name + ' is not generic')

      visit.walkNamedTypeBound(self, t)

      t.ty = getType(t.scope, t)
    }
  }
  visitObjectTypeBound: |self, mut t: ObjectTypeBound| {
    if not t.scope {
      t.scope = self.scope

      visit.walkObjectTypeBound(self, t)

      t.ty = getType(t.scope, t)
    }
  }
  visitTupleTypeBound: |self, mut t: TupleTypeBound| {
    if not t.scope {
      t.scope = self.scope

      visit.walkTupleTypeBound(self, t)

      t.ty = getType(t.scope, t)
    }
  }
  visitTypeParameter: |self, mut t: TypeParameter| {
    if not t.scope {
      t.scope = self.scope
      visit.walkTypeParameter(self, t)
      let binding = self.scope.defineType(t)
      t.ty = binding.ty
    }
  }
  visitVariableDeclaration: |self, mut d: VariableDeclaration, visitInitializer, ty| {
    if d.scope then return undefined
    d.scope = self.scope
    d.ty = d.typeBound.mapOr(ty, |bound| {
      self.visitTypeBound(bound)
      getType(d.scope, bound) or ty
    })

    let result = declareVariable(d.scope, self, d.pattern, d.mutable, d.ty)
    if result.isOk() {
      let patternTy = result.value[0]

      if patternTy {
        if not d.ty {
          d.ty = patternTy
        }
        else if not isAssignable(patternTy, d.ty)
          then self.reportError(d, notAssignableError(patternTy, d.ty))
      }
    }
    else {
      let (pattern, to, subject) = result.value[0]
      self.reportError(d, notAssignableError(to, subject))
    }

    if d.initializer.isJust() {
      let initializer = d.initializer.value[0]
      visitInitializer(initializer)
      if not d.ty and d.pattern.binding {
        d.pattern.binding.ty = initializer.ty
        d.ty = initializer.ty
      }
      else if not isAssignable(d.ty, initializer.ty)
        then self.reportError(d, notAssignableError(d.ty, initializer.ty))
    }
  }

  visitLiteral: |self, mut l| {
    l.scope = self.scope
    if l.kind == SyntaxKind.BooleanLiteral
      then self.visitStrictBooleanLiteral(l)
    else if l.kind == SyntaxKind.ListLiteral
      then self.visitStrictListLiteral(l)
    else if l.kind == SyntaxKind.NumberLiteral
      then self.visitStrictNumberLiteral(l)
    else if l.kind == SyntaxKind.ObjectLiteral
      then self.visitStrictObjectLiteral(l)
    else if l.kind == SyntaxKind.StringLiteral
      then self.visitStrictStringLiteral(l)
    else self.reportError(l, 'not a literal' + inspect(l))
  }
  visitStrictBooleanLiteral: |self, mut l: BooleanLiteral| {
    l.ty = self.scope.getTypeBinding('Bool').ty
  }
  visitStrictListLiteral: |self, mut l: ListLiteral| {
    l.members.forEach(self.visitLiteral.bind(self))
  }
  visitStrictNumberLiteral: |self, mut l: NumberLiteral| {
    l.ty = self.scope.getTypeBinding('Num').ty
  }
  visitStrictObjectLiteral: |self, mut l: ObjectLiteral| {
    l.members.forEach(|m| {
      self.visitLiteral(m.value)
    })
  }
  visitStrictStringLiteral: |self, mut l: StringLiteral| {
    l.ty = self.scope.getTypeBinding('String').ty
     if l.parts.some(|p| p.kind == SyntaxKind.Identifier)
      then self.reportError(l, 'not a literal')
  }
  visitStrictTupleLiteral: |self, mut l: TupleLiteral| {
    l.expressions.forEach(self.visitLiteral.bind(self))
  }
}

fn declareVariable(scope: Scope, visitor, mut p: Pattern, mutable: Bool, ty):
    Result<TypeInstance, (Pattern, TypeInstance, TypeInstance)> {
  if p.kind == 'CatchAll' {
    Ok(false)
  }
  else if p.kind == 'Identifier' {
    p.binding = scope.define({
      name: p.value[0].name
      mutable
      token: p
      ty
    }, true)
    Ok(false)
  }
  else if p.kind == 'Record' {
    let properties: Result<List<TypeInstance>, (Pattern, TypeInstance, TypeInstance)> = p.value[0].properties
      .map(|mut p| declareVariable(scope, visitor, p.local, mutable, ty))
      .reduce(|acc: Result<List<TypeInstance>, (Pattern, TypeInstance, TypeInstance)>, cur: Result<TypeInstance, (Pattern, TypeInstance, TypeInstance)>| {
        acc.andThen(|props| cur.map(|prop| props.concat(prop)))
      }, Ok([]))
    properties.map(|_| false)
  }
  else if p.kind == 'RecordType' {
    visitor.visitNamedTypeBound(p.value[0])
    let properties: Result<List<TypeInstance>, (Pattern, TypeInstance, TypeInstance)> = p.value[1].properties
      .map(|mut p| declareVariable(scope, visitor, p.local, mutable, ty))
      .reduce(|acc: Result<List<TypeInstance>, (Pattern, TypeInstance, TypeInstance)>, cur: Result<TypeInstance, (Pattern, TypeInstance, TypeInstance)>| {
        acc.andThen(|props| cur.map(|prop| props.concat(prop)))
      }, Ok([]))
    properties.map(|_| p.value[0].ty)
  }
  else if p.kind == 'Tuple' {
    let properties: Result<List<TypeInstance>, (Pattern, TypeInstance, TypeInstance)> = p.value[0].properties
      .map(|mut p| declareVariable(scope, visitor, p, mutable, ty))
      .reduce(|acc: Result<List<TypeInstance>, (Pattern, TypeInstance, TypeInstance)>, cur: Result<TypeInstance, (Pattern, TypeInstance, TypeInstance)>| {
        acc.andThen(|props| cur.map(|prop| props.concat(prop)))
      }, Ok([]))
    properties.map(|properties| {{
      kind: 'Tuple'
      name: getTupleTypeName(properties)
      properties
    }})
  }
  else if p.kind == 'TupleType' {
    visitor.visitNamedTypeBound(p.value[0])
    let properties: Result<List<TypeInstance>, (Pattern, TypeInstance, TypeInstance)> = p.value[1].properties
      .map(|mut p| declareVariable(scope, visitor, p, mutable, ty))
      .reduce(|acc: Result<List<TypeInstance>, (Pattern, TypeInstance, TypeInstance)>, cur: Result<TypeInstance, (Pattern, TypeInstance, TypeInstance)>| {
        acc.andThen(|props| cur.map(|prop| props.concat(prop)))
      }, Ok([]))
    properties.andThen(|properties| {
      let ty = {
        kind: 'Tuple'
        name: getTupleTypeName(properties)
        properties
      }
      if isAssignable(p.value[0].ty, ty)
        then Ok(p.value[0].ty)
        else Err((p, p.value[0].ty, ty))
    })
  }
}
