import 'puck:js' as {Object, null, undefined}
import '../../ast/ast.puck' as {FunctionTypeBound, NamedTypeBound}
import '../../ast/visit.puck' as visit
import '../../entities.puck' as {
  FunctionType
  Scope
  Struct
  Type
  TypeClass
  isFunctionType
  isStruct
  isTypeClass
  isTypeInstance
  isTypeParameter
}
import 'functions.puck' as {getFunctionTypeName}

export let resolveTypeParameters = |parameterMap| fn resolveTypeParametersInner(ty) {
  if isFunctionType(ty)
    then resolveTypeParametersFn(parameterMap, ty)
  else if isStruct(ty)
    then resolveTypeParametersStruct(parameterMap, ty)
  else if isTypeParameter(ty) {
    parameterMap[ty.name] or ty
  }
}

fn resolveTypeParametersFn(parameterMap, func: FunctionType) {
  Object.assign({}, func, {
    arguments: func.arguments.map(|binding| Object.assign({}, binding, {
      ty: if binding.ty
        then resolveTypeParameters(parameterMap)(binding.ty)
    }))
    returnType: if func.returnType
      then resolveTypeParameters(parameterMap)(func.returnType)
  })
}

fn resolveTypeParametersStruct(parameterMap, struct: Struct) {
  Object.assign({}, struct, {
    properties: struct.properties.map(resolveTypeParameters(parameterMap))
  })
}

fn mapObject<T>(object: ObjectMap<T>, mapper) {
  object.map(mapper)
}

export fn createTypeInstance(class: TypeClass, typeParameters: List<Type>) {
  let typeParameters =
    if typeParameters.length < class.parameterRange.end - 1 {
      typeParameters.concat(
        class.typeParameters
          .slice(typeParameters.length)
          .map(|p| p.defaultValue)
      )
    }
    else typeParameters

  let cachedInstance = class.instances.find(|i|
    i.typeParameters.length == typeParameters.length and
    i.typeParameters.every(|p, i| isSameType(p, typeParameters[i])))

  if cachedInstance
    then return cachedInstance

  let parameterMap = ObjectMapTrait.fromList(
    ListTrait.zip(typeParameters, class.typeParameters)
      .map(|p| {
        let typeArgument = p[0]
        let typeParameter = p[1];

        [typeParameter.name, typeArgument]
      }))

  let instance = {
    isTrait: class.isTrait
    functions: if class.functions
      then mapObject(class.functions, resolveTypeParameters(parameterMap))
    properties: if class.properties
      then mapObject(class.properties, resolveTypeParameters(parameterMap))
    implementations: class.implementations and []
    kind: class.name
    name: class.name + '<' + typeParameters.map(|p| p.name).join(', ') + '>'
    class
    typeParameters
    parameterMap
  }
  class.instances.push(instance)

  instance
}

export fn createTypeInstanceTypeCast(class, typeParameters: List<Type>) {
  createTypeInstance(class, typeParameters)
}

export fn getType(scope: Scope, t) { // t: TypeBound
  if not t then return undefined
  if t.name {
    let binding = scope.getTypeBinding(t.name.name)

    if not binding
      then binding
    else if isTypeClass(binding.ty)
      then createTypeInstanceTypeCast(binding.ty, t.typeParameters.map(|p| p.ty))
    else binding.ty
  }
  else {
    let arguments = t.arguments.map(|p| {{ty: getType(scope, p)}})
    let returnType = getType(scope, t.returnType)

    {
      kind: 'Function'
      name: getFunctionTypeName(arguments, returnType)
      arguments
      argumentRange: {start: arguments.length, end: arguments.length + 1}
      returnType
    }
  }
}

export fn isAssignable(to, subject) { // to: Type, subject: Type
  if not subject or not to then return true
  if isTypeParameter(to) then return true

  let sameKind = subject.kind == to.kind

  if not sameKind then return false

  if sameKind and to.kind == 'Function'
    then isFunctionAssignable(to, subject)
  else if isTypeInstance(to) and isTypeInstance(subject)
    then subject.typeParameters.every(|p, i| isAssignable(to.typeParameters[i], p))
  else true
}

fn isFunctionAssignable(to: FunctionType, subject: FunctionType) {
  if not to.argumentRange.isSubsetOf(subject.argumentRange)
    then return false

  to.arguments.every(fn (toArg, i) {
    let subjectArg = subject.arguments[i]

    isAssignable(toArg, subjectArg)
  })
}

export fn isSameType(a, b) {
  a.kind == b.kind
}
