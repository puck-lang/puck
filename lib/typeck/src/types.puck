import 'puck:js' as {Object, null, undefined}
import '../../ast/ast.puck' as {TypeBound}
import '../../ast/visit.puck' as visit
import '../../compiler/ast.ts' as {SyntaxKind}
import '../../entities.puck' as {
  Enum
  Function
  Struct
  StructKind
  Trait
  Type
  TypeClass
  TypeInstance
  TypeKind
}

fn assign(a, b) {
  Object->assign({}, a, b).transmute()
}

export let resolveTypeParameters = |parameterMap: ObjectMap<Type>, enterNamed = true| fn resolveTypeParametersInner(mut type_: Type) -> Type {
  if not type_ then return type_

  if let Option::Some(instance) = type_.instance {
    let mut i = instance
    let typeParameters = instance.typeParameters
    return createTypeInstance(
      i.class
      typeParameters
        .map(resolveTypeParameters(parameterMap, false))
        .toList()
    )
  }

  if not enterNamed and not type_.isParameter()
     and (type_.name.isSome() or type_.displayName.isSome())
    then return type_

   let resolvedKind = match type_.kind {
    TypeKind::Enum(enum_) => TypeKind::Enum(resolveTypeParametersEnum(parameterMap, enum_))
    TypeKind::Function(func) => {
      let mut f = func
      TypeKind::Function(resolveTypeParametersFn(parameterMap, f))
    }
    TypeKind::Parameter => return parameterMap.get(type_.name.unwrap()).unwrapOr(type_)
    TypeKind::Struct(struct) => TypeKind::Struct(resolveTypeParametersStruct(parameterMap, struct))
    TypeKind::Trait(trait_) => TypeKind::Trait(resolveTypeParametersTrait(parameterMap, trait_))
    _ => return type_
  }

  assign(type_, {
    kind: resolvedKind
  })
}

fn resolveTypeParametersEnum(parameterMap: ObjectMap<Type>, e: Enum) {
  assign(e, {
    members: e.members.map(resolveTypeParameters(parameterMap))
  })
}

fn resolveTypeParametersFn(parameterMap: ObjectMap<Type>, mut func: Function) {
  assign(func, {
    parameters: func.parameters.map(|mut binding| assign(binding, {
      type_: resolveTypeParameters(parameterMap, false)(binding.type_)
    })).toList()
    returnType: resolveTypeParameters(parameterMap, false)(func.returnType)
  })
}

fn resolveTypeParametersStruct(parameterMap: ObjectMap<Type>, struct: Struct) -> Struct {
  assign(struct, {
    kind: match struct.kind {
      StructKind::Record({properties}) => StructKind::Record({
        properties: properties.map(|mut p| {{
          optional: p.optional
          type_: resolveTypeParameters(parameterMap, false)(p.type_)
        }})
      })

      StructKind::Tuple({properties}) => StructKind::Tuple({
        properties: properties.map(resolveTypeParameters(parameterMap, false)).toList()
      })

      StructKind::Unit => struct.kind
    }
  })
}

fn resolveTypeParametersTrait(parameterMap: ObjectMap<Type>, t: Trait) {
  assign(t, {
    functions: t.functions.map(resolveTypeParameters(parameterMap, false))
  })
}


export fn createTypeInstance(mut type_: Type, typeParameters_: List<Type>) {
  if let Option::Some(providedType) = type_.providesType {
    let mut p = providedType
    return Type({
      definition: type_.definition
      id: type_.id
      displayName: type_.displayName
      name: type_.name
      kind: type_.kind
      class: type_.class
      instance: type_.instance
      providesType: createTypeInstance(p, typeParameters_)
      enumMember: type_.enumMember
    })
  }
  let mut class: TypeClass = type_.class.unwrap()
  let typeParameters: List<Type> =
    if typeParameters_.size() < class.parameterRange.end - 1 {
      typeParameters_->concat(
        class.typeParameters
          .skip(typeParameters_.size())
          .map(|p| {
            if let TypeKind::Parameter(parameter) = p.kind {
              parameter.defaultValue.unwrapOr(p)
            }
            else throw 'not a type parameter'
          })
          .toList()
      )
      .transmute()
    }
    else typeParameters_

  if let Option::Some(cachedInstance) = class.instances.find(|a| {
      let i = a.instance.unwrap()
      i.typeParameters.size() == typeParameters.size() and
      i.typeParameters.enumerate().all(|(i, p)| isSameType(p, typeParameters[i]))
    })
    then return cachedInstance

  let parameterMap = ObjectMap.fromIter(
    List.zip(typeParameters, class.typeParameters)
      .map(|(typeArgument, typeParameter)| (typeParameter.name.unwrap(), typeArgument)))

  let mut instance: Type = {
    definition: type_.definition
    id: type_.id
    displayName: type_.displayName
    name: type_.name
    kind: type_.kind
    class: None
    instance: Some({
      class: type_
      typeParameters
      parameterMap
    })
    providesType: type_.providesType
    enumMember: type_.enumMember
  }
  // Place the instance in the class before the instance is resolved
  // So that types with circles will use the cache and thus share the
  // type instance. Otherwise the resolver is stuck in an infinite loop.
  class.instances.push(instance)

  instance.kind = resolveTypeParameters(parameterMap)(type_)->kind.transmute()

  if let TypeKind::Enum(enum_) = instance.kind {
    enum_.members.forEach(|(_, mut member)| {
      member.enumMember = member.enumMember.map(|(member, _)| (member, instance))
    })
  }

  instance
}

export fn isSameId(to: Type, subject: Type) {
  match (to.id, subject.id) {
    (Some(toId), Some(subjectId)) => toId == subjectId
    _ => true
  }
}

fn bothHasId(to: Type, subject: Type) {
  to.id.isSome() and subject.id.isSome()
}

fn checkTypeParameters(to: Type, subject: Type) {
  if to.id.isNone() or subject.id.isNone() then return true

  match (to.typeParameters(), subject.typeParameters()) {
    (Some(toParameters), Some(subjectParameters)) => {
      if toParameters.size() == subjectParameters.size()
        then List.zip(toParameters, subjectParameters)
          .all(|(toParameter, subjectParameter)| isAssignable(toParameter, subjectParameter))
        else false
    }
    (Option::None, Option::None) => true
    _ => false
  }
}

export fn isAssignable(to: Type, subject: Type) -> Bool {
  _isAssignable(to, subject, Map.new())
}

fn _isAssignable(to: Type, subject: Type, mut checked: Map<Type, Set<Type>>) {
  if to and not subject {
    if let TypeKind::Trait(_) = to.kind then return false
  }
  if not subject or not to then return true
  if identical(to, subject) then return true

  if let Some(set) = checked.get(to) {
    // Avoids infinite loops
    // We can assume true becouse if not the check fails in the earlier step
    if set.has(subject) then return true
    let mut c = set
    c.add(subject)
  }
  else {
    let mut c = Set.new()
    c.add(subject)
    checked.set(to, c)
  }

  match subject.kind {
    TypeKind::Parameter => return true
    TypeKind::Enum(enum_) => if enum_.members.size() == 0 then return true
    _ => {}
  }

  match to.kind {
    TypeKind::Enum(toEnum) => match subject.kind {
      TypeKind::Enum(subjectEnum) => {
        isSameId(to, subject) and (
          bothHasId(to, subject) or
          isEnumAssignable(toEnum, subjectEnum, checked)
        ) and
        checkTypeParameters(to, subject)
      }
      _ => false
    }
    TypeKind::Function(toFunc) => match subject.kind {
      TypeKind::Function(subjectFunc) => isFunctionAssignable(toFunc, subjectFunc, checked)
      _ => false
    }
    TypeKind::Intersection(toIntersection) => {
      _isAssignable(toIntersection.baseType, subject, checked) and
      _isAssignable(toIntersection.intersectedTrait, subject, checked)
    }
    TypeKind::Parameter => true
    TypeKind::Struct(toStruct) => match subject.kind {
      TypeKind::Struct(subjectStruct) => {
        isSameId(to, subject) and (
          bothHasId(to, subject) or
          isStructAssignable(toStruct, subjectStruct, checked)
        ) and
        checkTypeParameters(to, subject)
      }
      TypeKind::Intersection(subjectIntersection) => {
        _isAssignable(to, subjectIntersection.baseType, checked)
      }
      _ => false
    }
    TypeKind::Trait => match subject.kind {
      TypeKind::Trait => {
        isSameId(to, subject) and
        checkTypeParameters(to, subject)
      }
      TypeKind::Enum(subjectEnum) => {
        subjectEnum.implementations.any(|implementation|
          _isAssignable(to, implementation.trait_, checked)
        )
      }
      TypeKind::Intersection(subjectIntersection) => {
        _isAssignable(to, subjectIntersection.baseType, checked) or
        _isAssignable(to, subjectIntersection.intersectedTrait, checked)
      }
      TypeKind::Struct(subjectStruct) => {
        subjectStruct.implementations.any(|implementation|
          _isAssignable(to, implementation.trait_, checked)
        )
      }
      _ => false
    }
  }
}

fn isEnumAssignable(to: Enum, subject: Enum, mut checked) {
  if to.members.size() == subject.members.size()
    then to.members.toList().all(|(name, toMember)|
      _isAssignable(toMember, subject.members[name], checked)
    )
    else return false
}

fn isFunctionAssignable(to: Function, subject: Function, mut checked) {
  if not to.parameterRange.isSubsetOf(subject.parameterRange)
    then return false

  if not to.parameters.enumerate().all(|(i, toArg)|
    _isAssignable(subject.parameters[i].type_, toArg.type_, checked)
  )
    then return false

  _isAssignable(to.returnType, subject.returnType, checked)
    or to.returnType.isEmpty()
}

fn isStructAssignable(to: Struct, subject: Struct, mut checked) {
  match (to.kind, subject.kind) {
    (StructKind::Record({properties: toProps}), StructKind::Record({properties: subjectProps})) => {
      toProps.toList().all(|(key, toProp)| {
        if subjectProps.has(key) and not subjectProps[key] {
          print('ket', (key, subjectProps))
        }
        if not toProp {
          print('toProp', (key, toProps))
        }
        if let Some(subjectProp) = subjectProps.get(key)
          then _isAssignable(toProp.type_, subjectProp.type_, checked)
          else toProp.optional
      })
    }
    (StructKind::Tuple({properties: toProps}), StructKind::Tuple({properties: subjectProps})) => {
      if toProps.size() != subjectProps.size() then return false
      List.zip(toProps, subjectProps)
        .all(|(toProp, subjectProp)| _isAssignable(toProp, subjectProp, checked))
    }
    (StructKind::Unit, StructKind::Unit) => identical(to->kind->value, subject->kind->value)
    _ => identical(to.kind, subject.kind)
  }
}

export fn isSameType(a: Type, b: Type) {
  match (a.id, b.id) {
    (Some(aId), Some(bId)) => {
      if aId != bId then return false

      match (a.typeParameters(), b.typeParameters()) {
        (Some(aParameters), Some(bParameters)) => {
          if aParameters.size() == bParameters.size()
            then List.zip(aParameters, bParameters)
              .all(|(aParameter, bParameter)| isSameType(aParameter, bParameter))
            else false
        }
        (Option::None, Option::None) => true
        _ => false
      }
    }
    _ => false
  }
}

export fn findCommonType(types: List<Type>) -> Result<Type, ()> {
  if types.isEmpty() then return Err(())

  let mut index = 0
  let mut commonType = types[0]

  while index < types.size() {
    let type_ = types[index]

    if not type_ or type_.isNever() {
      // Nothing
    }
    else if not commonType or commonType.isNever() {
      commonType = type_
    }
    else if commonType.isParameter() and not type_.isParameter() {
      commonType = type_
    }
    else if type_.isParameter() {
      // Nothing
    }
    else if let Some((commonId, typeId)) = commonType.id.andThen(|a| type_.id.map(|b| (a, b))) {
      if commonId != typeId then return Err(())

      match (commonType.typeParameters(), type_.typeParameters()) {
        (Some(c), Some(typeParameters)) => {
          let mut commonTypeParameters = c
          let mut index = 0
          while index < commonTypeParameters.size() {
            let commonParameter = commonTypeParameters[index]
            let typeParameter = typeParameters[index]

            match findCommonType([commonParameter, typeParameter]) {
              Ok(newCommonParameter) => {
                if not identical(newCommonParameter, commonParameter) {
                  if identical(commonTypeParameters, c) {
                    commonTypeParameters = c.skip(0).toList()
                  }
                  commonTypeParameters[index] = newCommonParameter
                }
              }
              Err(err) => return Err(err)
            }

            index += 1
          }

          if not identical(commonTypeParameters, c) {
            let mut class = commonType.instance.mapOr(commonType, |i| i.class)

            commonType = createTypeInstance(class, commonTypeParameters)
          }
        }
        (Option::None, Option::None) => {
          // Nothing, keep common as is
        }
        _ => panic('The same type both have and don\'t have type parameters')
      }
    }
    else if isAssignable(commonType, type_) {
      // Nothing, keep common as is
    }
    else if isAssignable(type_, commonType) {
      commonType = type_
    }
    // If the type is not assignable in either way
    else return Err(())

    index += 1
  }

  Ok(commonType)
}
