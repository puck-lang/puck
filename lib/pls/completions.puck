import 'node:vscode-languageserver' as {
  CompletionItemKind
}
import '../ast/ast.puck' as {
  Module
  TopLevelStatement
  BlockLevelStatement
  Expression

  ImplDeclaration
  ImplShorthandDeclaration
  TraitDeclaration

  ExportDirective
  ExportedStatement
  ImportDirective
  ObjectDestructure
  ObjectDestructureMember

  Block
  WhileLoop
  Identifier
  FunctionDeclaration
  MemberAccess
  TypeBound
  NamedTypeBound
}
import '../ast/span.puck' as {Position, Span, ToSpan}
import '../typeck/src/scope.puck' as {Scope}
import '../entities.puck' as {StructKind, Type, TypeKind}
import 'position_visitor.puck' as {PositionVisitor}
import 'position_visitor.puck' as visit

export type Completion {
  label: String
  kind: Num
  insertText: String
}

export type CompletionVisitor {
  position: Position
  completions: Option<List<Completion>>
  importedModule: Option<Module>
}

impl CompletionVisitor {
  fn new(position: Position) -> CompletionVisitor {{
    position
    completions: None
    importedModule: None
  }}
}

impl PositionVisitor for CompletionVisitor {
  fn position(self) -> Position {self.position}

  fn visitImplDeclaration(mut self, i: ImplDeclaration) -> () {
    if not visit.walkImplDeclaration(self, i) {
      let trait_ = i.trait_.getType()
      if trait_ {
        match trait_.kind {
          TypeKind::Trait(trait_) => {
            self.completions = Some(trait_.functions
              .toList()
              .map(|(name, type_): (String, Type)| {
                let function = type_.getFunction()
                let mut parameters = function.parameters
                  .map(|b| {
                    let typeName = b.type_.displayName()
                    let typed = b.name + ': $typeName'
                    if b.mutable
                      then 'mut $typed'
                      else typed
                  })
                  .toList()
                if let Some(selfBinding) = function.selfBinding {
                  if selfBinding.mutable
                    then parameters.lpush('mut self')
                    else parameters.lpush('self')
                }
                let parameters = parameters->join(', ')
                let returnType = function.returnType.displayName()
                let signature = '$name($parameters) -> $returnType'
                {
                  label: signature
                  kind: CompletionItemKind.Method
                  insertText: signature + ' '
                }
              })
              .toList()
            )
          }
          _ => {}
        }
      }
    }
  }

  fn visitImportDirective(mut self, i: ImportDirective) -> () {
    self.importedModule = i.module
    visit.walkImportDirective(self, i)
  }
  fn visitObjectDestructure(mut self, o: ObjectDestructure) -> () {
    if not visit.walkObjectDestructure(self, o) {
      print('CompletionVisitor visitObjectDestructure')
      self.completions = self.importedModule.map(getImportCompletions)
    }
  }
  fn visitObjectDestructureMember(mut self, m: ObjectDestructureMember) -> () {
    if m.property.span().cmp(self.position()) == Ordering::Equal {
      print('CompletionVisitor visitObjectDestructureMember')
      self.completions = self.importedModule.map(getImportCompletions)
    }
  }

  fn visitBlock(mut self, b: Block) -> () {
    if not visit.walkBlock(self, b) {
      print('CompletionVisitor visitBlock')
      self.completions = Some(getScopeCompletions(b))
    }
  }

  fn visitIdentifier(mut self, i: Identifier) -> () {
    print('CompletionVisitor visitIdentifier')
    self.completions = Some(getScopeCompletions(i))
  }

  fn visitMemberAccess(mut self, a: MemberAccess) -> () {
    if a.object.span().cmp(self.position()) == Ordering::Less {
      print('CompletionVisitor visitMemberAccess')
      let type_ = a.object.getType()
      if type_ {
        match type_.kind {
          TypeKind::Struct({kind: StructKind::Record(record)}) => {
            self.completions = Some(
              record.properties
                .toList()
                .map(|(property, type_): (String, Type)| {
                  let typeName = type_.displayName()
                  {
                    label: '$property: $typeName'
                    kind: CompletionItemKind.Text
                    insertText: property
                  }
                })
                .toList()
            )
          }
          _ => {}
        }
      }
    }
    else visit.walkMemberAccess(self, a)
  }
}

fn getImportCompletions(module: Module) -> List<Completion> {
  module.exports
    .values()
    .map(|e| {{
      label: e.identifier.name
      kind: CompletionItemKind.Text
      insertText: e.identifier.name
    }})
    .toList()
}

fn getScopeCompletions(node) -> List<Completion> {
  if node.scope {
    let scope: Scope = node.scope
    scope.getBindings()
      .values()
      .map(|binding| {
        let typeName =
          if not binding.type_
            then '??'
            else match binding.type_.kind {
              TypeKind::Function => binding.type_.verboseName()
              _ => binding.type_.displayName()
            }
        {
          label: binding.name + ': $typeName'
          kind: CompletionItemKind.Text
          insertText: binding.name
        }
      })
      .toList()
  }
  else []
}
