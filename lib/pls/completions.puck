import 'node:fs' as fs
import 'node:path' as path
import 'node:vscode-languageserver' as {
  CompletionItemKind
  InsertTextFormat
}
import '../ast/ast.puck' as {
  Module
  TopLevelStatement
  BlockLevelStatement
  Expression

  ImplDeclaration
  ImplShorthandDeclaration
  TraitDeclaration

  ExportDirective
  ExportedStatement
  ImportDirective
  ObjectDestructure
  ObjectDestructureMember

  Block
  WhileLoop
  Identifier
  FunctionDeclaration
  MemberAccess
  TupleIndexAccess
  TypeBound
  NamedTypeBound
  TypePath
}
import '../ast/span.puck' as {Position, Span, ToSpan}
import '../typeck/src/scope.puck' as {Scope}
import '../typeck/import_visitor.puck' as {puckFile, puckModules}
import '../entities.puck' as {File, StructKind, Trait, Type, TypeKind}
import 'position_visitor.puck' as {PositionVisitor}
import 'position_visitor.puck' as visit

export type Completion {
  label: String
  kind: Num
  insertText: String
  insertTextFormat: Num
}

let isHidden = RegExp.new('^\\.')

export type CompletionVisitor {
  file: File
  position: Position
  completions: Option<List<Completion>>
  importedModule: Option<Module>
  inTraitImpl: Option<Trait>
  inType: Option<Type>
}

impl CompletionVisitor {
  fn new(file: File, position: Position) -> CompletionVisitor {{
    file
    position
    completions: None
    importedModule: None
    inTraitImpl: None
    inType: None
  }}
}

impl PositionVisitor for CompletionVisitor {
  fn position(self) -> Position {self.position}

  fn visitImplDeclaration(mut self, i: ImplDeclaration) -> () {
    print('CompletionVisitor visitImplDeclaration')
    let trait_ = i.trait_.getType()
    if trait_ {
      match trait_.kind {
        TypeKind::Trait(trait_) => {
          self.inTraitImpl = Some(trait_)
        }
        _ => {}
      }
    }
    if not visit.walkImplDeclaration(self, i) {
      print('CompletionVisitor not visit.walkImplDeclara')
      self.completions = self.inTraitImpl.map(getTraitImplCompletions)
    }
  }

  fn visitImportDirective(mut self, i: ImportDirective) -> () {
    self.importedModule = i.module
    if identical(i.locator.span().cmp(self.position), Ordering::Equal) {
      if let Some(domain) = i.domain {
        if domain == 'puck' {
          self.completions = Some(
            puckModules.map(|module| {{
              label: 'puck:$module'
              kind: CompletionItemKind.Module
              insertText: module
              insertTextFormat: InsertTextFormat.PlainText
            }})
            .toList()
          )
        }
      }
      else {
        let fileDirname: String = path->dirname(self.file.absolutePath).transmute()
        let resolved: String = path->resolve(fileDirname, i.path).transmute()

        let exists = fs->existsSync(resolved)
        let isTypedDirectory = exists and fs->statSync(resolved)->isDirectory()
        if exists and not isTypedDirectory
          then return ()

        let dirname: String =
          if isTypedDirectory
            then resolved
            else path->dirname(resolved).transmute()

        if not fs->existsSync(dirname) or not fs->statSync(dirname)->isDirectory()
          then return ()

        let mut files: List<String> = fs->readdirSync(dirname).transmute()

        self.completions = Some(
          files.filterMap(|fileName| {
            if isHidden.test(fileName) then return None

            let file: String = path->join(dirname, fileName).transmute()
            let isDirectory: Bool = fs->statSync(file)->isDirectory().transmute()
            let relativePath: String = path->relative(fileDirname, file).transmute()

            let isPuckFile = puckFile.test(fileName)
            let createAs = isPuckFile and i.asKeyword.span.end.line == 0

            let typedDir =
              if isTypedDirectory
                then i.path
                else path->dirname(i.path).transmute()
            let filterText: String = path->join(typedDir, fileName).transmute()
            let filterText =
              if createAs
                then "'$filterText' as "
                else filterText
            let insertText =
              if createAs
                then "'$relativePath' as "
                else relativePath

            let startOffset = if createAs then 1 else 0
            let endOffset = if createAs then 1 else 2
            let range = {
              start: {
                line: i.locator.span().start.line - 1
                character: i.locator.span().start.column - startOffset
              }
              end: {
                line: i.locator.span().end.line - 1
                character: i.locator.span().end.column - endOffset
              }
            }

            Some({
              label: fileName
              kind:
                if isPuckFile then CompletionItemKind.Module
                else if isDirectory then CompletionItemKind.Class
                else CompletionItemKind.File
              filterText
              insertText
              insertTextFormat: InsertTextFormat.PlainText
              textEdit: {
                range
                newText: insertText
              }
              sortText:
                if isPuckFile then '1$fileName'
                else if isDirectory then '2$fileName'
                else '3$fileName'
            })
          })
          .toList()
        )
      }
    }
    else visit.walkImportDirective(self, i)
  }
  fn visitObjectDestructure(mut self, o: ObjectDestructure) -> () {
    if not visit.walkObjectDestructure(self, o) {
      print('CompletionVisitor visitObjectDestructure')
      self.completions = self.importedModule.map(getImportCompletions)
    }
  }
  fn visitObjectDestructureMember(mut self, m: ObjectDestructureMember) -> () {
    if identical(m.property.span().cmp(self.position()), Ordering::Equal) {
      print('CompletionVisitor visitObjectDestructureMember')
      self.completions = self.importedModule.map(getImportCompletions)
    }
  }

  fn visitBlock(mut self, b: Block) -> () {
    if not visit.walkBlock(self, b) {
      print('CompletionVisitor visitBlock')
      self.completions = Some(getScopeCompletions(b))
    }
  }

  fn visitIdentifier(mut self, i: Identifier) -> () {
    print('CompletionVisitor visitIdentifier')
    self.completions = Some(getScopeCompletions(i))
  }

  fn visitFunctionDeclaration(mut self, f: FunctionDeclaration) -> () {
    if let Some(name) = f.name {
      if identical(name.span.cmp(self.position), Ordering::Equal) {
        return ()
      }
    }
    visit.walkFunctionDeclaration(self, f)
  }

  fn visitMethodDeclaration(mut self, f: FunctionDeclaration) -> () {
    if let Some(name) = f.name {
      if identical(name.span.cmp(self.position), Ordering::Equal) {
        self.completions = self.inTraitImpl.map(getTraitImplCompletions)
        return ()
      }
    }
    self.inTraitImpl = None
    visit.walkFunctionDeclaration(self, f)
  }

  fn visitMemberAccess(mut self, a: MemberAccess) -> () {
    if identical(a.object.span().cmp(self.position()), Ordering::Less) {
      print('CompletionVisitor visitMemberAccess')
      let type_ = a.object.getType()
      if type_ {
        match type_.kind {
          TypeKind::Struct({kind: StructKind::Record(record)}) => {
            self.completions = Some(
              record.properties
                .toList()
                .map(|(property, {type_})| {
                  let typeName = type_.displayName()
                  {
                    label: '$property: $typeName'
                    kind: CompletionItemKind.Field
                    insertText: property
                    insertTextFormat: InsertTextFormat.PlainText
                  }
                })
                .toList()
            )
          }
          _ => {}
        }
      }
    }
    else visit.walkMemberAccess(self, a)
  }
  fn visitTupleIndexAccess(mut self, a: TupleIndexAccess) -> () {
    if identical(a.object.span().cmp(self.position()), Ordering::Less) {
      print('CompletionVisitor visitTupleIndexAccess')
      let type_ = a.object.getType()
      if type_ {
        match type_.kind {
          TypeKind::Struct({kind: StructKind::Tuple(tuple)}) => {
            self.completions = Some(
              tuple.properties
                .enumerate()
                .map(|(index, type_)| {
                  let typeName = type_.displayName()
                  {
                    label: '$index: $typeName'
                    kind: CompletionItemKind.Field
                    insertText: '$index'
                    insertTextFormat: InsertTextFormat.PlainText
                  }
                })
                .toList()
            )
          }
          _ => {}
        }
      }
    }
    else visit.walkTupleIndexAccess(self, a)
  }
}

fn getImportCompletions(module: Module) -> List<Completion> {
  module.exports
    .values()
    .map(|e| {{
      label: e.identifier.name
      kind: CompletionItemKind.Text
      insertText: e.identifier.name
      insertTextFormat: InsertTextFormat.PlainText
    }})
    .toList()
}

fn getScopeCompletions(node) -> List<Completion> {
  if node.scope {
    let scope: Scope = node.scope
    scope.getBindings()
      .values()
      .map(|binding| {
        let typeName =
          if not binding.type_
            then '??'
            else match binding.type_.kind {
              TypeKind::Function => binding.type_.verboseName()
              _ => binding.type_.displayName()
            }
        {
          label: binding.name ++ ': $typeName'
          kind: CompletionItemKind.Text
          insertText: binding.name
          insertTextFormat: InsertTextFormat.PlainText
        }
      })
      .toList()
  }
  else []
}

fn getTraitImplCompletions(trait_: Trait) {
  trait_.functions
    .toList()
    .map(|(name, type_): (String, Type)| {
      let signature = name ++ type_.verboseName()
      {
        label: signature
        kind: CompletionItemKind.Method
        insertText: '$signature {$0}'
        insertTextFormat: InsertTextFormat.Snippet
      }
    })
    .toList()
}
