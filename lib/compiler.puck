import 'node:babel-core' as babel
import 'node:fs' as fs
import 'node:path' as path
import 'compiler/emitter.js' as {emitProgram}
import 'compiler/input_stream.js' as {InputStream}
import 'compiler/parser.js' as {parse}
import 'compiler/token_stream.js' as {TokenStream}
import 'helpers.js' as {cmd}
import 'typeck/scope.js' as {ScopeVisitor}

type File = {
  file: String
  outDir: String
  outFile: String
}

export fn buildString(puck, file) {
  let mut ast = parse(TokenStream(InputStream(puck, file)))
  ScopeVisitor().visitBlock(ast)
  emitProgram(ast)
}

export fn build(files: Array<File>) {
  let files = files.map(|f| {
    let file = path.normalize(f.file)
    let outFile = path.normalize(f.outFile)
    let outDir = path.dirname(outFile)

    {file, outFile, outDir}
  })

  files.forEach(|f| {
    f.puck = fs.readFileSync(f.file, {encoding: 'utf-8'})
    f.js = buildString(f.puck, f.file)
  })

  files.forEach(|f| {
    f.babel = babel.transform(f.js, {
      filename: f.file
      presets: 'latest'
      babelrc: false
    }).code
  })

  files.forEach(|f| {
    let outDir = f.outDir
    let outFile = f.outFile
    cmd('mkdir -p $outDir')

    fs.writeFileSync('$outFile', f.babel + '\n', {mode: 511}) // 511 = 0o777
  })
}
