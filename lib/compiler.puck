import 'puck:js' as {Error, Object, asResult, console, require, undefined, typeof}
import 'node:babel-core' as babel
import 'node:fs' as fs
import 'node:path' as path
import 'node:util' as {inspect}
import 'ast/span.puck' as {ToSpan}
import 'compiler/emitter.ts' as {Emitter}
import 'compiler/input_stream.puck' as {InputStream}
import 'compiler/parser.puck' as {parse}
import 'compiler/token_stream.puck' as {TokenStream}
import 'helpers.puck' as {cmd}
import 'typeck/impl_visitor.puck' as {ImplVisitor}
import 'typeck/import_visitor.puck' as {ImportVisitor}
import 'typeck/scope_visitor.puck' as {ScopeVisitor}
import 'typeck/top_level_visitor.puck' as {TopLevelVisitor}
import 'typeck/type_visitor.puck' as {TypeVisitor}
import 'entities.puck' as {BuildFile, CompilationError, File}

fn fileInspect(self, depth, opts) {
  inspect(
    Object->assign({}, self, {puck: '[hidden]', ast: '[hidden]', js: '[hidden]', inspect: undefined})
    Object->assign({}, opts, {depth: opts.depth - depth})
  )
}

export fn parseString(mut context, file: File, recoverFromSyntaxErrors = false) {
  let mut ast = parse(TokenStream.new(InputStream.new(context, file)), file, recoverFromSyntaxErrors)
  TopLevelVisitor(context, file)->visitModule(ast)
  ImportVisitor(context, file)->visitModule(ast)
  ast
}

export fn compile(context, file: File) -> String {
  Emitter(context, file).emitModule(file.ast.unwrap(), file.isBin)
}

fn babelTransform(file: File) -> String {
  babel
    ->transform(file.js.unwrap(), {
      filename: file.absolutePath
      presets: require->resolve('babel-preset-latest')
      babelrc: false
    })
    ->code.transmute()
}

fn dumpFiles(files: List<File>, prop: String) {
  files.forEach(|file| {
    print('')
    print(file.absolutePath)
    let data = match file->[prop].asString() {
      Some(data) => data
      None => inspect(file->[prop], {colors: false, depth: 25})
    }
    print(data.split('\n').map(|line| '  $line')->join('\n'))
  })
}

export type CompilerContext {
  projectPath: String
  impls: Map<String, Num>
  files: Map<String, File>
  deferred: Map<String, List<() -> ()>>
  onFileParsed: (File) -> ()
  onReportError: (File, ToSpan, CompilationError) -> ()
}

impl CompilerContext {
  fn new(projectPath: String, onReportError: (File, ToSpan, CompilationError) -> (), onFileParsed = |_: File| {}) -> CompilerContext {{
    projectPath
    impls: Map.new()
    files: Map.new()
    deferred: Map.new()
    onFileParsed
    onReportError
  }}

  fn runTypeVisitor(mut self) -> () {
    self.files.values()
      .forEach(|mut file| {
        if not file->typeVisitorStarted and file.ast.isSome() {
          file->typeVisitorStarted = true
          TypeVisitor(self, file)->visitModule(file.ast.unwrap())
          file->typeVisitorCompleted = true
        }
      })
  }

  fn runImplVisitor(mut self) -> () {
    self.files.values()
      .forEach(|mut file| {
        if not file->implVisitorStarted and file.ast.isSome() {
          file->implVisitorStarted = true
          ImplVisitor(self, file)->visitModule(file.ast.unwrap())
        }
      })
  }

  fn runChecker(mut self) -> () {
    self.files.values()
      .forEach(|mut file| {
        if not file->scopeVisitorStarted and file.ast.isSome() {
          file->scopeVisitorStarted = true
          ScopeVisitor(self, file)->visitModule(file.ast.unwrap())
        }
      })
  }

  fn runTypeVisitorOnFile(mut self, mut file: File) -> () {
    if not file->typeVisitorStarted {
      file->typeVisitorStarted = true
      TypeVisitor(self, file)->visitModule(file.ast.unwrap())
    }
  }

  fn runImplVisitorOnFile(mut self, mut file: File) -> () {
    if not file->typeVisitorStarted {
      self.runTypeVisitorOnFile(file)
    }
    if file->implVisitorStarted {
      throw Error('runImplVisitorOnFile??')
    }
    file->implVisitorStarted = true
    ImplVisitor(self, file)->visitModule(file.ast.unwrap())
  }

  fn runCheckerOnFile(mut self, mut file: File) -> () {
    if not file->implVisitorStarted {
      self.runImplVisitorOnFile(file)
    }
    if not file->scopeVisitorStarted {
      file->scopeVisitorStarted = true
      ScopeVisitor(self, file)->visitModule(file.ast.unwrap())
    }
  }

  fn defer(mut self, file, func) -> () {
    self.deferred.entry(file.absolutePath)
      .orInsert([])
      .push(func)
  }

  fn resolvePath(file: String, relativeTo) -> File {
    let filePath =
      if file.startsWith('/')
        then file
        else path->join(path->dirname(relativeTo.absolutePath), file).transmute()

    let absolutePath = fs->realpathSync(path->resolve(path->normalize(filePath))).transmute::<String>()
    let fileName = path->basename(absolutePath).transmute::<String>()

    {
      isBin: false
      fileName
      absolutePath
      puck: ''

      outFile: None
      ast: None
      js: None
    }
  }

  fn importFile(mut self, mut file: File, force = false, recoverFromSyntaxErrors = false) -> File {
    if let Some(outFile) = file.outFile {
      if let Some(mut existingFile) = self.files.get(file.absolutePath) {
        existingFile.outFile = Some(outFile)
      }
    }

    if force or not self.files.has(file.absolutePath) {
      self.files.set(file.absolutePath, file)

      if not file.puck
        then file.puck = fs->readFileSync(file.absolutePath, {encoding: 'utf-8'}).transmute()
      file.ast = Some(parseString(self, file, recoverFromSyntaxErrors))
      self.onFileParsed(file)

      if let Some(callbacks) = self.deferred.get(file.absolutePath) {
        self.deferred.delete(file.absolutePath)
        callbacks->forEach(|callback| callback())
      }
      file
    }
    else self.files[file.absolutePath]
  }

  fn reportError(self, file: File, token: ToSpan, error: CompilationError) -> () {
    self.onReportError(file, token, error)
  }
}

export fn buildString(code: String, filePath: String, projectPath: String, options: {useBabel: Bool} = {useBabel: false}) -> Result<File, {}> {
  asResult(|| {
    fn reportError(self, file: File, token: ToSpan, error: CompilationError) {
      let {line, column} = token.span().start
      throw Error(error.message() + '\n  in ' + file.absolutePath + ' ($line:$column)')
    }
    let mut context = CompilerContext.new(projectPath, reportError)
    let mut file = context.importFile({
      isBin: false
      fileName: path->basename(filePath).transmute()
      absolutePath: fs->realpathSync(path->resolve(path->normalize(filePath))).transmute()
      puck: code

      outFile: None
      ast: None
      js: None
    })

    context.runTypeVisitor()
    context.runImplVisitor()
    context.runChecker()
    file.js = Some(compile(context, file))
    if options.useBabel {
      file.js = Some(babelTransform(file))
    }

    file
  })
}

export fn build(files: List<BuildFile>, mut context: CompilerContext, options: {dump: String, useBabel: Bool} = {dump: '', useBabel: false}) {
  let dump = options.dump

  let mut files = files.map(|f| {
    let fileName = path->basename(f.file).transmute()
    let absolutePath = fs->realpathSync(path->resolve(path->normalize(f.file))).transmute()
    let outFile = Some(path->normalize(f.outFile).transmute())

    {
      isBin: f.isBin
      fileName
      absolutePath
      outFile
      inspect: fileInspect

      puck: ''
      ast: None
      js: None
    }
  })

  let files = files.map(|mut f| context.importFile(f)).toList()

  if dump == 'ast' {
    dumpFiles(files, 'ast')
    return undefined
  }

  context.runTypeVisitor()

  if dump == 'typed-ast' {
    dumpFiles(files, 'ast')
    return undefined
  }

  context.runImplVisitor()

  if dump == 'impl-ast' {
    dumpFiles(files, 'ast')
    return undefined
  }

  context.runChecker()

  if dump == 'checked-ast' {
    dumpFiles(files, 'ast')
    return undefined
  }

  files.forEach(|mut file| {
    file.js = Some(compile(context, file))
  })

  if dump == 'js' {
    dumpFiles(files, 'js')
    return undefined
  }

  if options.useBabel {
    files.forEach(|mut file| {
      file.js = Some(babelTransform(file))
    })
  }

  files.forEach(|f| {
    let outFile = f.outFile.unwrap()
    let outDir = path->dirname(outFile)
    cmd('mkdir -p $outDir')
    let code = f.js.unwrap()
    fs->writeFileSync('$outFile', '$code\n', {mode: Num.parseInt('777', Radix::Octal).unwrap()})
  })
}
