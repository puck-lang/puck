import 'node:fs' as fs
import 'node:path' as path
import 'compiler/emitter.js' as {emitProgram}
import 'compiler/input_stream.js' as {InputStream}
import 'compiler/parser.js' as {parse}
import 'compiler/token_stream.js' as {TokenStream}
import 'helpers.js' as {cmd}
import 'typeck/scope.js' as {ScopeVisitor}

export fn buildString(puck, file) {
  let mut ast = parse(TokenStream(InputStream(puck, file)))
  ScopeVisitor().visitBlock(ast)
  emitProgram(ast)
}

export fn build(mut file, mut outFile) {
  file = path.normalize(file)
  outFile = path.normalize(outFile)
  let outDir = path.dirname(outFile)
  let puck = fs.readFileSync(file, {encoding: 'utf-8'})
  let js = buildString(puck, file)
  cmd('mkdir -p $outDir')
  fs.writeFileSync('$outFile.tmp', js)
  cmd('babel $outFile.tmp --out-file $outFile && chmod +x $outFile')
  fs.unlinkSync('$outFile.tmp')
}
