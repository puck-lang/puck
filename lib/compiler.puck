import 'node:babel-core' as babel
import 'node:fs' as fs
import 'node:path' as path
import 'compiler/emitter.ts' as {Emitter}
import 'compiler/input_stream.puck' as {InputStream}
import 'compiler/parser.puck' as {parse}
import 'compiler/token_stream.puck' as {TokenStream}
import 'stdlib/js.puck' as {console, typeof}
import 'helpers.puck' as {cmd}
import 'typeck/import.puck' as {ImportVisitor}
import 'typeck/scope.puck' as {ScopeVisitor}

type File = {
  file: String
  outDir: String
  outFile: String
}

export fn buildString(context, puck, file) {
  let mut ast = parse(TokenStream(InputStream(puck, file)))
  ImportVisitor(context, file).visitBlock(ast)
  ScopeVisitor(context, file).visitBlock(ast)
  Emitter().emitProgram(ast)
}

export fn build(files: Array<File>) {
  let files = files.map(|f| {
    let file = path.resolve(path.normalize(f.file))
    let outFile = path.normalize(f.outFile)
    let outDir = path.dirname(outFile)

    {file, outFile, outDir}
  })

  let context = {
    files: {}
    resolvePath: fn (file, relativeTo) {
      path.resolve(path.normalize(path.join(path.dirname(relativeTo), file)))
    }
    importFile: fn (self, mut file) {
      if typeof(file) == 'string'
        then file = {file}
      else if self.files[file.file] {
        self.files[file.file].outDir = file.outDir
        self.files[file.file].outFile = file.outFile
      }

      if not self.files[file.file] {
        file.puck = fs.readFileSync(file.file, {encoding: 'utf-8'})
        file.js = buildString(context, file.puck, file.file)

        self.files[file.file] = file
      }
      self.files[file.file]
    }
    reportError: fn (file, token, message) {
      throw '$message in $file'
    }
  }

  let files = files.map(|f| context.importFile(f))

  files.forEach(|f| {
    f.babel = babel.transform(f.js, {
      filename: f.file
      presets: 'latest'
      babelrc: false
    }).code
  })

  files.forEach(|f| {
    let outDir = f.outDir
    let outFile = f.outFile
    cmd('mkdir -p $outDir')

    fs.writeFileSync('$outFile', f.babel + '\n', {mode: 511}) // 511 = 0o777
  })
}
