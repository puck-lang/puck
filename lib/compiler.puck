let fs = require('fs')
let path = require('path')
let InputStream = require('./compiler/input_stream').InputStream
let TokenStream = require('./compiler/token_stream').TokenStream
let parse = require('./compiler/parser').parse
let emitProgram = require('./compiler/emitter').emitProgram
let cmd = require('./helpers').cmd
let scopeVisitor = require('./typeck/scope').scopeVisitor

export fn buildString(puck, file) {
  let mut ast = parse(TokenStream(InputStream(puck, file)))
  scopeVisitor.visitBlock(ast)
  emitProgram(ast)
}

export fn build(mut file, mut outFile) {
  file = path.normalize(file)
  outFile = path.normalize(outFile)
  let outDir = path.dirname(outFile)
  let puck = fs.readFileSync(file, {encoding: 'utf-8'})
  let js = buildString(puck, file)
  cmd('mkdir -p $outDir')
  fs.writeFileSync('$outFile.tmp', js)
  cmd('babel $outFile.tmp --out-file $outFile && chmod +x $outFile')
  fs.unlinkSync('$outFile.tmp')
}
