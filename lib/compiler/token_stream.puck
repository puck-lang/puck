import 'puck:js' as {global, null}
import '../ast/ast.puck' as {
  Comment
  Identifier
  NumberLiteral
  StringLiteral
  StringLiteralPart
}
import '../ast/token.puck' as {SyntaxKind, SimpleToken, Token, operators}
import '../ast/span.puck' as {Span}
import 'input_stream.puck' as {InputStream}

let longestOperator: Num = operators->reduce(|longest: Num, curr: String| {
  if curr.size() > longest
    then curr.size()
    else longest
}, 0).transmute()

fn isDummy(token: Token) -> Bool {
  match token {
    Token::SimpleToken({kind: SyntaxKind::NewlineToken}) => true
    Token::Comment => true
    _ => false
  }
}

fn isDigit(ch) {
  RegExp.new('^[0-9]$').test(ch)
}

fn isIdStart(ch) {
  RegExp.new('^[a-z_]$', 'i').test(ch)
}

fn isId(ch) {
  isIdStart(ch) or isDigit(ch)
}

fn isNewline(ch) {
  ch == '\n'
}

fn isWhitespace(ch) {
  ch == ' '
}

fn isWhitespaceOrNewline(ch) {
  isNewline(ch) or isWhitespace(ch)
}

export type TokenStream {
  input: InputStream
  current: Option<Token>
  currentDummy: Option<Token>
  inImport: Bool
}

impl TokenStream {
  fn new(mut input: InputStream) -> TokenStream {{
    input
    current: None
    currentDummy: None
    inImport: false
  }}

  fn peek(mut self, returnDummy = false) -> Token {
    if returnDummy {
      if let Some(token) = self.currentDummy then return token
    }
    if let Some(token) = self.current {
      if not isDummy(token)
        then return token
        else {
          self.currentDummy = self.current
          if returnDummy then return token
        }
    }

    let mut token = self._readNext()
    self.current = Some(token)

    while isDummy(token) and not returnDummy {
      token = self._readNext()
      self.currentDummy = self.current
      self.current = Some(token)
    }

    token
  }

  fn next(mut self, returnDummy = false) -> Token {
    if let Some(token) = self.currentDummy {
      self.currentDummy = None

      if returnDummy then return token
    }
    if let Some(token) = self.current {
      self.current = None

      if not isDummy(token) or returnDummy then return token
    }

    let mut token = self._readNext()

    while isDummy(token) and not returnDummy {
      token = self._readNext()
    }

    token
  }

  fn eof(mut self) -> Bool {
    match self.peek() {
      Token::SimpleToken({kind: SyntaxKind::EndOfFileToken}) => true
      _ => false
    }
  }

  fn croak(self, reason: String) -> Never {
    self.input.croak(reason)
  }

  fn _tryParseOperator(mut self) -> Option<SimpleToken> {
    let mut length = 0
    let mut searchString = ''
    let mut found

    while length < longestOperator {
      let ch = self.input.peek(length)
      if isWhitespaceOrNewline(ch) then break
      searchString += ch

      let hasMatches = operators
        .filter(|token| {
          if token.size() < length
            then false
            else token->substr(0, length + 1) == searchString
        })
        .toList()
        .size() > 0

      if hasMatches {
        length += 1
        found = searchString
      }
      else break
    }

    SyntaxKind.fromText(found).map(|kind| {
      let start = self.input.position()
      let mut i = 0
      while i < length {
        self.input.next()
        i += 1
      }
      let end = self.input.position()

      {kind, span: {start, end}}
    })
  }

  fn _readWhile(mut self, predicate) -> String {
    let mut str = ''
    while not self.input.eof() and predicate(self.input.peek()) {
      str += self.input.next()
    }
    str
  }

  fn _readNumber(mut self) -> NumberLiteral {
    let mut hasDot = false
    let start = self.input.position()
    let number = self._readWhile(fn (ch) {
      if ch == '.' {
        if hasDot or not isDigit(self.input.peek(1))
          then false
          else {
            hasDot = true
            true
          }
      }
      else isDigit(ch)
    })
    let end = self.input.position()
    let span = {start, end}

    {value: Num.parse(number).unwrap(), span: {start, end}}
  }

  fn _readIdentifier(mut self) -> Identifier {
    let start = self.input.position()
    let id = self._readWhile(isId)
    let end = self.input.position()
    {
      name: id
      span: {start, end}
    }
  }

  fn _readIdentifierOrKeyword(mut self) -> Token {
    let start = self.input.position()
    let id = self._readWhile(isId)
    let end = self.input.position()
    let span = {start, end}
    if id == 'import' {
      self.inImport = true
      Token::SimpleToken({kind: SyntaxKind::ImportKeyword, span})
    }
    else if id == 'as' {
      self.inImport = false
      Token::SimpleToken({kind: SyntaxKind::AsKeyword, span})
    }
    else if let Some(kind) = SyntaxKind.fromText(id) {
      Token::SimpleToken({kind, span})
    }
    else Token::Identifier({name: id, span})
  }

  fn _readString(mut self) -> StringLiteral {
    let mut escaped = false
    let mut parts = []
    let mut str = ''

    let mut start = self.input.position()
    let delimiter = self.input.next()

    while not self.input.eof() {
      let ch = self.input.next()
      if escaped {
        if ch == '$' then str += '$'
        else if ch == 'n' then str += '\n'
        else if ch == 'r' then str += '\r'
        else if ch == 't' then str += '\t'
        else if ch == '\'' then str += '\''
        else if ch == '\"' then str += '\"'
        else if ch == '\\' then str += '\\'
        else if ch == '\n' then null
        else self.input.croak('Invalid escape character $ch')
        escaped = false
      }
      else if ch == '\\' then escaped = true
      else if ch == '$' and isIdStart(self.input.peek()) and not self.inImport {
        let end = self.input.position()
        parts.push(StringLiteralPart::Literal({span: {start, end}, value: str}))
        parts.push(StringLiteralPart::Identifier(self._readIdentifier()))
        str = ''
        start = self.input.position()
      }
      else if ch == delimiter then break
      else str += ch
    }
    let end = self.input.position()
    parts.push(StringLiteralPart::Literal({span: {start, end}, value: str}))

    {parts}
  }

  fn _readComment(mut self) -> Comment {
    let start = self.input.position()
    self.input.next()
    self.input.next()
    self._readWhile(isWhitespace)
    let comment = self._readWhile(|ch| ch != '\n')
    self.input.next()
    let end = self.input.position()

    {
      text: comment
      span: {start, end}
    }
  }

  fn _readNext(mut self) -> Token {
    self._readWhile(isWhitespace)
    if self.input.eof() {
      let position = self.input.position()
      Token::SimpleToken({kind: SyntaxKind::EndOfFileToken, span: {start: position, end: position}})
    }
    else {
      let ch = self.input.peek()
      if isNewline(ch) {
        let start = self.input.position()
        self.input.next()
        let end = self.input.position()
        Token::SimpleToken({kind: SyntaxKind::NewlineToken, span: {start, end}})
      }
      else if ch == '/' and self.input.peek(1) == '/' then Token::Comment(self._readComment())
      else if ch == '\'' or ch == '"' then Token::StringLiteral(self._readString())
      else if isDigit(ch) then Token::NumberLiteral(self._readNumber())
      else if isIdStart(ch) then self._readIdentifierOrKeyword()
      else if let Some(operator) = self._tryParseOperator()
        then Token::SimpleToken(operator)
        else self.input.croak('Unexpected token: $ch')
    }
  }
}
