import 'puck:js' as {Error, console, process, typeof}
import '../ast/span.puck' as {Position, Span, ToSpan}
import '../entities.puck' as {CompilationError, File}
import '../compiler.puck' as {CompilerContext}

export type InputStream {
  context: CompilerContext
  file: File
  code: String
  pos: Num
  line: Num
  column: Num
}

impl InputStream {
  fn new(context: CompilerContext, file: File) -> InputStream {{
    context
    file
    code:
      if file.puck.startsWith('//#![no_core]')
        then '\n' ++ file.puck->slice(13).transmute::<String>()
        else "import 'puck:core' as *\n" ++ file.puck
    pos: 0
    line: 0
    column: 0
  }}

  fn position(self) -> Position {{line: self.line, column: self.column}}

  fn next(mut self) -> String {
    if self.code.size() <= self.pos
      then return ''

    let ch = self.code[self.pos]
    self.pos += 1
    if ch == '\n' {
      self.line += 1
      self.column = 1
    }
    else {
      self.column += 1
    }
    ch
  }

  fn peek(self, distance: Num = 0) -> String {
    if self.code.size() <= self.pos + distance
      then ''
      else self.code[self.pos + distance]
  }

  fn eof(self) -> Bool {
    self.peek() == ''
  }

  fn croak(self, message: String) -> Never {
    let span: Span = {
      start: {line: self.line, column: self.column}
      end: {line: self.line, column: self.column + 1}
    }
    let token: ToSpan = span
    self.context.reportError(self.file, token, CompilationError::Other(message))
    panic('Syntax Error')
  }
}
