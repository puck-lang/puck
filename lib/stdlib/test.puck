import 'puck:js' as {RegExp, global}

export type ExpectationObject {
  toBe: ({}) -> ()
  toEqual: ({}) -> ()

  toHaveBeenCalled: () -> ()
  toHaveBeenCalledTimes: (Num) -> ()
  toBeCloseTo: (Num, Num) -> ()

  toBeGreaterThan: (Num) -> ()
  toBeGreaterThanOrEqual: (Num) -> ()
  toBeLessThan: (Num) -> ()
  toBeLessThanOrEqual: (Num) -> ()

  toContain: ({}) -> ()
  toHaveLength: (Num) -> ()

  // toMatch: (RegExp) -> ()
  toMatchObject: ({}) -> ()
  toMatchSnapshot: () -> ()
  toThrow: () -> ()
  toThrowErrorMatchingSnapshot: () -> ()
}

export let expect: ({}) -> ExpectationObject = global.expect

export fn describe(message: String, group: () -> ()) -> () {
  global.describe(message, group)
}
export fn ddescribe(message: String, group: () -> ()) -> () {
  global.describe.only(message, group)
}
export fn xdescribe(message: String, group: () -> ()) -> () {
  global.describe.skip(message, group)
}

export fn it(message: String, test: () -> ()) -> () {
  global.it(message, test)
}
export fn iit(message: String, test: () -> ()) -> () {
  global.it.only(message, test)
}
export fn xit(message: String, test: () -> ()) -> () {
  global.it.skip(message, test)
}
