import 'puck:test' as *

fn any(a) {a}

describe('core', || {
  describe('String', || {
    describe('contains', || {
      it('should return true if the string contains the substring', || {
        expect('abcdefg'.contains('abc')).toBe(true)
        expect('abcdefg'.contains('efg')).toBe(true)
        expect('abcdefg'.contains('cde')).toBe(true)
        expect('abcdefg'.contains('c')).toBe(true)
        expect('abcdefg'.contains('abcdefg')).toBe(true)
      })

      it('should return false if the string does not contain the substring', || {
        expect('abcdefg'.contains('cba')).toBe(false)
        expect('abcdefg'.contains('efgh')).toBe(false)
        expect('abcdefg'.contains('ced')).toBe(false)
        expect('abcdefg'.contains('h')).toBe(false)
        expect('abcdefg'.contains('abcdefgh')).toBe(false)
      })
    })
  })

  describe('Option', || {
    describe('isJust', || {
      it('should return true if Some(value)', || {
        expect(Some(1).isJust()).toBe(true)
      })

      it('should return false if None', || {
        expect(None.isJust()).toBe(false)
      })
    })

    describe('isNothing', || {
      it('should return false if Some(value)', || {
        expect(Some(1).isNothing()).toBe(false)
      })

      it('should return true if None', || {
        expect(None.isNothing()).toBe(true)
      })
    })

    describe('andThen', || {
      it('should map the value if Some(value) and returns Some(newValue)', || {
        expect(any(Some(1).andThen(|value| Some(value + value)))).toEqual(any(Some(2)))
      })

      it('should not call the map function if None', || {
        expect(any(None.andThen(|value| expect('andThen').toBe('not called')))).toEqual(any(None))
      })

      it('should return None if Some(value) and returns None', || {
        expect(any(Some(1).andThen(|value| None))).toEqual(any(None))
      })
    })

    describe('map', || {
      it('should map the value if Some(value)', || {
        expect(any(Some(1).map(|value| value + value))).toEqual(any(Some(2)))
        expect(Some(2).map(|value| value + value).unwrap()).toBe(4)
      })

      it('should not call the map function if None', || {
        expect(any(None.map(|value| expect('map').toBe('not called')))).toEqual(any(None))
      })
    })

    describe('mapOr', || {
      it('should map the value if Some(value)', || {
        expect(any(Some(1).mapOr(5, |value| value + value))).toBe(2)
      })

      it('should return the default value if None', || {
        expect(any(None.mapOr(5, |value| expect('map').toBe('not called')))).toBe(5)
      })
    })

    describe('mapOrElse', || {
      it('should map the value if Some(value)', || {
        expect(any(Some(1).mapOrElse(|| expect('orElse').toBe('not called'), |value| value + value))).toBe(2)
      })

      it('should return the result of the default function if None', || {
        expect(any(None.mapOrElse(|| 5, |value| expect('map').toBe('not called')))).toBe(5)
      })
    })

    describe('unwrap', || {
      it('should return the value if Some(value)', || {
        expect(Some('value').unwrap()).toBe('value')
      })

      it('should panic if None', || {
        expect(any(|| None.unwrap())).toThrow()
      })
    })

    describe('unwrapOr', || {
      it('should return the value if Some(value)', || {
        expect(Some('value').unwrapOr('default')).toBe('value')
      })

      it('should return the default value if None', || {
        expect(None.unwrapOr('default')).toBe('default')
      })
    })

    describe('unwrapOrElse', || {
      it('should return the value if Some(value)', || {
        expect(Some('value').unwrapOrElse(|| expect('orElse').toBe('not called'))).toBe('value')
      })

      it('should return the result of the default function if None', || {
        expect(None.unwrapOrElse(|| 'default')).toBe('default')
      })
    })
  })

  describe('Result', || {
    describe('isOk', || {
      it('should return true if Ok(value)', || {
        expect(Ok(1).isOk()).toBe(true)
      })

      it('should return false if Err(err)', || {
        expect(Err(2).isOk()).toBe(false)
      })
    })

    describe('isErr', || {
      it('should return false if Ok(value)', || {
        expect(Ok(1).isErr()).toBe(false)
      })

      it('should return true if Err(err)', || {
        expect(Err(2).isErr()).toBe(true)
      })
    })

    describe('andThen', || {
      it('should map the value if Ok(value) and returns Ok(newValue)', || {
        expect(any(Ok(1).andThen(|value| Ok(value + value)))).toEqual(any(Ok(2)))
      })

      it('should not call the map function if Err(err)', || {
        expect(any(Err(2).andThen(|value| expect('andThen').toBe('not called')))).toEqual(any(Err(2)))
      })

      it('should return the error if Ok(value) and returns Err(error)', || {
        expect(any(Ok(1).andThen(|value| Err('error')))).toEqual(any(Err('error')))
      })
    })

    describe('map', || {
      it('should map the value if Ok(value)', || {
        expect(any(Ok(1).map(|value| value + value))).toEqual(any(Ok(2)))
        expect(Ok(2).map(|value| value + value).unwrap()).toBe(4)
      })

      it('should not call the map function if Err(err)', || {
        expect(any(Err(2).map(|value| expect('map').toBe('not called')))).toEqual(any(Err(2)))
      })
    })

    describe('mapErr', || {
      it('should map the value if Ok(value)', || {
        expect(any(Err(1).mapErr(|value| value + value))).toEqual(any(Err(2)))
        expect(Err(2).mapErr(|value| value + value).unwrapErr()).toBe(4)
      })

      it('should not call the mapErr function if Err(err)', || {
        expect(any(Ok(2).mapErr(|value| expect('mapErr').toBe('not called')))).toEqual(any(Ok(2)))
      })
    })

    describe('unwrap', || {
      it('should return the value if Ok(value)', || {
        expect(Ok('value').unwrap()).toBe('value')
      })

      it('should panic if Err(err)', || {
        expect(any(|| Err('err').unwrap())).toThrow()
      })
    })

    describe('unwrapErr', || {
      it('should panic if Ok(value)', || {
        expect(any(|| Ok('value').unwrapErr())).toThrow()
      })

      it('should return the error if Err(err)', || {
        expect(Err('err').unwrapErr()).toBe('err')
      })
    })
  })
})
