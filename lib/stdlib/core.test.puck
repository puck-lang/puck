import 'puck:test' as *
import 'core.puck' as {
  IntoIterator
  Iterator
  List
  None
  Num
  Radix
  Option
  Ordering
  Range
  Result
  String
}

describe('core', || {
  describe('Num', || {
    describe('parseInt', || {
      it('should default to parse decimal numbers', || {
        expect(Num.parseInt('1')).toEqual(Ok(1))
        expect(Num.parseInt('0')).toEqual(Ok(0))
        expect(Num.parseInt('10')).toEqual(Ok(10))
        expect(Num.parseInt('-123456789')).toEqual(Ok(-123456789))
      })

      it('should be able to parse binary numbers', || {
        expect(Num.parseInt('1', Radix::Binary)).toEqual(Ok(1))
        expect(Num.parseInt('0', Radix::Binary)).toEqual(Ok(0))
        expect(Num.parseInt('10', Radix::Binary)).toEqual(Ok(2))
        expect(Num.parseInt('-101', Radix::Binary)).toEqual(Ok(-5))
      })

      it('should be able to parse octal numbers', || {
        expect(Num.parseInt('1', Radix::Octal)).toEqual(Ok(1))
        expect(Num.parseInt('0', Radix::Octal)).toEqual(Ok(0))
        expect(Num.parseInt('10', Radix::Octal)).toEqual(Ok(8))
        expect(Num.parseInt('-107', Radix::Octal)).toEqual(Ok(-71))
      })

      it('should be able to parse hex numbers', || {
        expect(Num.parseInt('1', Radix::Hex)).toEqual(Ok(1))
        expect(Num.parseInt('0', Radix::Hex)).toEqual(Ok(0))
        expect(Num.parseInt('f', Radix::Hex)).toEqual(Ok(15))
        expect(Num.parseInt('F', Radix::Hex)).toEqual(Ok(15))
        expect(Num.parseInt('10', Radix::Hex)).toEqual(Ok(16))
        expect(Num.parseInt('-10e9f', Radix::Hex)).toEqual(Ok(-69279))
        expect(Num.parseInt('-10E9F', Radix::Hex)).toEqual(Ok(-69279))
      })

      it('should error for invalid characters', || {
        expect(Num.parseInt('A')).toEqual(Err(()))
        expect(Num.parseInt('2', Radix::Binary)).toEqual(Err(()))
        expect(Num.parseInt('8', Radix::Octal)).toEqual(Err(()))
        expect(Num.parseInt('G', Radix::Hex)).toEqual(Err(()))
        expect(Num.parseInt('2341A')).toEqual(Err(()))
        expect(Num.parseInt('1010112', Radix::Binary)).toEqual(Err(()))
        expect(Num.parseInt('1232648', Radix::Octal)).toEqual(Err(()))
        expect(Num.parseInt('1289AC6G', Radix::Hex)).toEqual(Err(()))
      })
    })

    describe('parse', || {
      it('should be able to parse integers', || {
        expect(Num.parse('1')).toEqual(Ok(1))
        expect(Num.parse('0')).toEqual(Ok(0))
        expect(Num.parse('10')).toEqual(Ok(10))
        expect(Num.parse('-123456789')).toEqual(Ok(-123456789))
      })

      it('should be able to parse doubles', || {
        expect(Num.parse('1.03')).toEqual(Ok(1.03))
        expect(Num.parse('0.5')).toEqual(Ok(0.5))
        expect(Num.parse('10.12')).toEqual(Ok(10.12))
        expect(Num.parse('-123456789.123')).toEqual(Ok(-123456789.123))
      })
    })

    describe('isNan', || {
      it('should return false for normal numbers', || {
        expect(1.isNan()).toBe(false)
        expect(1.04.isNan()).toBe(false)
        expect(100.isNan()).toBe(false)
        expect((-50).isNan()).toBe(false)
      })

      it('should return true for nan', || {
        let nan: Num = 0/0
        expect(nan.isNan()).toBe(true)
      })
    })

    describe('isInfinite', || {
      it('should return false for normal numbers', || {
        expect(1.isInfinite()).toBe(false)
        expect(1.04.isInfinite()).toBe(false)
        expect(100.isInfinite()).toBe(false)
        expect((-50).isInfinite()).toBe(false)
      })

      it('should return true for infinity', || {
        let positiveInfinity: Num = 1/0
        let negativeInfinity: Num = -1/0
        expect(positiveInfinity.isInfinite()).toBe(true)
        expect(negativeInfinity.isInfinite()).toBe(true)
      })
    })

    describe('ceil', || {
      it('should should always away from zero', || {
        expect(1.ceil()).toBe(1)
        expect(1.5.ceil()).toBe(2)
        expect(-0.4.ceil()).toBe(-1)
        expect(10.4.ceil()).toBe(11)
        expect(-10.4.ceil()).toBe(-11)
      })
    })

    describe('floor', || {
      it('should should always round towards zero', || {
        expect(1.floor()).toBe(1)
        expect(1.5.floor()).toBe(1)
        expect(-0.4.floor()).toBe(-0)
        expect(10.4.floor()).toBe(10)
        expect(-10.4.floor()).toBe(-10)
      })
    })

    describe('round', || {
      it('should should round using normal rules', || {
        expect(1.round()).toBe(1)
        expect(1.5.round()).toBe(2)
        expect(-0.4.round()).toBe(-0)
        expect(-0.5.round()).toBe(-1)
        expect(10.4.round()).toBe(10)
        expect(10.5.round()).toBe(11)
        expect(-10.4.round()).toBe(-10)
        expect(-10.5.round()).toBe(-11)
      })
    })

    describe('limit', || {
      it('should return the start of range if the number is less than the start', || {
        expect(5.limit({start: 10, end: 50})).toBe(10)
        expect(0.limit({start: 5, end: 50})).toBe(5)
        expect((-100).limit({start: -50, end: -10})).toBe(-50)
      })

      it('should return the end of range if the number is greater than the end', || {
        expect(100.limit({start: 10, end: 50})).toBe(49)
        expect((-5).limit({start: -50, end: -10})).toBe(-11)
      })

      it('should return the number if it is with the range', || {
        expect(11.limit({start: 10, end: 50})).toBe(11)
        expect(49.limit({start: 10, end: 50})).toBe(49)
        expect(20.limit({start: 10, end: 50})).toBe(20)
        expect(0.limit({start: -10, end: 10})).toBe(0)
        expect((-10).limit({start: -50, end: -5})).toBe(-10)
      })
    })

    describe('cmp', || {
      it('should return less for numbers greater than self', || {
        expect(5.cmp(10)).toBe(Ordering::Less)
        expect(0.cmp(1)).toBe(Ordering::Less)
        expect((-1).cmp(0)).toBe(Ordering::Less)
      })

      it('should return greater for numbers less than self', || {
        expect(10.cmp(5)).toBe(Ordering::Greater)
        expect(1.cmp(0)).toBe(Ordering::Greater)
        expect(0.cmp(-1)).toBe(Ordering::Greater)
      })

      it('should return equal for equal numbers', || {
        expect(10.cmp(10)).toBe(Ordering::Equal)
        expect(0.cmp(0)).toBe(Ordering::Equal)
        expect((-1).cmp(-1)).toBe(Ordering::Equal)
      })
    })
  })

  describe('String', || {
    describe('contains', || {
      it('should return true if the string contains the substring', || {
        expect('abcdefg'.contains('abc')).toBe(true)
        expect('abcdefg'.contains('efg')).toBe(true)
        expect('abcdefg'.contains('cde')).toBe(true)
        expect('abcdefg'.contains('c')).toBe(true)
        expect('abcdefg'.contains('abcdefg')).toBe(true)
      })

      it('should return false if the string does not contain the substring', || {
        expect('abcdefg'.contains('cba')).toBe(false)
        expect('abcdefg'.contains('efgh')).toBe(false)
        expect('abcdefg'.contains('ced')).toBe(false)
        expect('abcdefg'.contains('h')).toBe(false)
        expect('abcdefg'.contains('abcdefgh')).toBe(false)
      })
    })

    describe('startsWith', || {
      it('should return true if the string starts with the substring', || {
        expect('abc'.startsWith('')).toBe(true)
        expect('abc'.startsWith('a')).toBe(true)
        expect('abc'.startsWith('ab')).toBe(true)
        expect('abc'.startsWith('abc')).toBe(true)
      })

      it('should return false if the string does not start with the substring', || {
        expect('abc'.startsWith('b')).toBe(false)
        expect('abc'.startsWith('bc')).toBe(false)
        expect('abc'.startsWith('ac')).toBe(false)
        expect('abc'.startsWith('abcd')).toBe(false)
      })
    })

    describe('endsWith', || {
      it('should return true if the string ends with the substring', || {
        expect('abc'.endsWith('')).toBe(true)
        expect('abc'.endsWith('c')).toBe(true)
        expect('abc'.endsWith('bc')).toBe(true)
        expect('abc'.endsWith('abc')).toBe(true)
      })

      it('should return false if the string does not end with the substring', || {
        expect('abc'.endsWith('b')).toBe(false)
        expect('abc'.endsWith('ab')).toBe(false)
        expect('abc'.endsWith('ac')).toBe(false)
        expect('abc'.endsWith('aabc')).toBe(false)
      })
    })

    describe('split', || {
      it('should default to split at each character', || {
        expect('abcdefg'.split()).toEqual(['a', 'b', 'c', 'd', 'e', 'f', 'g'])
      })

      it('should split at the provided pattern', || {
        expect('hello world'.split(' ')).toEqual(['hello', 'world'])
        expect('hello, world'.split(' ')).toEqual(['hello,', 'world'])
        expect('hello, world'.split(', ')).toEqual(['hello', 'world'])
      })
    })

    describe('sub', || {
      it('should be able to return the characters for a range', || {
        expect('abc'.sub(Range.new(0, 3))).toBe('abc')
        expect('abc'.sub(Range.new(0, 2))).toBe('ab')
        expect('abc'.sub(Range.new(0, 0))).toBe('')
        expect('abc'.sub(Range.new(1, 3))).toBe('bc')
      })

      it('should ignore characters outside the range', || {
        expect('abc'.sub(Range.new(0, 4))).toBe('abc')
        expect('abc'.sub(Range.new(-1, 2))).toBe('ab')
        expect('abc'.sub(Range.new(-5, 0))).toBe('')
        expect('abc'.sub(Range.new(1, 6))).toBe('bc')
      })
    })

    describe('padLeft', || {
      it('should not pad the string if the width is >= width', || {
        expect('Hello'.padLeft(5)).toEqual('Hello')
        expect('Hello'.padLeft(2)).toEqual('Hello')
        expect('Hello'.padLeft(-2)).toEqual('Hello')
      })

      it('should pad the string with spaces if the width is < width', || {
        expect('Hello'.padLeft(10)).toEqual('     Hello')
      })

      it('should pad the string with spaces if the passed padding is an empty string and width is < width', || {
        expect('Hello'.padLeft(10, '')).toEqual('     Hello')
      })

      it('should pad the string with passed padding if the width is < width', || {
        expect('Hello'.padLeft(10, '*')).toEqual('*****Hello')
        expect('Hello'.padLeft(10, '**')).toEqual('******Hello')
      })
    })

    describe('padRight', || {
      it('should not pad the string if the width is >= width', || {
        expect('Hello'.padRight(5)).toEqual('Hello')
        expect('Hello'.padRight(2)).toEqual('Hello')
        expect('Hello'.padRight(-2)).toEqual('Hello')
      })

      it('should pad the string with spaces if the width is < width', || {
        expect('Hello'.padRight(10)).toEqual('Hello     ')
      })

      it('should pad the string with spaces if the passed padding is an empty string and width is < width', || {
        expect('Hello'.padRight(10, '')).toEqual('Hello     ')
      })

      it('should pad the string with passed padding if the width is < width', || {
        expect('Hello'.padRight(10, '*')).toEqual('Hello*****')
        expect('Hello'.padRight(10, '**')).toEqual('Hello******')
      })
    })

    describe('toLowerCase', || {
      it('should convert characters to lower case', || {
        expect('abcABCåäöÅÄÖ'.toLowerCase()).toEqual('abcabcåäöåäö')
      })
    })

    describe('toUpperCase', || {
      it('should convert characters to upper case', || {
        expect('abcABCåäöÅÄÖ'.toUpperCase()).toEqual('ABCABCÅÄÖÅÄÖ')
      })
    })

    describe('trim', || {
      it('should remove whitespace', || {
        expect(''.trim()).toEqual('')
        expect('   Hello'.trim()).toEqual('Hello')
        expect('Hello   '.trim()).toEqual('Hello')
        expect('   Hello   '.trim()).toEqual('Hello')
      })
    })

    describe('trimLeft', || {
      it('should remove leading whitespace', || {
        expect(''.trimLeft()).toEqual('')
        expect('   Hello'.trimLeft()).toEqual('Hello')
        expect('Hello   '.trimLeft()).toEqual('Hello   ')
        expect('   Hello   '.trimLeft()).toEqual('Hello   ')
      })
    })

    describe('trimRight', || {
      it('should remove trailing whitespace', || {
        expect(''.trimRight()).toEqual('')
        expect('   Hello'.trimRight()).toEqual('   Hello')
        expect('Hello   '.trimRight()).toEqual('Hello')
        expect('   Hello   '.trimRight()).toEqual('   Hello')
      })
    })

    describe('IntoIterator', || {
      it('should return an iterator that iterates over the characters', || {
        let mut iterator = 'ABCåäö'.iter()
        expect(iterator.next()).toEqual(Some('A'))
        expect(iterator.next()).toEqual(Some('B'))
        expect(iterator.next()).toEqual(Some('C'))
        expect(iterator.next()).toEqual(Some('å'))
        expect(iterator.next()).toEqual(Some('ä'))
        expect(iterator.next()).toEqual(Some('ö'))
        expect(iterator.next()).toEqual(None)
      })
    })

    describe('Index', || {
      it('should be able to return the character at a specific index', || {
        expect('abc'[0]).toBe('a')
        expect('abc'[1]).toBe('b')
        expect('abc'[2]).toBe('c')
      })
    })
  })

  describe('Option', || {
    describe('isSome', || {
      it('should return true if Some(value)', || {
        expect(Some(1).isSome()).toBe(true)
      })

      it('should return false if None', || {
        expect(None.isSome()).toBe(false)
      })
    })

    describe('isNone', || {
      it('should return false if Some(value)', || {
        expect(Some(1).isNone()).toBe(false)
      })

      it('should return true if None', || {
        expect(None.isNone()).toBe(true)
      })
    })

    describe('andThen', || {
      it('should map the value if Some(value) and returns Some(newValue)', || {
        expect(Some(1).andThen(|value| Some(value + value))).toEqual(Some(2))
      })

      it('should not call the map function if None', || {
        expect(None.andThen(|value| panic('andThen should not called'))).toEqual(None)
      })

      it('should return None if Some(value) and returns None', || {
        expect(Some(1).andThen(|value| None)).toEqual(None)
      })
    })

    describe('map', || {
      it('should map the value if Some(value)', || {
        expect(Some(1).map(|value| value + value)).toEqual(Some(2))
        expect(Some(2).map(|value| value + value).unwrap()).toBe(4)
      })

      it('should not call the map function if None', || {
        expect(None.map(|value| panic('map should not called'))).toEqual(None)
      })
    })

    describe('mapOr', || {
      it('should map the value if Some(value)', || {
        expect(Some(1).mapOr(5, |value| value + value)).toBe(2)
      })

      it('should return the default value if None', || {
        expect(None.mapOr(5, |value| panic('map should not called'))).toBe(5)
      })
    })

    describe('mapOrElse', || {
      it('should map the value if Some(value)', || {
        expect(
          Some(1).mapOrElse(
            || panic('orElse should not called')
            |value| value + value
          )
        ).toBe(2)
      })

      it('should return the result of the default function if None', || {
        expect(None.mapOrElse(|| 5, |value| panic('map should not called'))).toBe(5)
      })
    })

    describe('unwrap', || {
      it('should return the value if Some(value)', || {
        expect(Some('value').unwrap()).toBe('value')
      })

      it('should panic if None', || {
        expect(|| None.unwrap()).toThrow()
      })
    })

    describe('unwrapOr', || {
      it('should return the value if Some(value)', || {
        expect(Some('value').unwrapOr('default')).toBe('value')
      })

      it('should return the default value if None', || {
        expect(None.unwrapOr('default')).toBe('default')
      })
    })

    describe('unwrapOrElse', || {
      it('should return the value if Some(value)', || {
        expect(Some('value').unwrapOrElse(|| panic('orElse should not called'))).toBe('value')
      })

      it('should return the result of the default function if None', || {
        expect(None.unwrapOrElse(|| 'default')).toBe('default')
      })
    })
  })

  describe('Result', || {
    describe('isOk', || {
      it('should return true if Ok(value)', || {
        expect(Ok(1).isOk()).toBe(true)
      })

      it('should return false if Err(err)', || {
        expect(Err(2).isOk()).toBe(false)
      })
    })

    describe('isErr', || {
      it('should return false if Ok(value)', || {
        expect(Ok(1).isErr()).toBe(false)
      })

      it('should return true if Err(err)', || {
        expect(Err(2).isErr()).toBe(true)
      })
    })

    describe('andThen', || {
      it('should map the value if Ok(value) and returns Ok(newValue)', || {
        expect(Ok(1).andThen(|value| Ok(value + value))).toEqual(Ok(2))
      })

      it('should not call the map function if Err(err)', || {
        expect(
          Err(2).andThen(|_| {
            panic('andThen should not called')
            Err(0)
          })
        ).toEqual(Err(2))
      })

      it('should return the error if Ok(value) and returns Err(error)', || {
        expect(Ok(1).andThen(|_| Err('error'))).toEqual(Err('error'))
      })
    })

    describe('map', || {
      it('should map the value if Ok(value)', || {
        expect(Ok(1).map(|value| value + value)).toEqual(Ok(2))
        expect(Ok(2).map(|value| value + value).unwrap()).toBe(4)
      })

      it('should not call the map function if Err(err)', || {
        expect(Err(2).map(|_| panic('map should not called'))).toEqual(Err(2))
      })
    })

    describe('mapErr', || {
      it('should map the value if Ok(value)', || {
        expect(Err(1).mapErr(|value| value + value)).toEqual(Err(2))
        expect(Err(2).mapErr(|value| value + value).unwrapErr()).toBe(4)
      })

      it('should not call the mapErr function if Err(err)', || {
        expect(Ok(2).mapErr(|value| panic('mapErr should not called'))).toEqual(Ok(2))
      })
    })

    describe('unwrap', || {
      it('should return the value if Ok(value)', || {
        expect(Ok('value').unwrap()).toBe('value')
      })

      it('should panic if Err(err)', || {
        expect(|| Err('err').unwrap()).toThrow()
      })
    })

    describe('unwrapErr', || {
      it('should panic if Ok(value)', || {
        expect(|| Ok('value').unwrapErr()).toThrow()
      })

      it('should return the error if Err(err)', || {
        expect(Err('err').unwrapErr()).toBe('err')
      })
    })
  })

  describe('Iterator', || {
    describe('count', || {
      it('should count the elements in the iterator', || {
        expect([].iter().count()).toBe(0)
        expect([1, 2, 3].iter().count()).toBe(3)
        expect(['a', 'b'].iter().count()).toBe(2)
      })
    })

    describe('EnumerateIterator', || {
      it('should map index and values on the iterator', || {
        let mut iterator = [1, 2, 3].iter().enumerate()
        expect(iterator.next()).toEqual(Some((0, 1)))
        expect(iterator.next()).toEqual(Some((1, 2)))
        expect(iterator.next()).toEqual(Some((2, 3)))
        expect(iterator.next()).toEqual(None)
      })
    })

    describe('MapIterator', || {
      it('should map values on the iterator', || {
        let mut iterator = [1, 2, 3].iter().map(|i: Num| i * 2)
        expect(iterator.next()).toEqual(Some(2))
        expect(iterator.next()).toEqual(Some(4))
        expect(iterator.next()).toEqual(Some(6))
        expect(iterator.next()).toEqual(None)
      })

      it('should map lazily', || {
        let mut iterator = [1, 2, 3].iter().map(|i: Num| {
          if i > 1
            then throw 'Should only be called once'
          i
        })

        expect(iterator.next()).toEqual(Some(1))
      })
    })

    describe('filter', || {
      it('should remove elements from the iterator that does not match the predicate', || {
        let predicate = |i: Num| i < 3
        let mut iterator = [1, 2, 3].iter().filter(predicate)
        expect(iterator.next()).toEqual(Some(1))
        expect(iterator.next()).toEqual(Some(2))
        expect(iterator.next()).toEqual(None)

        let predicate = |i: Num| i != 2
        let mut iterator = [1, 2, 3].iter().filter(predicate)
        expect(iterator.next()).toEqual(Some(1))
        expect(iterator.next()).toEqual(Some(3))
        expect(iterator.next()).toEqual(None)
      })

      it('should correctly count a filtered iterator', || {
        let predicate = |i: Num| {
          let mod: Num = i % 2
          mod == 1
        }
        let mut iterator = [1, 2, 3, 4].iter().filter(predicate)
        expect(iterator.count()).toBe(2)
      })
    })

    describe('filterMap', || {
      it('should remove elements from the iterator that does not match the predicate', || {
        let predicate = |i: Num| if i < 3 then Some(i * 2) else None
        let mut iterator = [1, 2, 3].iter().filterMap(predicate)
        expect(iterator.next()).toEqual(Some(2))
        expect(iterator.next()).toEqual(Some(4))
        expect(iterator.next()).toEqual(None)

        let predicate = |i: Num| if i != 2 then Some(i * 2) else None
        let mut iterator = [1, 2, 3].iter().filterMap(predicate)
        expect(iterator.next()).toEqual(Some(2))
        expect(iterator.next()).toEqual(Some(6))
        expect(iterator.next()).toEqual(None)
      })

      it('should correctly count a filtered iterator', || {
        let predicate = |i: Num| {
          let mod: Num = i % 2
          if mod == 1 then Some(i * 2) else None
        }
        let mut iterator = [1, 2, 3, 4].iter().filterMap(predicate)
        expect(iterator.count()).toBe(2)
      })
    })

    describe('fold', || {
      it('should return the initial value for empty iterators', || {
        expect([].iter().fold(0, |sum, val| sum + val)).toBe(0)
      })

      it('should reuce the iteratur with the passed reducere', || {
        expect([1, 2, 3].iter().fold(0, |sum, val| sum + val)).toBe(6)
      })
    })

    describe('all', || {
      it('should return true for empty iterators', || {
        expect([].iter().all(|_| false)).toBe(true)
      })

      it('should return true if all elements matches the predicate', || {
        let mut iterator = [1, 2, 3].iter()
        let predicate = |i: Num| i > 0
        expect(iterator.all(predicate)).toBe(true)
      })

      it('should return false if any of the elements does not match the predicate', || {
        let predicate = |i: Num| i > 4
        expect([1, 2, 3].iter().all(predicate)).toBe(false)
        expect([4, 5, 6].iter().all(predicate)).toBe(false)
        expect([6, 5, 4].iter().all(predicate)).toBe(false)
      })
    })

    describe('any', || {
      it('should return false for empty iterators', || {
        expect([].iter().any(|_| true)).toBe(false)
      })

      it('should return true if any of the elements match the predicate', || {
        let predicate = |i: Num| i > 4
        expect([1, 2, 5].iter().any(predicate)).toBe(true)
        expect([4, 5, 6].iter().any(predicate)).toBe(true)
        expect([6, 1, 2].iter().any(predicate)).toBe(true)
      })

      it('should return false if none of the elements match the predicate', || {
        let mut iterator = [1, 2, 3].iter()
        let predicate = |i: Num| i > 4
        expect(iterator.any(predicate)).toBe(false)
      })
    })

    describe('find', || {
      it('should return None for empty iterators', || {
        expect([].iter().find(|_| true)).toEqual(None)
      })

      it('should return the first matching element', || {
        let predicate = |i: Num| i > 4
        expect([1, 2, 5].iter().find(predicate)).toEqual(Some(5))
        expect([4, 5, 6].iter().find(predicate)).toEqual(Some(5))
        expect([6, 1, 2].iter().find(predicate)).toEqual(Some(6))
      })

      it('should return None if none of the elements match the predicate', || {
        let mut iterator = [1, 2, 3].iter()
        let predicate = |i: Num| i > 4
        expect(iterator.find(predicate)).toEqual(None)
      })
    })

    describe('position', || {
      it('should return None for empty iterators', || {
        expect([].iter().position(|_| true)).toEqual(None)
      })

      it('should return the first matching element index', || {
        let predicate = |i: Num| i > 4
        expect([1, 2, 5].iter().position(predicate)).toEqual(Some(2))
        expect([4, 5, 6].iter().position(predicate)).toEqual(Some(1))
        expect([6, 1, 2].iter().position(predicate)).toEqual(Some(0))
      })

      it('should return None if none of the elements match the predicate', || {
        let mut iterator = [1, 2, 3].iter()
        let predicate = |i: Num| i > 4
        expect(iterator.position(predicate)).toEqual(None)
      })
    })
  })

  describe('List', || {
    describe('Index<Num>', || {
      it('should return the specified index', || {
        expect([1, 2, 3][0]).toEqual(1)
        expect([1, 2, 3][1]).toEqual(2)
        expect([1, 2, 3][2]).toEqual(3)
      })

      it('should panic for out of bounds', || {
        expect(|| [][0]).toThrow()
        expect(|| [1, 2, 3][3]).toThrow()
        expect(|| [1, 2, 3][-1]).toThrow()
      })
    })

    describe('IntoIterator', || {
      it('should return an iterator that iterates over the elements', || {
        let mut iterator = [1, 2, 3].iter()
        expect(iterator.next()).toEqual(Some(1))
        expect(iterator.next()).toEqual(Some(2))
        expect(iterator.next()).toEqual(Some(3))
        expect(iterator.next()).toEqual(None)
      })
    })

    describe('binarySearchBy', || {
      it('should return Err(0) for empty lists', || {
        expect([].binarySearchBy(|_| Ordering::Less)).toEqual(Err(0))
      })

      it('should return Err(n - 1) if the value is greater than everying', || {
        expect([1, 2, 3].binarySearchBy(|val| val.cmp(4))).toEqual(Err(3))
      })

      it('should return Err(0) if the value is less than everying', || {
        expect([1, 2, 3].binarySearchBy(|val| val.cmp(0))).toEqual(Err(0))
      })

      it('should return Ok(index) if the value is found', || {
        expect([1, 2, 3].binarySearchBy(|val| val.cmp(2))).toEqual(Ok(1))
      })
    })
  })

  describe('ordering', || {
    describe('reverse', || {
      it('should return greater for less', || {
        expect(Ordering::Less.reverse()).toBe(Ordering::Greater)
      })
      it('should return equal for equal', || {
        expect(Ordering::Equal.reverse()).toBe(Ordering::Equal)
      })
      it('should return less for greater', || {
        expect(Ordering::Greater.reverse()).toBe(Ordering::Less)
      })
    })
  })

  describe('Range', || {
    describe('IntoIterator', || {
      it('should return an iterator that iterates over the elements', || {
        let range: Range = {start: -3, end: 3}
        let mut iterator = range.iter()
        expect(iterator.next()).toEqual(Some(-3))
        expect(iterator.next()).toEqual(Some(-2))
        expect(iterator.next()).toEqual(Some(-1))
        expect(iterator.next()).toEqual(Some(0))
        expect(iterator.next()).toEqual(Some(1))
        expect(iterator.next()).toEqual(Some(2))
        expect(iterator.next()).toEqual(None)
      })
    })
  })
})
