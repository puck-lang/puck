import 'puck:core' as core
import 'js/js.js' as js

//! Contains variables that are usually avalible in JavaScript contexts

export let null = js->_null
export let undefined = js->_undefined.transmute()

/// The global object
///
/// Will reference global in node, window in browsers and self in workers
export let global = js->_global or js->_window or js->_self
/// The window object that is avalible in browsers
export let window = js->_window
/// The self object that is avalible in workers
export let _self = js->_self

export let Array = js->_Array
export let Boolean = js->_Boolean
export let Date = js->_Date
export let Error: <T>(T) -> {} = js->_Error.transmute()
export let Number = js->_Number
export let Object = js->_Object
export let RegExp = js->_RegExp
export let String = js->_String

export let console = global.console

/// The module object that is avalible in node and other commonjs modules (for example Browserify and Webpack)
export let module = js->_module
/// The process object that is avalible in node and other commonjs modules (for example Browserify and Webpack)
export let process = js->_process
/// The require function that is avalible in node and other commonjs modules (for example Browserify and Webpack)
export let require: (core::String) -> Unknown = js->_require.transmute()

/// Wraps the passed function so that it will be called with new
///
/// Example:
///    let date = new(Date)('2000') // is equal to the JavaScript: new Date('2000')
export let new = js->_new
export let typeof: <T>(T) -> core::String = js->_typeof.transmute()

export fn asResult<R, E>(func: () -> R) -> Result<R, E> {
  let result = js->asResult(func)
  if result->error
    then Err(result->value.transmute())
    else Ok(result->value.transmute())
}
export let wrapAsResult = js->wrapAsResult
