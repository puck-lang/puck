//#![no_core]
import 'puck:js' as {undefined, console}

export type Bool = {}
export type Num = {}
export type String = {}

export type List<E> = {}
export trait Iterable {
  /// Returns an Iterable that provides all but the first count elements.
  // fn skip(self, count: Num): Iterable<E>
  fn skip(self, count: Num): List<String>

  /// Returns an Iterable that skips leading elements while test is satisfied.
  // fn skipWhile(self, test: (E) => Bool): Iterable<E>
  fn skipWhile(self, test: (String) => Bool): List<String>
}

impl<E> Iterable for List<E> {
  fn skip(self, count) {
    self.slice(count)
  }

  fn skipWhile(self, test) {
    let index = self.findIndex(|e| not test(e))
    if index == -1
      then []
      else self.slice(index)
  }
}

export fn print(message, a, b, c) {
  let mut args = [message]
  if a != undefined {
    args.push(a)
  }
  if b != undefined {
    args[2] = b
  }
  if c != undefined {
    args[3] = c
  }

  console.log.apply(console, args)
}

export fn objectFromList<T>(list: List<List<T>>) {
  let mut object = {}
  list.forEach(|item| object[item[0]] = item[1])
  object
}
