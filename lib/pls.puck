import 'puck:js' as {Error, asResult, undefined}
import 'node:path' as path
import 'node:vscode-languageserver' as {
  CompletionItemKind
  DiagnosticSeverity
}
import 'ast/ast.puck' as {Module}
import 'ast/span.puck' as {Position, ToSpan}
import 'pls/completions.puck' as {Completions}
import 'typeck/src/scope.puck' as {Scope}
import 'compiler.puck' as {createContext}
import 'entities.puck' as {File, UnparsedFile}

export fn createServer(projectPath: String, sendDiagnostic) {
  let mut context
  let mut a = {}
  a.validateDocument = fn (filePath: String, contents: String) {
    context = createContext(projectPath)
    context.reportError = fn (file: File, token: ToSpan, message) {
      let span = token.span()
      sendDiagnostic(file.absolutePath, {
        severity: DiagnosticSeverity.Error
        range: {
          start: {line: span.start.line - 1, character: span.start.column - 1}
          end: {line: span.end.line - 1, character: span.end.column - 1}
        }
        message
        source: 'puck'
      })
    }

    let result = asResult(|| {
      let mut file: UnparsedFile = {
        isBin: false
        fileName: path.basename(filePath)
        absolutePath: path.resolve(path.normalize(filePath))
        puck: contents
      }
      file = context.importFile(file)

      context.runTypeVisitorOnFile(file)
      context.runTypeVisitor()
      context.runImplVisitorOnFile(file)
      context.runImplVisitor()
      context.runCheckerOnFile(file)
      context.runChecker()
    })

    if let Result::Err(error) = result {
      if error != 'Syntax Error' {
        print('Error:', error)
      }
    }
  }
  a.onCompletion = fn (filePath: String, position: Position) {
    print('onCompletion')
    if not context then return []
    let file: File = context.files[path.resolve(path.normalize(filePath))]
    if not file then return []
    let module: Module = file.ast
    if not module then return []

    let result = asResult(|| {
      module.getCompletions(position)
    })

    match result {
      Ok(completions) => completions
      Err(error) => {
        print('completions Error:', (error, error.stack))
        []
      }
    }
  }
  a
}
