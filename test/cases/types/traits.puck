export trait Empty {}
export trait Functions {
  fn noBody() -> Num

  fn withBody(self, a: String) -> String {
    let b = a
    b
  }
}
export trait SelfAware {
  fn static() -> Num {5}
  fn withImmutableSelf(self, a: String) -> String {a}
  fn withMutableSelf(mut self) -> SelfAware {self}
}
export trait Generic<T> {
  fn generic(a: T) -> T
}
export trait GenericSelf<T> {
  fn genericSelf(self, a: GenericSelf<T>) -> T
}

export type EmptyType {}
export type FunctionsType {
  name: String
}
export type GenericType<T> {}

impl Empty for EmptyType {}

impl Functions for EmptyType {
  fn noBody() -> Num {5}
}

impl Functions for FunctionsType {
  fn noBody() -> Num {5}
  fn withBody(self, a: String) -> String {self.name}
}

impl<T> Generic<T> for GenericType<T> {
  fn generic(a: T) -> T {a}
}

impl<T> GenericSelf<T> for GenericType<String> {
  fn genericSelf(self, a: GenericSelf<T>) -> GenericSelf<T> {a}
}

impl Generic<String> for GenericType<String> {
  fn generic(a: String) -> String {a + a}
}

impl SelfAware for FunctionsType {}

Functions.noBody()
let func: FunctionsType = {name: 'func'}
func.withBody('body')

let mut mutFunc = func
mutFunc.withMutableSelf()

let genericNum: GenericType<Num> = {}
genericNum.generic(5)
let genericString: GenericType<String> = {}
genericString.generic('hello')
