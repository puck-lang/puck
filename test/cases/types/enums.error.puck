///// Use of undeclared type B
enum Enum = A(B)

///// Use of undeclared type B
enum Enum = A {b: B}

///// Duplicate member A
enum Enum = A | B | A

///// String is not assignable to type Num
enum Enum = A(Num)
let five = Enum::A('five')

//// String is not assignable to type Num
// TODO: Make this error
// enum Enum = A {b: Num}
// let five = Enum.A({b: 'five'})

///// Maybe.Nothing is not callable
let five = Maybe::Nothing('five')

//// Maybe<String> is not assignable to type Maybe<Num>
// TODO: Make this error
let five: Maybe<Num> = Maybe::Just('five')

//// Maybe<String> is not assignable to type Maybe<Num>
// TODO: Make this error
let five: Maybe<Num> = Just('five')

///// Result is not assignable to type Maybe<Num>
let five: Maybe<Num> = Result::Ok(5)

//// Result is not assignable to type Maybe<Num>
// TODO: Make this error
let five: Maybe<Num> = Ok(5)

///// Maybe has no member named Some
let five: Maybe<Num> = Maybe::Some(5)
