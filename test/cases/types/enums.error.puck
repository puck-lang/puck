///// Use of undeclared type B
enum Enum { A(B) }

///// Use of undeclared type B
enum Enum { A {b: B} }

///// Duplicate member A
enum Enum { A, B, A }

///// String is not assignable to type Num
enum Enum { A(Num) }
let five = Enum::A('five')

///// {b: String} is not assignable to type {b: Num} in parameter 0 of function Enum::A
enum Enum { A {b: Num} }
let five = Enum::A({b: 'five'})

///// Option::None is not callable
let five = Option::None('five')

///// Option<String> is not assignable to type Option<Num>
let five: Option<Num> = Option::Some('five')

///// Option<String> is not assignable to type Option<Num>
let five: Option<Num> = Some('five')

///// Result<Num, E> is not assignable to type Option<Num>
let five: Option<Num> = Result::Ok(5)

///// Result<Num, E> is not assignable to type Option<Num>
let five: Option<Num> = Ok(5)

///// Option has no member named Just
let five: Option<Num> = Option::Just(5)
