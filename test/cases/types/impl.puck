type TypeFoo {
  value: Num
}

impl TypeFoo {
  fn isAnswer(self) -> Bool {
    self.value == 42
  }

  fn isNegative(self: Self, other: Self) -> Self {
    {value: self.value + other.value}
  }

  fn isAnswer2(self) -> Bool {
    self.isAnswer()
  }
}

let type_: TypeFoo = {value: 42}

type_.isAnswer()

trait TraitFoo {
  fn a(self) -> () {}
}

impl TraitFoo for TypeFoo {
  fn a(self: {value: Num}) -> () {}
}

trait TraitBar {
  fn b(self) -> ()
}
type TypeBar<T> {}

impl<T> TraitFoo for TypeBar<T> {}
impl TraitBar for TypeBar<Num> where TypeBar<Num>: TraitFoo {
  fn b(self) -> () {
    self.a()
    TraitFoo.a(self)
  }
}

let bar = TypeBar::<Num>({})
bar.b()

trait TraitFooBar: TraitFoo {
  fn c(self) -> () {
    self.a()
    TraitFoo.a(self)
  }
}

impl TraitFooBar for TypeBar<Num> {}
bar.c()
