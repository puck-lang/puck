type Foo {
  bar: Generic<String>
  nested: Generic<String, Generic<Num>>
  number: Num
  self: Self
  tuple: (Num, Bool)
}

type Generic<A, B=A> {
  a: A
  b: B
  c: Self
}

export type A<B=Generic<Foo>> {
  c: B
}

type Functions {
  noParam: () -> Num
  params: (String, Generic<Num, String>) -> Generic<String>
  typeParams: <A, B>(A, Generic<B>) -> B
  sameTypeParams: <A, B>(A, Generic<B>) -> B
}

type NamedTuple(Num, Bool, Functions)
type NamedGenericTuple<A, B=A>(A, B, Generic<A>)

enum Enum {
  A(Enum, NamedTuple)
  B {
    this: Enum
    functions: Functions
  }
  C
}

enum GenericEnum<X, Y> {
  A(GenericEnum<X, Functions>, Y)
  B {
    x: X
    y: Y
  }
  C
}
