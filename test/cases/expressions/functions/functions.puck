fn a() {}
fn b(a) {}
fn c(a = 1) {a}
fn d(a,b) {c(a)}
fn e(a,b) {d(a,b)}
fn f(a,b) {fn c(a,b) {f(a,b)}}
fn g(a,b) {
  a()
  b()
  fn c() {
    fn g() {g()}
    g()
  }
}

fn h(a: String, b: String) -> Bool {a == b}
fn i(a: Num, b: Num) -> Bool {
  if a > 0 then return b != a
  a == b
}
fn j(a: Num, b: Num) {
  a == b
}
fn k(a: Num, b) {
  a == b
}
// TODO: Remove type form a when possible
fn l(a: String, b: String) {
  a == b
}
// TODO: Allow this
// TODO: Remove types when possible
// fn m<T>(a: PartialEq<T>, b: PartialEq<T>) -> Bool {
//   a == b
// }
fn n(self) {self.toString()}
fn o(mut self) {self.toString()}
fn p(self, a) {self.toString()}

a()
b(1)
c()
c(2)

let q = fn (a) {}
q(1)

let bool: Bool = j(1, 2)

let obj = {
  key: |self| self
}

fn r<T>(a: T, b: (T) -> ()) {}
r(5, |a| a.round())
