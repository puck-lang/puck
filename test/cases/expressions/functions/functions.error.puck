///// Num is not assignable to type String
fn a(a: String, b: Num) {}
a(1, 2)

///// func is already defined
fn func() {}
fn func(a, b) {}

///// Too few arguments given to a, 3 required, 2 given
fn a(a, b, c) {}
a(1, 2)

///// Too many arguments given to a, 2 required, 3 given
fn a(a, b) {}
a(1, 2, 3)

///// Too many arguments given to a, 1 required, 2 given
let mut a: (Num) -> Bool
a(1, 2)

///// Too many arguments given to a, 1 required, 2 given
let a = fn (a) {}
a(1, 2)

///// Parameter b of function a requires a mutable binding but c is declared as immutable.
fn a(mut b) {}
let c = true
a(c)

///// Bool is not assignable to type Num
fn isEqual(a: Num, b: Num) {a == b}
let max: Num = isEqual(1, 2)

///// String is not assignable to type Num
fn ident<T>(a: T) -> T {a}
let five: Num = ident('five')

///// String is not assignable to type Num
fn ident(a: String) {a}
let five: Num = ident('five')

///// Num is not assignable to type String
fn ident(a: String) -> String {5}

///// List<Num> is not assignable to type List<String>
fn addFive(num: Num) {num}
let list: List<String> = [].map(addFive).toList()

///// addFive is not assignable to type (String) -> Num in parameter func of function map
fn addFive(num: Num) {num}
[].map(|_| 'five').map(addFive)

///// Too many arguments given to func, 1 required, 2 given
fn func<A>(a: A) {}

func(1, 2)

///// String is not assignable to type Num
fn func(a: String) -> Num {
  return a
}

///// No best common type exists among return expressions. Found String, Num
fn func(a: String, b: Num) {
  if true
    then return a
    else return b
}

///// String is not assignable to type Num in parameter other of function eq
fn func<A, B>(a: A, b: B) -> A {a}
func(5, 'asd') == 'asd'

///// String is not assignable to type Num in parameter other of function eq
fn func<A, B>(a: A, b: B) -> A {a}
func::<Num, String>(5, 'asd') == 'asd'

///// Type func is not generic
fn func(a, b) {a}
func::<Num, String>(5, 'asd')

///// Too many type parameters given to func, 1 required, 2 given
fn func<A>(a: A, b: A) -> A {a}
func::<Num, String>(5, 10)

///// String is not assignable to type Bool
fn func<A, B>(a: A, b: B) -> A {a}
func::<Num, Bool>(5, 'asd')

///// String is not assignable to type Num
let a = {}
let b: Num = a->b.transmute::<String>()

///// Return used outside of a function
return 5
