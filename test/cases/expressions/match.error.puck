///// Use of undefined variable value
match Option::Some(5) {
  Option::Some(num) => '$value'
  Option::None => 'nothing'
}

///// Match is not exhaustive. It is missing a case for Option<Num>::None
match Option::Some(5) {
  Option::Some(num) => '$num'
}

///// (??, ??) is not assignable to type (T)
match Result::Ok(5) {
  Result::Ok(num, value) => '$num'
  Result::Err(_) => 'error'
}

///// () is not assignable to type (T)
match Result::Ok(5) {
  Result::Ok() => '$num'
  Result::Err(_) => 'error'
}

///// Result<Num, E> is not assignable to type Option
match Result::Ok(5) {
  Option::Some(_) => 'Something'
}

///// Result<Num, E> is not assignable to type Option
match Ok(5) {
  Option::Some(_) => 'Something'
}

///// Num is not assignable to type String
fn sayHello(name: String) {print('Hello, $name')}

match Option::Some(5) {
  Option::Some(num) => sayHello(num)
  Option::None => print('Oh, nothing')
}

///// Num is not assignable to type String
fn sayHello(name: String) {print('Hello, $name')}

enum Value { One {num: Num} }

match Value::One({num: 5}) {
  Value::One {num} => sayHello(num)
}

///// {value: String} is not assignable to type {num: Num} in parameter 0 of function Value::One
fn sayHello(name: String) {print('Hello, $name')}

enum Value { One {num: Num} }

match Value::One({value: 'World'}) {
  Value::One {num} => sayHello(num)
}

///// Num is not assignable to type String
fn sayHello(name: String) {print('Hello, $name')}

enum Value {
  One {num: Num}
  Two
}

fn func() -> Result<(), Value> {
  Err(Value::Two)
}

match func() {
  Result::Ok(_) => print('ok')
  Result::Err(Value::One {num}) => sayHello(num)
  Result::Err(Value::Two) => print('two')
}

///// Match is not exhaustive. It is missing a case for Value::Three
enum Value { One, Two, Three }

fn func() -> Option<Value> {
  Some(Value::Two)
}

match func() {
  Option::Some(Value::One) => print('one')
  Option::Some(Value::Two) => print('two')
  Option::None => print('no value')
}

///// Match arms return mixed types
print(
  match Result::Ok(5) {
    Result::Ok(num) => num
    _ => 'something'
  }
)
