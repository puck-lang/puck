print(
  match Option::Some(5) {
    Option::Some(num) => '$num'
    Option::None => 'nothing'
  }
)

print(
  match Result::Ok(5) {
    Result::Ok(num) => '$num'
    Result::Err(_) => 'error'
  }
)

print(
  match Result::Ok(5) {
    Result::Ok(num) => '$num'
    _ => 'error'
  }
)

print(match Option::Some(5) { Option::Some(num) => num, Option::None => 0 })

print(
  match Option::None {
    Option::Some(_) => 'someting'
    Option::None => 'nothing'
  }
)

print(
  match Option::None {
    _ => 'whatever'
  }
)

print(
  match Result::Err(5) {
    Result::Ok(_) => 'ok'
    Result::Err(err) => 'error: $err'
  }
)
fn sayHello(name: String) then print('Hello, $name')

match Option::Some('World') {
  Option::Some(name) => {
    let name = name.toUpperCase()
    sayHello(name)
  }
  Option::None => print('Oh, nothing')
}

enum Value
  = One {value: String}
  | Two
  | Three

match Value::One({value: 'World'}) {
  Value::One {value} => sayHello(value)
  _ => print('Sorry')
}

match Value::Two {
  Value::Two => print('two')
  Value::Three => print('three')
  _ => print('Sorry')
}

match Value::Three {
  Value::Two => print('two')
  Value::Three => print('three')
  _ => print('Sorry')
}

fn func(): Result<(), Value> {
  Err(Value::Two)
}

match func() {
  Result::Ok(_) => print('ok')
  Result::Err(Value::One {value}) => sayHello(value)
  Result::Err(Value::Two) => print('two')
  Result::Err(Value::Three) => print('three')
}

match Option::Some(Option::Some(5)) {
  Option::Some(inner) => match inner {
    Option::Some(value) => value
    Option::None => 0
  }
  Option::None => 0
}

enum Object = Object

match Object::Object {
  Object::Object => 'Object'
}
