import 'puck:js' as {console, typeof}
import 'node:module' as {a, b: c}
import 'export.puck' as {Type: RenamedType, Trait: RenamedTrait, OtherTrait: RenamedOtherTrait}
import 'export.puck' as e
import 'export.puck' as *
import 'reexport.puck' as re
import 'reexport.puck' as {a: d, Trait: ReexportedTrait, Type: ReexportedType}

export let foo = e.b + a + b + c

// asterisk imports can be shadowed
let q = 'not imported'

let f: RenamedType = ((1))
let h: (Num) = RenamedType(2)
RenamedTrait.static().default()
f.default()
f.implemented()
f.other()

trait Trait {
  fn inner(self) -> Self {self}
}

impl Trait for RenamedType {}

type Type(String)

impl RenamedTrait for Type {
  fn implemented(self) -> () {}
}

let i: e::Type = RenamedType(3)
let j: e::Enum = e::Enum::A

let k: re::Type = ReexportedType(3)
let l: e::Type = ReexportedType(3)
let m: RenamedType = re::Type(3)
let n: RenamedType = re::exportModule::Type(3)
