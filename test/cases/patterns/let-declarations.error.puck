///// "a" is already defined in this pattern
let (a, a) = (1, 2)

///// (Num, Num) is not assignable to type (??)
let (a) = (1, 2)

///// (Num, Num) is not assignable to type (??, ??, ??)
let (a, b, c) = (1, 2)

///// (Num, Num) is not assignable to type (Num, Bool)
let (a, b): (Num, Bool) = (1, 2)

///// (Bool, Bool) is not assignable to pattern (a)
let (a): (Bool, Bool) = (1, 2)

///// (Bool, Bool) is not assignable to pattern (a, b, c)
let (a, b, c): (Bool, Bool) = (1, 2)

///// (Num, Num) is not assignable to type (Num)
let (a): (Num) = (1, 2)

///// (Num, Num) is not assignable to type (Num, Num, Num)
let (a, b, c): (Num, Num, Num) = (1, 2)

///// {b: Num} is not assignable to type {a: ??}
let {a} = {b: 2}

///// (Num, Bool) is not assignable to type Tuple
type Tuple(Num, Num)
let Tuple(a, b) = (1, true)

///// (Num, Num, Num) is not assignable to type Tuple
type Tuple(Num, Num)
let Tuple(a, b) = (1, 2, 3)

///// Tuple is not assignable to pattern (a)
type Tuple(Num, Num)
let Tuple(a) = ((1))

///// Tuple is not assignable to pattern (a, b, c)
type Tuple(Num, Num)
let Tuple(a, b, c) = (1, 2, 3)

///// Tuple is not assignable to pattern (a, b, c)
type Tuple(Num, Num)
let Tuple(a, b, c) = (1, 2)

///// {c: Num} is not assignable to type Record
type Record {a: Num, b: Num}
let Record {a, b} = {c: 5}

///// Record is not assignable to pattern {a, b, c}
type Record {a: Num, b: Num}
let Record {a, b, c} = {a: 5, b: 5, c: 5}

///// Record is not assignable to pattern {c}
type Record {a: Num, b: Num}
let Record {c} = {a: 5, b: 5}

///// non exhaustive pattern
let Option::Some(value) = Option::Some(5)

///// Use of undefined variable a
let a = a

///// Num is not assignable to type String
let a = 1
let a: String = a

///// Use of undefined variable a
let a = {
  a
}

///// Can't assign to immutable variable a
let (a, mut b) = (1, 2)
a += 2
